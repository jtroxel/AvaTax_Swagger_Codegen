<?php
/**
 * TransactionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Together\Taxes\Provider\AvaTax\Swagger\ApiException;
use Together\Taxes\Provider\AvaTax\Swagger\Configuration;
use Together\Taxes\Provider\AvaTax\Swagger\HeaderSelector;
use Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addLines
     *
     * Add lines to an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AddTransactionLineModel $body information about the transaction and lines to be added (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function addLines($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->addLinesWithHttpInfo($include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation addLinesWithHttpInfo
     *
     * Add lines to an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AddTransactionLineModel $body information about the transaction and lines to be added (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLinesWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->addLinesRequest($include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLinesAsync
     *
     * Add lines to an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AddTransactionLineModel $body information about the transaction and lines to be added (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLinesAsync($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->addLinesAsyncWithHttpInfo($include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLinesAsyncWithHttpInfo
     *
     * Add lines to an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AddTransactionLineModel $body information about the transaction and lines to be added (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLinesAsyncWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->addLinesRequest($include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addLines'
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AddTransactionLineModel $body information about the transaction and lines to be added (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addLinesRequest($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {

        $resourcePath = '/api/v2/companies/transactions/lines/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adjustTransaction
     *
     * Correct a previously created transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to adjust (required)
     * @param  string $document_type (Optional): The document type of the transaction to adjust. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AdjustTransactionModel $body The adjustment you wish to make (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function adjustTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->adjustTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation adjustTransactionWithHttpInfo
     *
     * Correct a previously created transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to adjust (required)
     * @param  string $document_type (Optional): The document type of the transaction to adjust. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AdjustTransactionModel $body The adjustment you wish to make (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->adjustTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adjustTransactionAsync
     *
     * Correct a previously created transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to adjust (required)
     * @param  string $document_type (Optional): The document type of the transaction to adjust. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AdjustTransactionModel $body The adjustment you wish to make (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->adjustTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adjustTransactionAsyncWithHttpInfo
     *
     * Correct a previously created transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to adjust (required)
     * @param  string $document_type (Optional): The document type of the transaction to adjust. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AdjustTransactionModel $body The adjustment you wish to make (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adjustTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->adjustTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adjustTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to adjust (required)
     * @param  string $document_type (Optional): The document type of the transaction to adjust. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\AdjustTransactionModel $body The adjustment you wish to make (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adjustTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling adjustTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling adjustTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/adjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditTransaction
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel
     */
    public function auditTransaction($company_code, $transaction_code, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->auditTransactionWithHttpInfo($company_code, $transaction_code, $x_avalara_client);
        return $response;
    }

    /**
     * Operation auditTransactionWithHttpInfo
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auditTransactionWithHttpInfo($company_code, $transaction_code, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel';
        $request = $this->auditTransactionRequest($company_code, $transaction_code, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auditTransactionAsync
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditTransactionAsync($company_code, $transaction_code, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->auditTransactionAsyncWithHttpInfo($company_code, $transaction_code, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditTransactionAsyncWithHttpInfo
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditTransactionAsyncWithHttpInfo($company_code, $transaction_code, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel';
        $request = $this->auditTransactionRequest($company_code, $transaction_code, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditTransaction'
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditTransactionRequest($company_code, $transaction_code, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling auditTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling auditTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/audit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation auditTransactionWithType
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $document_type The document type of the original transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel
     */
    public function auditTransactionWithType($company_code, $transaction_code, $document_type, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->auditTransactionWithTypeWithHttpInfo($company_code, $transaction_code, $document_type, $x_avalara_client);
        return $response;
    }

    /**
     * Operation auditTransactionWithTypeWithHttpInfo
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $document_type The document type of the original transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function auditTransactionWithTypeWithHttpInfo($company_code, $transaction_code, $document_type, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel';
        $request = $this->auditTransactionWithTypeRequest($company_code, $transaction_code, $document_type, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation auditTransactionWithTypeAsync
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $document_type The document type of the original transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditTransactionWithTypeAsync($company_code, $transaction_code, $document_type, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->auditTransactionWithTypeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation auditTransactionWithTypeAsyncWithHttpInfo
     *
     * Get audit information about a transaction
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $document_type The document type of the original transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function auditTransactionWithTypeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\AuditTransactionModel';
        $request = $this->auditTransactionWithTypeRequest($company_code, $transaction_code, $document_type, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'auditTransactionWithType'
     *
     * @param  string $company_code The code identifying the company that owns this transaction (required)
     * @param  string $transaction_code The code identifying the transaction (required)
     * @param  string $document_type The document type of the original transaction (required)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function auditTransactionWithTypeRequest($company_code, $transaction_code, $document_type, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling auditTransactionWithType'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling auditTransactionWithType'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling auditTransactionWithType'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/types/{documentType}/audit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }
        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                '{' . 'documentType' . '}',
                ObjectSerializer::toPathValue($document_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkLockTransaction
     *
     * Lock a set of documents
     *
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionModel $body bulk lock request (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionResult
     */
    public function bulkLockTransaction($x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->bulkLockTransactionWithHttpInfo($x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation bulkLockTransactionWithHttpInfo
     *
     * Lock a set of documents
     *
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionModel $body bulk lock request (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkLockTransactionWithHttpInfo($x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionResult';
        $request = $this->bulkLockTransactionRequest($x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkLockTransactionAsync
     *
     * Lock a set of documents
     *
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionModel $body bulk lock request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkLockTransactionAsync($x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->bulkLockTransactionAsyncWithHttpInfo($x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bulkLockTransactionAsyncWithHttpInfo
     *
     * Lock a set of documents
     *
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionModel $body bulk lock request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkLockTransactionAsyncWithHttpInfo($x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionResult';
        $request = $this->bulkLockTransactionRequest($x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkLockTransaction'
     *
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\BulkLockTransactionModel $body bulk lock request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bulkLockTransactionRequest($x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {

        $resourcePath = '/api/v2/transactions/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changeTransactionCode
     *
     * Change a transaction's code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to change (required)
     * @param  string $document_type (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\ChangeTransactionCodeModel $body The code change request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function changeTransactionCode($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->changeTransactionCodeWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation changeTransactionCodeWithHttpInfo
     *
     * Change a transaction's code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to change (required)
     * @param  string $document_type (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\ChangeTransactionCodeModel $body The code change request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeTransactionCodeWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->changeTransactionCodeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changeTransactionCodeAsync
     *
     * Change a transaction's code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to change (required)
     * @param  string $document_type (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\ChangeTransactionCodeModel $body The code change request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeTransactionCodeAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->changeTransactionCodeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changeTransactionCodeAsyncWithHttpInfo
     *
     * Change a transaction's code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to change (required)
     * @param  string $document_type (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\ChangeTransactionCodeModel $body The code change request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changeTransactionCodeAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->changeTransactionCodeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changeTransactionCode'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to change (required)
     * @param  string $document_type (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\ChangeTransactionCodeModel $body The code change request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function changeTransactionCodeRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling changeTransactionCode'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling changeTransactionCode'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/changecode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation commitTransaction
     *
     * Commit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CommitTransactionModel $body The commit request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function commitTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->commitTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation commitTransactionWithHttpInfo
     *
     * Commit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CommitTransactionModel $body The commit request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function commitTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->commitTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation commitTransactionAsync
     *
     * Commit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CommitTransactionModel $body The commit request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->commitTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation commitTransactionAsyncWithHttpInfo
     *
     * Commit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CommitTransactionModel $body The commit request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function commitTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->commitTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'commitTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CommitTransactionModel $body The commit request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function commitTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling commitTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling commitTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrAdjustTransaction
     *
     * Create or adjust a transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateOrAdjustTransactionModel $body The transaction you wish to create or adjust (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function createOrAdjustTransaction($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->createOrAdjustTransactionWithHttpInfo($include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation createOrAdjustTransactionWithHttpInfo
     *
     * Create or adjust a transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateOrAdjustTransactionModel $body The transaction you wish to create or adjust (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrAdjustTransactionWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->createOrAdjustTransactionRequest($include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createOrAdjustTransactionAsync
     *
     * Create or adjust a transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateOrAdjustTransactionModel $body The transaction you wish to create or adjust (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrAdjustTransactionAsync($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->createOrAdjustTransactionAsyncWithHttpInfo($include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrAdjustTransactionAsyncWithHttpInfo
     *
     * Create or adjust a transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateOrAdjustTransactionModel $body The transaction you wish to create or adjust (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrAdjustTransactionAsyncWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->createOrAdjustTransactionRequest($include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrAdjustTransaction'
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateOrAdjustTransactionModel $body The transaction you wish to create or adjust (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createOrAdjustTransactionRequest($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {

        $resourcePath = '/api/v2/transactions/createoradjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTransaction
     *
     * Create a new transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateTransactionModel $body The transaction you wish to create (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function createTransaction($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->createTransactionWithHttpInfo($include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation createTransactionWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateTransactionModel $body The transaction you wish to create (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTransactionWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->createTransactionRequest($include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTransactionAsync
     *
     * Create a new transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateTransactionModel $body The transaction you wish to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransactionAsync($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->createTransactionAsyncWithHttpInfo($include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTransactionAsyncWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateTransactionModel $body The transaction you wish to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTransactionAsyncWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->createTransactionRequest($include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTransaction'
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\CreateTransactionModel $body The transaction you wish to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTransactionRequest($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {

        $resourcePath = '/api/v2/transactions/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLines
     *
     * Remove lines from an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RemoveTransactionLineModel $body information about the transaction and lines to be removed (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function deleteLines($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->deleteLinesWithHttpInfo($include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation deleteLinesWithHttpInfo
     *
     * Remove lines from an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RemoveTransactionLineModel $body information about the transaction and lines to be removed (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLinesWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->deleteLinesRequest($include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLinesAsync
     *
     * Remove lines from an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RemoveTransactionLineModel $body information about the transaction and lines to be removed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinesAsync($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->deleteLinesAsyncWithHttpInfo($include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLinesAsyncWithHttpInfo
     *
     * Remove lines from an existing unlocked transaction
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RemoveTransactionLineModel $body information about the transaction and lines to be removed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinesAsyncWithHttpInfo($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->deleteLinesRequest($include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLines'
     *
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RemoveTransactionLineModel $body information about the transaction and lines to be removed (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLinesRequest($include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {

        $resourcePath = '/api/v2/companies/transactions/lines/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionByCode
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type (Optional): The document type of the transaction to retrieve (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function getTransactionByCode($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->getTransactionByCodeWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client);
        return $response;
    }

    /**
     * Operation getTransactionByCodeWithHttpInfo
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type (Optional): The document type of the transaction to retrieve (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionByCodeWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByCodeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionByCodeAsync
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type (Optional): The document type of the transaction to retrieve (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByCodeAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->getTransactionByCodeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionByCodeAsyncWithHttpInfo
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type (Optional): The document type of the transaction to retrieve (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByCodeAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByCodeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionByCode'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type (Optional): The document type of the transaction to retrieve (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionByCodeRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling getTransactionByCode'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling getTransactionByCode'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionByCodeAndType
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type The transaction type to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function getTransactionByCodeAndType($company_code, $transaction_code, $document_type, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->getTransactionByCodeAndTypeWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client);
        return $response;
    }

    /**
     * Operation getTransactionByCodeAndTypeWithHttpInfo
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type The transaction type to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionByCodeAndTypeWithHttpInfo($company_code, $transaction_code, $document_type, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByCodeAndTypeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionByCodeAndTypeAsync
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type The transaction type to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByCodeAndTypeAsync($company_code, $transaction_code, $document_type, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->getTransactionByCodeAndTypeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionByCodeAndTypeAsyncWithHttpInfo
     *
     * Retrieve a single transaction by code
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type The transaction type to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByCodeAndTypeAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByCodeAndTypeRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionByCodeAndType'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to retrieve (required)
     * @param  string $document_type The transaction type to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionByCodeAndTypeRequest($company_code, $transaction_code, $document_type, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling getTransactionByCodeAndType'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling getTransactionByCodeAndType'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling getTransactionByCodeAndType'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/types/{documentType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }
        // path params
        if ($document_type !== null) {
            $resourcePath = str_replace(
                '{' . 'documentType' . '}',
                ObjectSerializer::toPathValue($document_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionById
     *
     * Retrieve a single transaction by ID
     *
     * @param  int $id The unique ID number of the transaction to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function getTransactionById($id, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->getTransactionByIdWithHttpInfo($id, $include, $x_avalara_client);
        return $response;
    }

    /**
     * Operation getTransactionByIdWithHttpInfo
     *
     * Retrieve a single transaction by ID
     *
     * @param  int $id The unique ID number of the transaction to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionByIdWithHttpInfo($id, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByIdRequest($id, $include, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionByIdAsync
     *
     * Retrieve a single transaction by ID
     *
     * @param  int $id The unique ID number of the transaction to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByIdAsync($id, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->getTransactionByIdAsyncWithHttpInfo($id, $include, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionByIdAsyncWithHttpInfo
     *
     * Retrieve a single transaction by ID
     *
     * @param  int $id The unique ID number of the transaction to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionByIdAsyncWithHttpInfo($id, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->getTransactionByIdRequest($id, $include, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionById'
     *
     * @param  int $id The unique ID number of the transaction to retrieve (required)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionByIdRequest($id, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTransactionById'
            );
        }

        $resourcePath = '/api/v2/transactions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransactionsByCompany
     *
     * Retrieve all transactions
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  int $data_source_id Optionally filter transactions to those from a specific data source. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $filter A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).&lt;br /&gt;*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction (optional)
     * @param  int $top If nonzero, return no more than this number of results.  Used with &#x60;$skip&#x60; to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records. (optional)
     * @param  int $skip If nonzero, skip this number of results before returning data.  Used with &#x60;$top&#x60; to provide pagination for large datasets. (optional)
     * @param  string $order_by A comma separated list of sort statements in the format &#x60;(fieldname) [ASC|DESC]&#x60;, for example &#x60;id ASC&#x60;. (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\FetchResultTransactionModel
     */
    public function listTransactionsByCompany($company_code, $data_source_id = null, $include = null, $filter = null, $top = null, $skip = null, $order_by = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->listTransactionsByCompanyWithHttpInfo($company_code, $data_source_id, $include, $filter, $top, $skip, $order_by, $x_avalara_client);
        return $response;
    }

    /**
     * Operation listTransactionsByCompanyWithHttpInfo
     *
     * Retrieve all transactions
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  int $data_source_id Optionally filter transactions to those from a specific data source. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $filter A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).&lt;br /&gt;*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction (optional)
     * @param  int $top If nonzero, return no more than this number of results.  Used with &#x60;$skip&#x60; to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records. (optional)
     * @param  int $skip If nonzero, skip this number of results before returning data.  Used with &#x60;$top&#x60; to provide pagination for large datasets. (optional)
     * @param  string $order_by A comma separated list of sort statements in the format &#x60;(fieldname) [ASC|DESC]&#x60;, for example &#x60;id ASC&#x60;. (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\FetchResultTransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransactionsByCompanyWithHttpInfo($company_code, $data_source_id = null, $include = null, $filter = null, $top = null, $skip = null, $order_by = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\FetchResultTransactionModel';
        $request = $this->listTransactionsByCompanyRequest($company_code, $data_source_id, $include, $filter, $top, $skip, $order_by, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\FetchResultTransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransactionsByCompanyAsync
     *
     * Retrieve all transactions
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  int $data_source_id Optionally filter transactions to those from a specific data source. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $filter A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).&lt;br /&gt;*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction (optional)
     * @param  int $top If nonzero, return no more than this number of results.  Used with &#x60;$skip&#x60; to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records. (optional)
     * @param  int $skip If nonzero, skip this number of results before returning data.  Used with &#x60;$top&#x60; to provide pagination for large datasets. (optional)
     * @param  string $order_by A comma separated list of sort statements in the format &#x60;(fieldname) [ASC|DESC]&#x60;, for example &#x60;id ASC&#x60;. (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsByCompanyAsync($company_code, $data_source_id = null, $include = null, $filter = null, $top = null, $skip = null, $order_by = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->listTransactionsByCompanyAsyncWithHttpInfo($company_code, $data_source_id, $include, $filter, $top, $skip, $order_by, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransactionsByCompanyAsyncWithHttpInfo
     *
     * Retrieve all transactions
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  int $data_source_id Optionally filter transactions to those from a specific data source. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $filter A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).&lt;br /&gt;*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction (optional)
     * @param  int $top If nonzero, return no more than this number of results.  Used with &#x60;$skip&#x60; to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records. (optional)
     * @param  int $skip If nonzero, skip this number of results before returning data.  Used with &#x60;$top&#x60; to provide pagination for large datasets. (optional)
     * @param  string $order_by A comma separated list of sort statements in the format &#x60;(fieldname) [ASC|DESC]&#x60;, for example &#x60;id ASC&#x60;. (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsByCompanyAsyncWithHttpInfo($company_code, $data_source_id = null, $include = null, $filter = null, $top = null, $skip = null, $order_by = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\FetchResultTransactionModel';
        $request = $this->listTransactionsByCompanyRequest($company_code, $data_source_id, $include, $filter, $top, $skip, $order_by, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransactionsByCompany'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  int $data_source_id Optionally filter transactions to those from a specific data source. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $filter A filter statement to identify specific records to retrieve.  For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).&lt;br /&gt;*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction (optional)
     * @param  int $top If nonzero, return no more than this number of results.  Used with &#x60;$skip&#x60; to provide pagination for large datasets.  Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records. (optional)
     * @param  int $skip If nonzero, skip this number of results before returning data.  Used with &#x60;$top&#x60; to provide pagination for large datasets. (optional)
     * @param  string $order_by A comma separated list of sort statements in the format &#x60;(fieldname) [ASC|DESC]&#x60;, for example &#x60;id ASC&#x60;. (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransactionsByCompanyRequest($company_code, $data_source_id = null, $include = null, $filter = null, $top = null, $skip = null, $order_by = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling listTransactionsByCompany'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($data_source_id !== null) {
            $queryParams['dataSourceId'] = ObjectSerializer::toQueryValue($data_source_id);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($filter !== null) {
            $queryParams['$filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($top !== null) {
            $queryParams['$top'] = ObjectSerializer::toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['$skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['$orderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lockTransaction
     *
     * Lock a single transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to lock (required)
     * @param  string $document_type (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\LockTransactionModel $body The lock request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function lockTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->lockTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation lockTransactionWithHttpInfo
     *
     * Lock a single transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to lock (required)
     * @param  string $document_type (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\LockTransactionModel $body The lock request you wish to execute (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function lockTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->lockTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation lockTransactionAsync
     *
     * Lock a single transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to lock (required)
     * @param  string $document_type (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\LockTransactionModel $body The lock request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lockTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->lockTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lockTransactionAsyncWithHttpInfo
     *
     * Lock a single transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to lock (required)
     * @param  string $document_type (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\LockTransactionModel $body The lock request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lockTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->lockTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lockTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to lock (required)
     * @param  string $document_type (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\LockTransactionModel $body The lock request you wish to execute (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function lockTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling lockTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling lockTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/lock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundTransaction
     *
     * Create a refund for a transaction
     *
     * @param  string $company_code The code of the company that made the original sale (required)
     * @param  string $transaction_code The transaction code of the original sale (required)
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $document_type (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (optional)
     * @param  bool $use_tax_date_override (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states). (optional, default to false)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RefundTransactionModel $body Information about the refund to create (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function refundTransaction($company_code, $transaction_code, $include = null, $document_type = null, $use_tax_date_override = 'false', $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->refundTransactionWithHttpInfo($company_code, $transaction_code, $include, $document_type, $use_tax_date_override, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation refundTransactionWithHttpInfo
     *
     * Create a refund for a transaction
     *
     * @param  string $company_code The code of the company that made the original sale (required)
     * @param  string $transaction_code The transaction code of the original sale (required)
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $document_type (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (optional)
     * @param  bool $use_tax_date_override (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states). (optional, default to false)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RefundTransactionModel $body Information about the refund to create (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundTransactionWithHttpInfo($company_code, $transaction_code, $include = null, $document_type = null, $use_tax_date_override = 'false', $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->refundTransactionRequest($company_code, $transaction_code, $include, $document_type, $use_tax_date_override, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundTransactionAsync
     *
     * Create a refund for a transaction
     *
     * @param  string $company_code The code of the company that made the original sale (required)
     * @param  string $transaction_code The transaction code of the original sale (required)
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $document_type (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (optional)
     * @param  bool $use_tax_date_override (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states). (optional, default to false)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RefundTransactionModel $body Information about the refund to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsync($company_code, $transaction_code, $include = null, $document_type = null, $use_tax_date_override = 'false', $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->refundTransactionAsyncWithHttpInfo($company_code, $transaction_code, $include, $document_type, $use_tax_date_override, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundTransactionAsyncWithHttpInfo
     *
     * Create a refund for a transaction
     *
     * @param  string $company_code The code of the company that made the original sale (required)
     * @param  string $transaction_code The transaction code of the original sale (required)
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $document_type (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (optional)
     * @param  bool $use_tax_date_override (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states). (optional, default to false)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RefundTransactionModel $body Information about the refund to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundTransactionAsyncWithHttpInfo($company_code, $transaction_code, $include = null, $document_type = null, $use_tax_date_override = 'false', $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->refundTransactionRequest($company_code, $transaction_code, $include, $document_type, $use_tax_date_override, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundTransaction'
     *
     * @param  string $company_code The code of the company that made the original sale (required)
     * @param  string $transaction_code The transaction code of the original sale (required)
     * @param  string $include Specifies objects to include in the response after transaction is created (optional)
     * @param  string $document_type (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (optional)
     * @param  bool $use_tax_date_override (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states). (optional, default to false)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\RefundTransactionModel $body Information about the refund to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundTransactionRequest($company_code, $transaction_code, $include = null, $document_type = null, $use_tax_date_override = 'false', $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling refundTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling refundTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($use_tax_date_override !== null) {
            $queryParams['useTaxDateOverride'] = ObjectSerializer::toQueryValue($use_tax_date_override);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settleTransaction
     *
     * Perform multiple actions on a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\SettleTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function settleTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->settleTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation settleTransactionWithHttpInfo
     *
     * Perform multiple actions on a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\SettleTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function settleTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->settleTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settleTransactionAsync
     *
     * Perform multiple actions on a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\SettleTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->settleTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settleTransactionAsyncWithHttpInfo
     *
     * Perform multiple actions on a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\SettleTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->settleTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settleTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\SettleTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function settleTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling settleTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling settleTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/settle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uncommitTransaction
     *
     * Uncommit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to Uncommit (required)
     * @param  string $document_type (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function uncommitTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->uncommitTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client);
        return $response;
    }

    /**
     * Operation uncommitTransactionWithHttpInfo
     *
     * Uncommit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to Uncommit (required)
     * @param  string $document_type (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function uncommitTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->uncommitTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uncommitTransactionAsync
     *
     * Uncommit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to Uncommit (required)
     * @param  string $document_type (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uncommitTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->uncommitTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uncommitTransactionAsyncWithHttpInfo
     *
     * Uncommit a transaction for reporting
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to Uncommit (required)
     * @param  string $document_type (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uncommitTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->uncommitTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uncommitTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to Uncommit (required)
     * @param  string $document_type (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uncommitTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling uncommitTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling uncommitTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/uncommit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unvoidTransaction
     *
     * Unvoids a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function unvoidTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        list($response) = $this->unvoidTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client);
        return $response;
    }

    /**
     * Operation unvoidTransactionWithHttpInfo
     *
     * Unvoids a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function unvoidTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->unvoidTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unvoidTransactionAsync
     *
     * Unvoids a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unvoidTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        return $this->unvoidTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unvoidTransactionAsyncWithHttpInfo
     *
     * Unvoids a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unvoidTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->unvoidTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unvoidTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to commit (required)
     * @param  string $document_type (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unvoidTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0')
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling unvoidTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling unvoidTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/unvoid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyTransaction
     *
     * Verify a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VerifyTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function verifyTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->verifyTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation verifyTransactionWithHttpInfo
     *
     * Verify a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VerifyTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->verifyTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyTransactionAsync
     *
     * Verify a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VerifyTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->verifyTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyTransactionAsyncWithHttpInfo
     *
     * Verify a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VerifyTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->verifyTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to settle (required)
     * @param  string $document_type (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VerifyTransactionModel $body The data from an external system to reconcile against AvaTax (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function verifyTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling verifyTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling verifyTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidTransaction
     *
     * Void a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to void (required)
     * @param  string $document_type (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VoidTransactionModel $body The void request you wish to execute. To void a transaction the code must be set to &#39;DocVoided&#39; (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel
     */
    public function voidTransaction($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        list($response) = $this->voidTransactionWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);
        return $response;
    }

    /**
     * Operation voidTransactionWithHttpInfo
     *
     * Void a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to void (required)
     * @param  string $document_type (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VoidTransactionModel $body The void request you wish to execute. To void a transaction the code must be set to &#39;DocVoided&#39; (optional)
     *
     * @throws \Together\Taxes\Provider\AvaTax\Swagger\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidTransactionWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->voidTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidTransactionAsync
     *
     * Void a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to void (required)
     * @param  string $document_type (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VoidTransactionModel $body The void request you wish to execute. To void a transaction the code must be set to &#39;DocVoided&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidTransactionAsync($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        return $this->voidTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidTransactionAsyncWithHttpInfo
     *
     * Void a transaction
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to void (required)
     * @param  string $document_type (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VoidTransactionModel $body The void request you wish to execute. To void a transaction the code must be set to &#39;DocVoided&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidTransactionAsyncWithHttpInfo($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        $returnType = '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionModel';
        $request = $this->voidTransactionRequest($company_code, $transaction_code, $document_type, $include, $x_avalara_client, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidTransaction'
     *
     * @param  string $company_code The company code of the company that recorded this transaction (required)
     * @param  string $transaction_code The transaction code to void (required)
     * @param  string $document_type (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (optional)
     * @param  string $include Specifies objects to include in this fetch call (optional)
     * @param  string $x_avalara_client Identifies the software you are using to call this API.  For more information on the client header, see [Client Headers](https://developer.avalara.com/avatax/client-headers/) . (optional, default to Swagger UI; 20.9.0; Custom; 1.0)
     * @param  \Together\Taxes\Provider\AvaTax\Swagger\Model\VoidTransactionModel $body The void request you wish to execute. To void a transaction the code must be set to &#39;DocVoided&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidTransactionRequest($company_code, $transaction_code, $document_type = null, $include = null, $x_avalara_client = 'Swagger UI; 20.9.0; Custom; 1.0', $body = null)
    {
        // verify the required parameter 'company_code' is set
        if ($company_code === null || (is_array($company_code) && count($company_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_code when calling voidTransaction'
            );
        }
        // verify the required parameter 'transaction_code' is set
        if ($transaction_code === null || (is_array($transaction_code) && count($transaction_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_code when calling voidTransaction'
            );
        }

        $resourcePath = '/api/v2/companies/{companyCode}/transactions/{transactionCode}/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['documentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($include !== null) {
            $queryParams['$include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($x_avalara_client !== null) {
            $headerParams['X-Avalara-Client'] = ObjectSerializer::toHeaderValue($x_avalara_client);
        }

        // path params
        if ($company_code !== null) {
            $resourcePath = str_replace(
                '{' . 'companyCode' . '}',
                ObjectSerializer::toPathValue($company_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_code !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionCode' . '}',
                ObjectSerializer::toPathValue($transaction_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
