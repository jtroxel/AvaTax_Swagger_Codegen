<?php
/**
 * ErrorDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * ErrorDetail Class Doc Comment
 *
 * @category Class
 * @description Message object
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ErrorDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'number' => 'int',
        'message' => 'string',
        'description' => 'string',
        'fault_code' => 'string',
        'fault_sub_code' => 'string',
        'help_link' => 'string',
        'refers_to' => 'string',
        'severity' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'number' => 'int32',
        'message' => null,
        'description' => null,
        'fault_code' => null,
        'fault_sub_code' => null,
        'help_link' => null,
        'refers_to' => null,
        'severity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'number' => 'number',
        'message' => 'message',
        'description' => 'description',
        'fault_code' => 'faultCode',
        'fault_sub_code' => 'faultSubCode',
        'help_link' => 'helpLink',
        'refers_to' => 'refersTo',
        'severity' => 'severity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'number' => 'setNumber',
        'message' => 'setMessage',
        'description' => 'setDescription',
        'fault_code' => 'setFaultCode',
        'fault_sub_code' => 'setFaultSubCode',
        'help_link' => 'setHelpLink',
        'refers_to' => 'setRefersTo',
        'severity' => 'setSeverity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'number' => 'getNumber',
        'message' => 'getMessage',
        'description' => 'getDescription',
        'fault_code' => 'getFaultCode',
        'fault_sub_code' => 'getFaultSubCode',
        'help_link' => 'getHelpLink',
        'refers_to' => 'getRefersTo',
        'severity' => 'getSeverity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODE_SERVER_CONFIGURATION = 'ServerConfiguration';
    const CODE_ACCOUNT_INVALID_EXCEPTION = 'AccountInvalidException';
    const CODE_COMPANY_INVALID_EXCEPTION = 'CompanyInvalidException';
    const CODE_ENTITY_NOT_FOUND_ERROR = 'EntityNotFoundError';
    const CODE_VALUE_REQUIRED_ERROR = 'ValueRequiredError';
    const CODE_RANGE_ERROR = 'RangeError';
    const CODE_RANGE_COMPARE_ERROR = 'RangeCompareError';
    const CODE_RANGE_SET_ERROR = 'RangeSetError';
    const CODE_TAXPAYER_NUMBER_REQUIRED = 'TaxpayerNumberRequired';
    const CODE_ENTITY_LIMIT_EXCEEDED = 'EntityLimitExceeded';
    const CODE_COMMON_PASSWORD = 'CommonPassword';
    const CODE_WEAK_PASSWORD = 'WeakPassword';
    const CODE_STRING_LENGTH_ERROR = 'StringLengthError';
    const CODE_MAX_STRING_LENGTH_ERROR = 'MaxStringLengthError';
    const CODE_EMAIL_VALIDATION_ERROR = 'EmailValidationError';
    const CODE_EMAIL_MISSING_ERROR = 'EmailMissingError';
    const CODE_INVALID_QUERY_FIELD = 'InvalidQueryField';
    const CODE_INVALID_QUERY_VALUE = 'InvalidQueryValue';
    const CODE_SYNTAX_ERROR = 'SyntaxError';
    const CODE_TOO_MANY_PARAMETERS_ERROR = 'TooManyParametersError';
    const CODE_UNTERMINATED_VALUE_ERROR = 'UnterminatedValueError';
    const CODE_DELETE_USER_SELF_ERROR = 'DeleteUserSelfError';
    const CODE_OLD_PASSWORD_INVALID = 'OldPasswordInvalid';
    const CODE_CANNOT_CHANGE_PASSWORD = 'CannotChangePassword';
    const CODE_READ_ONLY = 'ReadOnly';
    const CODE_DATE_FORMAT_ERROR = 'DateFormatError';
    const CODE_NO_DEFAULT_COMPANY = 'NoDefaultCompany';
    const CODE_ACCOUNT_TYPE_NOT_SUPPORTED = 'AccountTypeNotSupported';
    const CODE_AUTHENTICATION_EXCEPTION = 'AuthenticationException';
    const CODE_AUTHORIZATION_EXCEPTION = 'AuthorizationException';
    const CODE_VALIDATION_EXCEPTION = 'ValidationException';
    const CODE_INACTIVE_USER_ERROR = 'InactiveUserError';
    const CODE_AUTHENTICATION_INCOMPLETE = 'AuthenticationIncomplete';
    const CODE_BASIC_AUTH_INCORRECT = 'BasicAuthIncorrect';
    const CODE_IDENTITY_SERVER_ERROR = 'IdentityServerError';
    const CODE_BEARER_TOKEN_INVALID = 'BearerTokenInvalid';
    const CODE_MODEL_REQUIRED_EXCEPTION = 'ModelRequiredException';
    const CODE_ACCOUNT_EXPIRED_EXCEPTION = 'AccountExpiredException';
    const CODE_BEARER_TOKEN_NOT_SUPPORTED = 'BearerTokenNotSupported';
    const CODE_INVALID_SECURITY_ROLE = 'InvalidSecurityRole';
    const CODE_INVALID_REGISTRAR_ACTION = 'InvalidRegistrarAction';
    const CODE_REMOTE_SERVER_ERROR = 'RemoteServerError';
    const CODE_NO_FILTER_CRITERIA_EXCEPTION = 'NoFilterCriteriaException';
    const CODE_OPEN_CLAUSE_EXCEPTION = 'OpenClauseException';
    const CODE_JSON_FORMAT_ERROR = 'JsonFormatError';
    const CODE_INVALID_DECIMAL_VALUE = 'InvalidDecimalValue';
    const CODE_PERMISSION_REQUIRED = 'PermissionRequired';
    const CODE_UNHANDLED_EXCEPTION = 'UnhandledException';
    const CODE_INACTIVE_ACCOUNT = 'InactiveAccount';
    const CODE_LINKAGE_NOT_ALLOWED = 'LinkageNotAllowed';
    const CODE_LINKAGE_STATUS_UPDATE_NOT_SUPPORTED = 'LinkageStatusUpdateNotSupported';
    const CODE_REPORTING_COMPANY_MUST_HAVE_CONTACTS_ERROR = 'ReportingCompanyMustHaveContactsError';
    const CODE_COMPANY_PROFILE_NOT_SET = 'CompanyProfileNotSet';
    const CODE_CANNOT_ASSIGN_USER_TO_COMPANY = 'CannotAssignUserToCompany';
    const CODE_MUST_ASSIGN_USER_TO_COMPANY = 'MustAssignUserToCompany';
    const CODE_INVALID_TAX_TYPE_MAPPING = 'InvalidTaxTypeMapping';
    const CODE_MODEL_STATE_INVALID = 'ModelStateInvalid';
    const CODE_DATE_RANGE_ERROR = 'DateRangeError';
    const CODE_INVALID_DATE_RANGE_ERROR = 'InvalidDateRangeError';
    const CODE_RULE_MUST_HAVE_TAX_CODE = 'RuleMustHaveTaxCode';
    const CODE_RULE_TYPE_RESTRICTED = 'RuleTypeRestricted';
    const CODE_INVALID_COMPANY_LOCATION_SETTING = 'InvalidCompanyLocationSetting';
    const CODE_INVALID_ADJUSTMENT_TYPE = 'InvalidAdjustmentType';
    const CODE_DELETE_INFORMATION = 'DeleteInformation';
    const CODE_OUT_OF_RANGE = 'OutOfRange';
    const CODE_UNSPECIFIED_TIME_ZONE = 'UnspecifiedTimeZone';
    const CODE_CANNOT_CREATE_DELETED_OBJECTS = 'CannotCreateDeletedObjects';
    const CODE_CANNOT_MODIFY_DELETED_OBJECTS = 'CannotModifyDeletedObjects';
    const CODE_RETURN_NAME_NOT_FOUND = 'ReturnNameNotFound';
    const CODE_INVALID_ADDRESS_TYPE_AND_CATEGORY = 'InvalidAddressTypeAndCategory';
    const CODE_DEFAULT_COMPANY_LOCATION = 'DefaultCompanyLocation';
    const CODE_INVALID_COUNTRY = 'InvalidCountry';
    const CODE_INVALID_COUNTRY_REGION = 'InvalidCountryRegion';
    const CODE_BRAZIL_VALIDATION_ERROR = 'BrazilValidationError';
    const CODE_BRAZIL_EXEMPT_VALIDATION_ERROR = 'BrazilExemptValidationError';
    const CODE_BRAZIL_PIS_COFINS_ERROR = 'BrazilPisCofinsError';
    const CODE_JURISDICTION_NOT_FOUND_ERROR = 'JurisdictionNotFoundError';
    const CODE_MEDICAL_EXCISE_ERROR = 'MedicalExciseError';
    const CODE_RATE_DEPENDS_TAXABILITY_ERROR = 'RateDependsTaxabilityError';
    const CODE_INVALID_RATE_TYPE_CODE = 'InvalidRateTypeCode';
    const CODE_RATE_TYPE_NOT_SUPPORTED = 'RateTypeNotSupported';
    const CODE_CANNOT_UPDATE_NESTED_OBJECTS = 'CannotUpdateNestedObjects';
    const CODE_UPC_CODE_INVALID_CHARS = 'UPCCodeInvalidChars';
    const CODE_UPC_CODE_INVALID_LENGTH = 'UPCCodeInvalidLength';
    const CODE_INCORRECT_PATH_ERROR = 'IncorrectPathError';
    const CODE_INVALID_JURISDICTION_TYPE = 'InvalidJurisdictionType';
    const CODE_MUST_CONFIRM_RESET_LICENSE_KEY = 'MustConfirmResetLicenseKey';
    const CODE_DUPLICATE_COMPANY_CODE = 'DuplicateCompanyCode';
    const CODE_TIN_FORMAT_ERROR = 'TINFormatError';
    const CODE_DUPLICATE_NEXUS_ERROR = 'DuplicateNexusError';
    const CODE_UNKNOWN_NEXUS_ERROR = 'UnknownNexusError';
    const CODE_PARENT_NEXUS_NOT_FOUND = 'ParentNexusNotFound';
    const CODE_INVALID_TAX_CODE_TYPE = 'InvalidTaxCodeType';
    const CODE_CANNOT_ACTIVATE_COMPANY = 'CannotActivateCompany';
    const CODE_DUPLICATE_ENTITY_PROPERTY = 'DuplicateEntityProperty';
    const CODE_REPORTING_ENTITY_ERROR = 'ReportingEntityError';
    const CODE_INVALID_RETURN_OPERATION_ERROR = 'InvalidReturnOperationError';
    const CODE_CANNOT_DELETE_COMPANY = 'CannotDeleteCompany';
    const CODE_COUNTRY_OVERRIDES_NOT_AVAILABLE = 'CountryOverridesNotAvailable';
    const CODE_JURISDICTION_OVERRIDE_MISMATCH = 'JurisdictionOverrideMismatch';
    const CODE_DUPLICATE_SYSTEM_TAX_CODE = 'DuplicateSystemTaxCode';
    const CODE_NEXUS_DATE_MISMATCH = 'NexusDateMismatch';
    const CODE_NEXUS_PARENT_DATE_MISMATCH = 'NexusParentDateMismatch';
    const CODE_BEARER_TOKEN_PARSE_USER_ID_ERROR = 'BearerTokenParseUserIdError';
    const CODE_RETRIEVE_USER_ERROR = 'RetrieveUserError';
    const CODE_INVALID_CONFIGURATION_SETTING = 'InvalidConfigurationSetting';
    const CODE_INVALID_CONFIGURATION_VALUE = 'InvalidConfigurationValue';
    const CODE_INVALID_ENUM_VALUE = 'InvalidEnumValue';
    const CODE_TAX_CODE_ASSOCIATED_TAX_RULE = 'TaxCodeAssociatedTaxRule';
    const CODE_CANNOT_SWITCH_ACCOUNT_ID = 'CannotSwitchAccountId';
    const CODE_REQUEST_INCOMPLETE = 'RequestIncomplete';
    const CODE_ACCOUNT_NOT_NEW = 'AccountNotNew';
    const CODE_PASSWORD_LENGTH_INVALID = 'PasswordLengthInvalid';
    const CODE_INVALID_PAGE_KEY = 'InvalidPageKey';
    const CODE_INVALID_ECMS_OVERRIDE_CODE = 'InvalidEcmsOverrideCode';
    const CODE_ACCOUNT_DOES_NOT_EXIST = 'AccountDoesNotExist';
    const CODE_INVALID_TAX_TYPE = 'InvalidTaxType';
    const CODE_INCORRECT_FIELD_VALUE = 'IncorrectFieldValue';
    const CODE_LEADING_OR_TRAILING_EXCEPTION = 'LeadingOrTrailingException';
    const CODE_NOT_ENOUGH_ADDRESSES_INFO = 'NotEnoughAddressesInfo';
    const CODE_REPORT_NOT_INITIATED = 'ReportNotInitiated';
    const CODE_FAILED_TO_BUILD_REPORT = 'FailedToBuildReport';
    const CODE_REPORT_NOT_FINISHED = 'ReportNotFinished';
    const CODE_FAILED_TO_DOWNLOAD_REPORT = 'FailedToDownloadReport';
    const CODE_MALFORMED_FILTER_EXCEPTION = 'MalformedFilterException';
    const CODE_EXPECTED_CONJUNCTION_ERROR = 'ExpectedConjunctionError';
    const CODE_CRITERIA_NOT_SUPPORTED_ERROR = 'CriteriaNotSupportedError';
    const CODE_COMPANY_ACCOUNT_AND_PARENT_ACCOUNT_MISMATCH = 'CompanyAccountAndParentAccountMismatch';
    const CODE_INVALID_FILE_CONTENT_TYPE = 'InvalidFileContentType';
    const CODE_REQUEST_TOO_LARGE = 'RequestTooLarge';
    const CODE_ECMS_DISABLED = 'EcmsDisabled';
    const CODE_UNKNOWN_CONJUNCTION_ERROR = 'UnknownConjunctionError';
    const CODE_NO_LINES_DISCOUNTED = 'NoLinesDiscounted';
    const CODE_FAILED_TO_DELETE = 'FailedToDelete';
    const CODE_CIRCULAR_COMPANY_HIERARCHIES = 'CircularCompanyHierarchies';
    const CODE_DUPLICATE_ENTRY = 'DuplicateEntry';
    const CODE_DUPLICATE_FIELD_NAME_IN_ORDER_BY = 'DuplicateFieldNameInOrderBy';
    const CODE_CANNOT_ADJUST_DOCUMENT_TYPE = 'CannotAdjustDocumentType';
    const CODE_USER_NO_ACCESS = 'UserNoAccess';
    const CODE_INVALID_ENTRY = 'InvalidEntry';
    const CODE_TRANSACTION_ALREADY_CANCELLED = 'TransactionAlreadyCancelled';
    const CODE_QUERY_PARAMETER_OUT_OF_RANGE = 'QueryParameterOutOfRange';
    const CODE_BATCH_SALES_AUDIT_MUST_BE_ZIPPED_ERROR = 'BatchSalesAuditMustBeZippedError';
    const CODE_BATCH_ZIP_MUST_CONTAIN_ONE_FILE_ERROR = 'BatchZipMustContainOneFileError';
    const CODE_BATCH_INVALID_FILE_TYPE_ERROR = 'BatchInvalidFileTypeError';
    const CODE_BATCH_CANNOT_SAVE_BATCH_FILE = 'BatchCannotSaveBatchFile';
    const CODE_BATCH_CANNOT_GET_BATCH_FILE = 'BatchCannotGetBatchFile';
    const CODE_BATCH_CANNOT_DELETE_BATCH_FILE = 'BatchCannotDeleteBatchFile';
    const CODE_BATCH_MUST_CONTAIN_ONE_FILE = 'BatchMustContainOneFile';
    const CODE_MISSING_BATCH_FILE_CONTENT = 'MissingBatchFileContent';
    const CODE_BATCH_CANNOT_BE_DELETED_WHILE_PROCESSING = 'BatchCannotBeDeletedWhileProcessing';
    const CODE_INTERNAL_SERVER_ERROR = 'InternalServerError';
    const CODE_POINT_OF_SALE_FILE_SIZE = 'PointOfSaleFileSize';
    const CODE_POINT_OF_SALE_SETUP = 'PointOfSaleSetup';
    const CODE_INVALID_INPUT_DATE = 'InvalidInputDate';
    const CODE_GET_TAX_ERROR = 'GetTaxError';
    const CODE_ADDRESS_CONFLICT_EXCEPTION = 'AddressConflictException';
    const CODE_DOCUMENT_CODE_CONFLICT = 'DocumentCodeConflict';
    const CODE_MISSING_ADDRESS = 'MissingAddress';
    const CODE_INVALID_PARAMETER_VALUE = 'InvalidParameterValue';
    const CODE_FETCH_LIMIT = 'FetchLimit';
    const CODE_INVALID_ADDRESS = 'InvalidAddress';
    const CODE_ADDRESS_LOCATION_NOT_FOUND = 'AddressLocationNotFound';
    const CODE_MISSING_LINE = 'MissingLine';
    const CODE_INVALID_ADDRESS_TEXT_CASE = 'InvalidAddressTextCase';
    const CODE_DOCUMENT_NOT_COMMITTED = 'DocumentNotCommitted';
    const CODE_INVALID_DOCUMENT_TYPES_TO_FETCH = 'InvalidDocumentTypesToFetch';
    const CODE_TIMEOUT_REQUESTED = 'TimeoutRequested';
    const CODE_INVALID_POSTAL_CODE = 'InvalidPostalCode';
    const CODE_INVALID_SUBSCRIPTION_DESCRIPTION = 'InvalidSubscriptionDescription';
    const CODE_INVALID_SUBSCRIPTION_TYPE_ID = 'InvalidSubscriptionTypeId';
    const CODE_CANNOT_CHANGE_FILING_STATUS = 'CannotChangeFilingStatus';
    const CODE_FEIN_FORMAT_ERROR = 'FEINFormatError';
    const CODE_SERVER_UNREACHABLE = 'ServerUnreachable';
    const CODE_SUBSCRIPTION_REQUIRED = 'SubscriptionRequired';
    const CODE_ACCOUNT_EXISTS = 'AccountExists';
    const CODE_INVITATION_ONLY = 'InvitationOnly';
    const CODE_FREE_TRIAL_NOT_AVAILABLE = 'FreeTrialNotAvailable';
    const CODE_ACCOUNT_EXISTS_DIFFERENT_EMAIL = 'AccountExistsDifferentEmail';
    const CODE_AVALARA_IDENTITY_API_ERROR = 'AvalaraIdentityApiError';
    const CODE_INVALID_IP_ADDRESS = 'InvalidIPAddress';
    const CODE_OFFER_CODE_ALREADY_APPLIED = 'OfferCodeAlreadyApplied';
    const CODE_ACCOUNT_ALREADY_EXISTS = 'AccountAlreadyExists';
    const CODE_LICENSE_KEY_NAME_ALREADY_EXISTS_FOR_ACCOUNT = 'LicenseKeyNameAlreadyExistsForAccount';
    const CODE_REFUND_TYPE_AND_PERCENTAGE_MISMATCH = 'RefundTypeAndPercentageMismatch';
    const CODE_INVALID_DOCUMENT_TYPE_FOR_REFUND = 'InvalidDocumentTypeForRefund';
    const CODE_REFUND_TYPE_AND_LINE_MISMATCH = 'RefundTypeAndLineMismatch';
    const CODE_REFUND_LINES_REQUIRED = 'RefundLinesRequired';
    const CODE_INVALID_REFUND_TYPE = 'InvalidRefundType';
    const CODE_REFUND_PERCENTAGE_FOR_TAX_ONLY = 'RefundPercentageForTaxOnly';
    const CODE_LINE_NO_OUT_OF_RANGE = 'LineNoOutOfRange';
    const CODE_REFUND_PERCENTAGE_OUT_OF_RANGE = 'RefundPercentageOutOfRange';
    const CODE_REFUND_PERCENTAGE_MISSING = 'RefundPercentageMissing';
    const CODE_MUST_USE_CREATE_TRANSACTION = 'MustUseCreateTransaction';
    const CODE_MUST_ACCEPT_TERMS_AND_CONDITIONS = 'MustAcceptTermsAndConditions';
    const CODE_FILING_CALENDAR_CANNOT_BE_DELETED = 'FilingCalendarCannotBeDeleted';
    const CODE_INVALID_EFFECTIVE_DATE = 'InvalidEffectiveDate';
    const CODE_NON_OUTLET_FORM = 'NonOutletForm';
    const CODE_OVERLAPPING_FILING_CALENDAR = 'OverlappingFilingCalendar';
    const CODE_FILING_CALENDAR_CANNOT_BE_EDITED = 'FilingCalendarCannotBeEdited';
    const CODE_CANNOT_MODIFY_LOCKED_TRANSACTION = 'CannotModifyLockedTransaction';
    const CODE_LINE_ALREADY_EXISTS = 'LineAlreadyExists';
    const CODE_LINE_DOES_NOT_EXIST = 'LineDoesNotExist';
    const CODE_LINES_NOT_SPECIFIED = 'LinesNotSpecified';
    const CODE_LINE_DETAILS_DOES_NOT_EXIST = 'LineDetailsDoesNotExist';
    const CODE_CANNOT_CREATE_TRANSACTION_WITH_DELETED_DATA_SOURCE = 'CannotCreateTransactionWithDeletedDataSource';
    const CODE_SHIP_TO_REGION_REQUIRED_WITH_DATA_SOURCE = 'ShipToRegionRequiredWithDataSource';
    const CODE_INVALID_BUSINESS_TYPE = 'InvalidBusinessType';
    const CODE_CANNOT_MODIFY_EXEMPT_CERT = 'CannotModifyExemptCert';
    const CODE_CERTIFICATES_ERROR = 'CertificatesError';
    const CODE_MISSING_REQUIRED_FIELDS = 'MissingRequiredFields';
    const CODE_CERTIFICATES_NOT_SETUP = 'CertificatesNotSetup';
    const CODE_CONFLICTING_EXPOSURE_ZONE = 'ConflictingExposureZone';
    const CODE_MISSING_FIELD_TO_CREATE_EXPOSURE_ZONE = 'MissingFieldToCreateExposureZone';
    const CODE_MISSING_EXEMPT_REASON = 'MissingExemptReason';
    const CODE_INVALID_EXEMPT_REASON = 'InvalidExemptReason';
    const CODE_INVALID_EXEMPTION_OPERATION = 'InvalidExemptionOperation';
    const CODE_CONFLICTING_FIELDS = 'ConflictingFields';
    const CODE_INVALID_PDF_OR_IMAGE_FILE = 'InvalidPdfOrImageFile';
    const CODE_INVALID_COVER_LETTER_TITLE = 'InvalidCoverLetterTitle';
    const CODE_ACCOUNT_NOT_PROVISIONED = 'AccountNotProvisioned';
    const CODE_INVALID_REQUEST_CONTENT_TYPE = 'InvalidRequestContentType';
    const CODE_EXEMPTION_PAGINATION_LIMITS = 'ExemptionPaginationLimits';
    const CODE_EXEMPTION_SORT_LIMITS = 'ExemptionSortLimits';
    const CODE_CUSTOMER_CANT_BE_BOTH_SHIP_TO_AND_BILL_TO = 'CustomerCantBeBothShipToAndBillTo';
    const CODE_BILL_TO_CUSTOMER_EXPECTED = 'BillToCustomerExpected';
    const CODE_SHIP_TO_CUSTOMER_EXPECTED = 'ShipToCustomerExpected';
    const CODE_ECMS_SST_CERTS_REQUIRED = 'EcmsSstCertsRequired';
    const CODE_TRANSACTION_NOT_CANCELLED = 'TransactionNotCancelled';
    const CODE_TOO_MANY_TRANSACTIONS = 'TooManyTransactions';
    const CODE_ONLY_TAX_DATE_OVERRIDE_IS_ALLOWED = 'OnlyTaxDateOverrideIsAllowed';
    const CODE_TRANSACTION_ALREADY_EXISTS = 'TransactionAlreadyExists';
    const CODE_DATE_MISMATCH = 'DateMismatch';
    const CODE_INVALID_DOCUMENT_STATUS_FOR_VERIFY = 'InvalidDocumentStatusForVerify';
    const CODE_TOTAL_AMOUNT_MISMATCH = 'TotalAmountMismatch';
    const CODE_TOTAL_TAX_MISMATCH = 'TotalTaxMismatch';
    const CODE_INVALID_DOCUMENT_TYPE = 'InvalidDocumentType';
    const CODE_MULTI_DOCUMENT_PARTIALLY_LOCKED = 'MultiDocumentPartiallyLocked';
    const CODE_TRANSACTION_IS_COMMITTED = 'TransactionIsCommitted';
    const CODE_INVALID_DOCUMENT_STATUS = 'InvalidDocumentStatus';
    const CODE_COMMS_CONFIG_CLIENT_ID_MISSING = 'CommsConfigClientIdMissing';
    const CODE_COMMS_CONFIG_CLIENT_ID_BAD_VALUE = 'CommsConfigClientIdBadValue';
    const CODE_ACCOUNT_IN_NEW_STATUS_EXCEPTION = 'AccountInNewStatusException';
    const CODE_WORKSHEET_EXCEPTION = 'WorksheetException';
    const CODE_INVALID_ACCOUNT_OVERRIDE = 'InvalidAccountOverride';
    const CODE_ACCOUNT_OVERRIDE_NOT_AUTHORIZED = 'AccountOverrideNotAuthorized';
    const CODE_FIELD_NOT_QUERYABLE_ERROR = 'FieldNotQueryableError';
    const CODE_USERNAME_REQUIRED = 'UsernameRequired';
    const CODE_INVALID_AUDIT_MESSAGE = 'InvalidAuditMessage';
    const CODE_FIELD_NOT_ORDERABLE_ERROR = 'FieldNotOrderableError';
    const CODE_CANNOT_DELETE_PARENT_BEFORE_CHILD_NEXUS = 'CannotDeleteParentBeforeChildNexus';
    const CODE_NEXUS_CHILD_DATE_MISMATCH = 'NexusChildDateMismatch';
    const CODE_REMOTE_VALIDATION_ERROR = 'RemoteValidationError';
    const CODE_CANNOT_MODIFY_SST_NEXUS = 'CannotModifySstNexus';
    const CODE_INVALID_LOCAL_NEXUS_TYPE_ID = 'InvalidLocalNexusTypeId';
    const CODE_ADVANCED_RULE_REQUEST_RULE_ERROR = 'AdvancedRuleRequestRuleError';
    const CODE_ADVANCED_RULE_RESPONSE_RULE_ERROR = 'AdvancedRuleResponseRuleError';
    const CODE_ADVANCED_RULE_ERROR = 'AdvancedRuleError';
    const CODE_TAX_RULE_REQUIRES_NEXUS = 'TaxRuleRequiresNexus';
    const CODE_UPC_CODE_NOT_UNIQUE = 'UPCCodeNotUnique';
    const CODE_TAX_CODE_ASSOCIATED_WITH_ITEM_CODE_NOT_FOUND = 'TaxCodeAssociatedWithItemCodeNotFound';
    const CODE_DUPLICATE_SYSTEM_FOR_ITEM = 'DuplicateSystemForItem';
    const CODE_CANNOT_DISMISS_GLOBAL_NOTIFICATION = 'CannotDismissGlobalNotification';
    const CODE_CANNOT_UPDATE_ACCOUNT_TYPE_ID = 'CannotUpdateAccountTypeId';
    const CODE_TAXPAYER_NUMBER_IS_REQUIRED = 'TaxpayerNumberIsRequired';
    const CODE_REQUEST_LIMIT_EXCEEDED = 'RequestLimitExceeded';
    const CODE_CONCURRENT_REQUEST_LIMIT_EXCEEDED = 'ConcurrentRequestLimitExceeded';
    const CODE_INVALID_DOCUMENT_TYPE_FOR_INSPECT = 'InvalidDocumentTypeForInspect';
    const CODE_SERVICE_NOT_READY = 'ServiceNotReady';
    const CODE_UPDATE_LOCATION_REMITTANCE_MISMATCH_TYPE_AND_CATEGORY = 'UpdateLocationRemittanceMismatchTypeAndCategory';
    const CODE_UPDATE_LOCATION_REMITTANCE_CHECK_EXISTING_EFFECTIVE_DATE_ERROR = 'UpdateLocationRemittanceCheckExistingEffectiveDateError';
    const CODE_UPDATE_LOCATION_REMITTANCE_CHECK_EXISTING_END_DATE_ERROR = 'UpdateLocationRemittanceCheckExistingEndDateError';
    const CODE_ERROR_COUNT_LIMIT_EXCEEDED_ERROR = 'ErrorCountLimitExceededError';
    const CODE_RATE_LIMIT_EXCEEDED_ERROR = 'RateLimitExceededError';
    const CODE_UNSUPPORTED_FILE_FORMAT = 'UnsupportedFileFormat';
    const CODE_UNSUPPORTED_OUTPUT_FILE_TYPE = 'UnsupportedOutputFileType';
    const CODE_TAX_PROFILE_NOT_PROVIDED = 'TaxProfileNotProvided';
    const CODE_INVALID_TAX_PROFILE = 'InvalidTaxProfile';
    const CODE_COMPANY_TAX_PROFILE_ENTRY_REQUIRED = 'CompanyTaxProfileEntryRequired';
    const CODE_ERROR_READING_TAX_PROFILE_ENTRY = 'ErrorReadingTaxProfileEntry';
    const CODE_TRACE_DATA_NOT_AVAILABLE = 'TraceDataNotAvailable';
    const CODE_INVALID_PARAMETER_UNIT_MEASUREMENT_TYPE = 'InvalidParameterUnitMeasurementType';
    const CODE_PARAMETER_UNIT_REQUIRED = 'ParameterUnitRequired';
    const CODE_INVALID_PARAMETER_VALUE_DATA_TYPE = 'InvalidParameterValueDataType';
    const CODE_INVALID_PARAMETER_ATTRIBUTE_TYPE = 'InvalidParameterAttributeType';
    const CODE_SUBSCRIPTION_REQUIRED_FOR_PARAMETER = 'SubscriptionRequiredForParameter';
    const CODE_INVALID_ACCOUNT_TYPE = 'InvalidAccountType';
    const CODE_INVALID_FIRM_SUBSCRIPTIONS = 'InvalidFirmSubscriptions';
    const CODE_GENERIC_TAX_CODE_FOR_ITEM = 'GenericTaxCodeForItem';
    const CODE_CANNOT_CERTIFY_COMPANY = 'CannotCertifyCompany';
    const CODE_NO_VOIDED_DOCUMENTS = 'NoVoidedDocuments';
    const CODE_INADEQUATE_COMMITTED_DOCUMENTS = 'InadequateCommittedDocuments';
    const CODE_DOCUMENT_CODE_IS_GUID = 'DocumentCodeIsGuid';
    const CODE_CUSTOMER_VENDOR_CODE_IS_GUID = 'CustomerVendorCodeIsGuid';
    const CODE_INADEQUATE_DOCUMENT_LINE_COUNT = 'InadequateDocumentLineCount';
    const CODE_SAME_DOCUMENT_DESCRIPTION = 'SameDocumentDescription';
    const CODE_NO_EXEMPTION_NO_OR_CUSTOMER_USAGE_TYPE = 'NoExemptionNoOrCustomerUsageType';
    const CODE_INADEQUATE_UNIQUE_ADDRESSES = 'InadequateUniqueAddresses';
    const CODE_ITEM_CODES_ARE_ALL_SAME = 'ItemCodesAreAllSame';
    const CODE_TAX_CODES_ARE_ALL_SAME = 'TaxCodesAreAllSame';
    const CODE_LOCATION_CODE_NOT_USED = 'LocationCodeNotUsed';
    const CODE_REPEATED_LINES_IN_DOCUMENT = 'RepeatedLinesInDocument';
    const CODE_TAX_DATE_OVERRIDE_AND_NEGATIVE_LINE_AMOUNT = 'TaxDateOverrideAndNegativeLineAmount';
    const CODE_ALL_USD_CURRENCY_CODES = 'AllUSDCurrencyCodes';
    const CODE_NO_VAT_BUYER_ID = 'NoVATBuyerId';
    const CODE_ALL_US_COUNTRY_CODES = 'AllUSCountryCodes';
    const CODE_NO_DOCUMENTS_TO_TEST = 'NoDocumentsToTest';
    const CODE_NO_SHIPPING_CHARGE = 'NoShippingCharge';
    const CODE_FAILED_TO_UPDATE_COMPANY_LOCATION = 'FailedToUpdateCompanyLocation';
    const CODE_COMPANY_LOCATION_DATE_RANGE_OVERLAP = 'CompanyLocationDateRangeOverlap';
    const CODE_FIELD_LENGTH_ERROR = 'FieldLengthError';
    const CODE_INPUT_CONTAINS_BLACKLISTED_CHARACTERS = 'InputContainsBlacklistedCharacters';
    const CODE_CANNOT_CREATE_NESTED_OBJECTS = 'CannotCreateNestedObjects';
    const CODE_BATCH_TRANSACTION_TYPE_ERROR = 'BatchTransactionTypeError';
    const CODE_BATCH_TRANSACTION_LINE_LIMIT_EXCEEDED = 'BatchTransactionLineLimitExceeded';
    const CODE_BATCH_COMPANY_ID_AND_COMPANY_CODE_MISMATCH = 'BatchCompanyIdAndCompanyCodeMismatch';
    const CODE_BATCH_CANNOT_BE_CANCELLED_STATUS_ERROR = 'BatchCannotBeCancelledStatusError';
    const CODE_BATCH_CANNOT_BE_CANCELLED_FORMAT_ERROR = 'BatchCannotBeCancelledFormatError';
    const CODE_INVALID_PARAMETER_DATA_TYPE = 'InvalidParameterDataType';
    const SEVERITY_SUCCESS = 'Success';
    const SEVERITY_WARNING = 'Warning';
    const SEVERITY_ERROR = 'Error';
    const SEVERITY_EXCEPTION = 'Exception';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_SERVER_CONFIGURATION,
            self::CODE_ACCOUNT_INVALID_EXCEPTION,
            self::CODE_COMPANY_INVALID_EXCEPTION,
            self::CODE_ENTITY_NOT_FOUND_ERROR,
            self::CODE_VALUE_REQUIRED_ERROR,
            self::CODE_RANGE_ERROR,
            self::CODE_RANGE_COMPARE_ERROR,
            self::CODE_RANGE_SET_ERROR,
            self::CODE_TAXPAYER_NUMBER_REQUIRED,
            self::CODE_ENTITY_LIMIT_EXCEEDED,
            self::CODE_COMMON_PASSWORD,
            self::CODE_WEAK_PASSWORD,
            self::CODE_STRING_LENGTH_ERROR,
            self::CODE_MAX_STRING_LENGTH_ERROR,
            self::CODE_EMAIL_VALIDATION_ERROR,
            self::CODE_EMAIL_MISSING_ERROR,
            self::CODE_INVALID_QUERY_FIELD,
            self::CODE_INVALID_QUERY_VALUE,
            self::CODE_SYNTAX_ERROR,
            self::CODE_TOO_MANY_PARAMETERS_ERROR,
            self::CODE_UNTERMINATED_VALUE_ERROR,
            self::CODE_DELETE_USER_SELF_ERROR,
            self::CODE_OLD_PASSWORD_INVALID,
            self::CODE_CANNOT_CHANGE_PASSWORD,
            self::CODE_READ_ONLY,
            self::CODE_DATE_FORMAT_ERROR,
            self::CODE_NO_DEFAULT_COMPANY,
            self::CODE_ACCOUNT_TYPE_NOT_SUPPORTED,
            self::CODE_AUTHENTICATION_EXCEPTION,
            self::CODE_AUTHORIZATION_EXCEPTION,
            self::CODE_VALIDATION_EXCEPTION,
            self::CODE_INACTIVE_USER_ERROR,
            self::CODE_AUTHENTICATION_INCOMPLETE,
            self::CODE_BASIC_AUTH_INCORRECT,
            self::CODE_IDENTITY_SERVER_ERROR,
            self::CODE_BEARER_TOKEN_INVALID,
            self::CODE_MODEL_REQUIRED_EXCEPTION,
            self::CODE_ACCOUNT_EXPIRED_EXCEPTION,
            self::CODE_BEARER_TOKEN_NOT_SUPPORTED,
            self::CODE_INVALID_SECURITY_ROLE,
            self::CODE_INVALID_REGISTRAR_ACTION,
            self::CODE_REMOTE_SERVER_ERROR,
            self::CODE_NO_FILTER_CRITERIA_EXCEPTION,
            self::CODE_OPEN_CLAUSE_EXCEPTION,
            self::CODE_JSON_FORMAT_ERROR,
            self::CODE_INVALID_DECIMAL_VALUE,
            self::CODE_PERMISSION_REQUIRED,
            self::CODE_UNHANDLED_EXCEPTION,
            self::CODE_INACTIVE_ACCOUNT,
            self::CODE_LINKAGE_NOT_ALLOWED,
            self::CODE_LINKAGE_STATUS_UPDATE_NOT_SUPPORTED,
            self::CODE_REPORTING_COMPANY_MUST_HAVE_CONTACTS_ERROR,
            self::CODE_COMPANY_PROFILE_NOT_SET,
            self::CODE_CANNOT_ASSIGN_USER_TO_COMPANY,
            self::CODE_MUST_ASSIGN_USER_TO_COMPANY,
            self::CODE_INVALID_TAX_TYPE_MAPPING,
            self::CODE_MODEL_STATE_INVALID,
            self::CODE_DATE_RANGE_ERROR,
            self::CODE_INVALID_DATE_RANGE_ERROR,
            self::CODE_RULE_MUST_HAVE_TAX_CODE,
            self::CODE_RULE_TYPE_RESTRICTED,
            self::CODE_INVALID_COMPANY_LOCATION_SETTING,
            self::CODE_INVALID_ADJUSTMENT_TYPE,
            self::CODE_DELETE_INFORMATION,
            self::CODE_OUT_OF_RANGE,
            self::CODE_UNSPECIFIED_TIME_ZONE,
            self::CODE_CANNOT_CREATE_DELETED_OBJECTS,
            self::CODE_CANNOT_MODIFY_DELETED_OBJECTS,
            self::CODE_RETURN_NAME_NOT_FOUND,
            self::CODE_INVALID_ADDRESS_TYPE_AND_CATEGORY,
            self::CODE_DEFAULT_COMPANY_LOCATION,
            self::CODE_INVALID_COUNTRY,
            self::CODE_INVALID_COUNTRY_REGION,
            self::CODE_BRAZIL_VALIDATION_ERROR,
            self::CODE_BRAZIL_EXEMPT_VALIDATION_ERROR,
            self::CODE_BRAZIL_PIS_COFINS_ERROR,
            self::CODE_JURISDICTION_NOT_FOUND_ERROR,
            self::CODE_MEDICAL_EXCISE_ERROR,
            self::CODE_RATE_DEPENDS_TAXABILITY_ERROR,
            self::CODE_INVALID_RATE_TYPE_CODE,
            self::CODE_RATE_TYPE_NOT_SUPPORTED,
            self::CODE_CANNOT_UPDATE_NESTED_OBJECTS,
            self::CODE_UPC_CODE_INVALID_CHARS,
            self::CODE_UPC_CODE_INVALID_LENGTH,
            self::CODE_INCORRECT_PATH_ERROR,
            self::CODE_INVALID_JURISDICTION_TYPE,
            self::CODE_MUST_CONFIRM_RESET_LICENSE_KEY,
            self::CODE_DUPLICATE_COMPANY_CODE,
            self::CODE_TIN_FORMAT_ERROR,
            self::CODE_DUPLICATE_NEXUS_ERROR,
            self::CODE_UNKNOWN_NEXUS_ERROR,
            self::CODE_PARENT_NEXUS_NOT_FOUND,
            self::CODE_INVALID_TAX_CODE_TYPE,
            self::CODE_CANNOT_ACTIVATE_COMPANY,
            self::CODE_DUPLICATE_ENTITY_PROPERTY,
            self::CODE_REPORTING_ENTITY_ERROR,
            self::CODE_INVALID_RETURN_OPERATION_ERROR,
            self::CODE_CANNOT_DELETE_COMPANY,
            self::CODE_COUNTRY_OVERRIDES_NOT_AVAILABLE,
            self::CODE_JURISDICTION_OVERRIDE_MISMATCH,
            self::CODE_DUPLICATE_SYSTEM_TAX_CODE,
            self::CODE_NEXUS_DATE_MISMATCH,
            self::CODE_NEXUS_PARENT_DATE_MISMATCH,
            self::CODE_BEARER_TOKEN_PARSE_USER_ID_ERROR,
            self::CODE_RETRIEVE_USER_ERROR,
            self::CODE_INVALID_CONFIGURATION_SETTING,
            self::CODE_INVALID_CONFIGURATION_VALUE,
            self::CODE_INVALID_ENUM_VALUE,
            self::CODE_TAX_CODE_ASSOCIATED_TAX_RULE,
            self::CODE_CANNOT_SWITCH_ACCOUNT_ID,
            self::CODE_REQUEST_INCOMPLETE,
            self::CODE_ACCOUNT_NOT_NEW,
            self::CODE_PASSWORD_LENGTH_INVALID,
            self::CODE_INVALID_PAGE_KEY,
            self::CODE_INVALID_ECMS_OVERRIDE_CODE,
            self::CODE_ACCOUNT_DOES_NOT_EXIST,
            self::CODE_INVALID_TAX_TYPE,
            self::CODE_INCORRECT_FIELD_VALUE,
            self::CODE_LEADING_OR_TRAILING_EXCEPTION,
            self::CODE_NOT_ENOUGH_ADDRESSES_INFO,
            self::CODE_REPORT_NOT_INITIATED,
            self::CODE_FAILED_TO_BUILD_REPORT,
            self::CODE_REPORT_NOT_FINISHED,
            self::CODE_FAILED_TO_DOWNLOAD_REPORT,
            self::CODE_MALFORMED_FILTER_EXCEPTION,
            self::CODE_EXPECTED_CONJUNCTION_ERROR,
            self::CODE_CRITERIA_NOT_SUPPORTED_ERROR,
            self::CODE_COMPANY_ACCOUNT_AND_PARENT_ACCOUNT_MISMATCH,
            self::CODE_INVALID_FILE_CONTENT_TYPE,
            self::CODE_REQUEST_TOO_LARGE,
            self::CODE_ECMS_DISABLED,
            self::CODE_UNKNOWN_CONJUNCTION_ERROR,
            self::CODE_NO_LINES_DISCOUNTED,
            self::CODE_FAILED_TO_DELETE,
            self::CODE_CIRCULAR_COMPANY_HIERARCHIES,
            self::CODE_DUPLICATE_ENTRY,
            self::CODE_DUPLICATE_FIELD_NAME_IN_ORDER_BY,
            self::CODE_CANNOT_ADJUST_DOCUMENT_TYPE,
            self::CODE_USER_NO_ACCESS,
            self::CODE_INVALID_ENTRY,
            self::CODE_TRANSACTION_ALREADY_CANCELLED,
            self::CODE_QUERY_PARAMETER_OUT_OF_RANGE,
            self::CODE_BATCH_SALES_AUDIT_MUST_BE_ZIPPED_ERROR,
            self::CODE_BATCH_ZIP_MUST_CONTAIN_ONE_FILE_ERROR,
            self::CODE_BATCH_INVALID_FILE_TYPE_ERROR,
            self::CODE_BATCH_CANNOT_SAVE_BATCH_FILE,
            self::CODE_BATCH_CANNOT_GET_BATCH_FILE,
            self::CODE_BATCH_CANNOT_DELETE_BATCH_FILE,
            self::CODE_BATCH_MUST_CONTAIN_ONE_FILE,
            self::CODE_MISSING_BATCH_FILE_CONTENT,
            self::CODE_BATCH_CANNOT_BE_DELETED_WHILE_PROCESSING,
            self::CODE_INTERNAL_SERVER_ERROR,
            self::CODE_POINT_OF_SALE_FILE_SIZE,
            self::CODE_POINT_OF_SALE_SETUP,
            self::CODE_INVALID_INPUT_DATE,
            self::CODE_GET_TAX_ERROR,
            self::CODE_ADDRESS_CONFLICT_EXCEPTION,
            self::CODE_DOCUMENT_CODE_CONFLICT,
            self::CODE_MISSING_ADDRESS,
            self::CODE_INVALID_PARAMETER_VALUE,
            self::CODE_FETCH_LIMIT,
            self::CODE_INVALID_ADDRESS,
            self::CODE_ADDRESS_LOCATION_NOT_FOUND,
            self::CODE_MISSING_LINE,
            self::CODE_INVALID_ADDRESS_TEXT_CASE,
            self::CODE_DOCUMENT_NOT_COMMITTED,
            self::CODE_INVALID_DOCUMENT_TYPES_TO_FETCH,
            self::CODE_TIMEOUT_REQUESTED,
            self::CODE_INVALID_POSTAL_CODE,
            self::CODE_INVALID_SUBSCRIPTION_DESCRIPTION,
            self::CODE_INVALID_SUBSCRIPTION_TYPE_ID,
            self::CODE_CANNOT_CHANGE_FILING_STATUS,
            self::CODE_FEIN_FORMAT_ERROR,
            self::CODE_SERVER_UNREACHABLE,
            self::CODE_SUBSCRIPTION_REQUIRED,
            self::CODE_ACCOUNT_EXISTS,
            self::CODE_INVITATION_ONLY,
            self::CODE_FREE_TRIAL_NOT_AVAILABLE,
            self::CODE_ACCOUNT_EXISTS_DIFFERENT_EMAIL,
            self::CODE_AVALARA_IDENTITY_API_ERROR,
            self::CODE_INVALID_IP_ADDRESS,
            self::CODE_OFFER_CODE_ALREADY_APPLIED,
            self::CODE_ACCOUNT_ALREADY_EXISTS,
            self::CODE_LICENSE_KEY_NAME_ALREADY_EXISTS_FOR_ACCOUNT,
            self::CODE_REFUND_TYPE_AND_PERCENTAGE_MISMATCH,
            self::CODE_INVALID_DOCUMENT_TYPE_FOR_REFUND,
            self::CODE_REFUND_TYPE_AND_LINE_MISMATCH,
            self::CODE_REFUND_LINES_REQUIRED,
            self::CODE_INVALID_REFUND_TYPE,
            self::CODE_REFUND_PERCENTAGE_FOR_TAX_ONLY,
            self::CODE_LINE_NO_OUT_OF_RANGE,
            self::CODE_REFUND_PERCENTAGE_OUT_OF_RANGE,
            self::CODE_REFUND_PERCENTAGE_MISSING,
            self::CODE_MUST_USE_CREATE_TRANSACTION,
            self::CODE_MUST_ACCEPT_TERMS_AND_CONDITIONS,
            self::CODE_FILING_CALENDAR_CANNOT_BE_DELETED,
            self::CODE_INVALID_EFFECTIVE_DATE,
            self::CODE_NON_OUTLET_FORM,
            self::CODE_OVERLAPPING_FILING_CALENDAR,
            self::CODE_FILING_CALENDAR_CANNOT_BE_EDITED,
            self::CODE_CANNOT_MODIFY_LOCKED_TRANSACTION,
            self::CODE_LINE_ALREADY_EXISTS,
            self::CODE_LINE_DOES_NOT_EXIST,
            self::CODE_LINES_NOT_SPECIFIED,
            self::CODE_LINE_DETAILS_DOES_NOT_EXIST,
            self::CODE_CANNOT_CREATE_TRANSACTION_WITH_DELETED_DATA_SOURCE,
            self::CODE_SHIP_TO_REGION_REQUIRED_WITH_DATA_SOURCE,
            self::CODE_INVALID_BUSINESS_TYPE,
            self::CODE_CANNOT_MODIFY_EXEMPT_CERT,
            self::CODE_CERTIFICATES_ERROR,
            self::CODE_MISSING_REQUIRED_FIELDS,
            self::CODE_CERTIFICATES_NOT_SETUP,
            self::CODE_CONFLICTING_EXPOSURE_ZONE,
            self::CODE_MISSING_FIELD_TO_CREATE_EXPOSURE_ZONE,
            self::CODE_MISSING_EXEMPT_REASON,
            self::CODE_INVALID_EXEMPT_REASON,
            self::CODE_INVALID_EXEMPTION_OPERATION,
            self::CODE_CONFLICTING_FIELDS,
            self::CODE_INVALID_PDF_OR_IMAGE_FILE,
            self::CODE_INVALID_COVER_LETTER_TITLE,
            self::CODE_ACCOUNT_NOT_PROVISIONED,
            self::CODE_INVALID_REQUEST_CONTENT_TYPE,
            self::CODE_EXEMPTION_PAGINATION_LIMITS,
            self::CODE_EXEMPTION_SORT_LIMITS,
            self::CODE_CUSTOMER_CANT_BE_BOTH_SHIP_TO_AND_BILL_TO,
            self::CODE_BILL_TO_CUSTOMER_EXPECTED,
            self::CODE_SHIP_TO_CUSTOMER_EXPECTED,
            self::CODE_ECMS_SST_CERTS_REQUIRED,
            self::CODE_TRANSACTION_NOT_CANCELLED,
            self::CODE_TOO_MANY_TRANSACTIONS,
            self::CODE_ONLY_TAX_DATE_OVERRIDE_IS_ALLOWED,
            self::CODE_TRANSACTION_ALREADY_EXISTS,
            self::CODE_DATE_MISMATCH,
            self::CODE_INVALID_DOCUMENT_STATUS_FOR_VERIFY,
            self::CODE_TOTAL_AMOUNT_MISMATCH,
            self::CODE_TOTAL_TAX_MISMATCH,
            self::CODE_INVALID_DOCUMENT_TYPE,
            self::CODE_MULTI_DOCUMENT_PARTIALLY_LOCKED,
            self::CODE_TRANSACTION_IS_COMMITTED,
            self::CODE_INVALID_DOCUMENT_STATUS,
            self::CODE_COMMS_CONFIG_CLIENT_ID_MISSING,
            self::CODE_COMMS_CONFIG_CLIENT_ID_BAD_VALUE,
            self::CODE_ACCOUNT_IN_NEW_STATUS_EXCEPTION,
            self::CODE_WORKSHEET_EXCEPTION,
            self::CODE_INVALID_ACCOUNT_OVERRIDE,
            self::CODE_ACCOUNT_OVERRIDE_NOT_AUTHORIZED,
            self::CODE_FIELD_NOT_QUERYABLE_ERROR,
            self::CODE_USERNAME_REQUIRED,
            self::CODE_INVALID_AUDIT_MESSAGE,
            self::CODE_FIELD_NOT_ORDERABLE_ERROR,
            self::CODE_CANNOT_DELETE_PARENT_BEFORE_CHILD_NEXUS,
            self::CODE_NEXUS_CHILD_DATE_MISMATCH,
            self::CODE_REMOTE_VALIDATION_ERROR,
            self::CODE_CANNOT_MODIFY_SST_NEXUS,
            self::CODE_INVALID_LOCAL_NEXUS_TYPE_ID,
            self::CODE_ADVANCED_RULE_REQUEST_RULE_ERROR,
            self::CODE_ADVANCED_RULE_RESPONSE_RULE_ERROR,
            self::CODE_ADVANCED_RULE_ERROR,
            self::CODE_TAX_RULE_REQUIRES_NEXUS,
            self::CODE_UPC_CODE_NOT_UNIQUE,
            self::CODE_TAX_CODE_ASSOCIATED_WITH_ITEM_CODE_NOT_FOUND,
            self::CODE_DUPLICATE_SYSTEM_FOR_ITEM,
            self::CODE_CANNOT_DISMISS_GLOBAL_NOTIFICATION,
            self::CODE_CANNOT_UPDATE_ACCOUNT_TYPE_ID,
            self::CODE_TAXPAYER_NUMBER_IS_REQUIRED,
            self::CODE_REQUEST_LIMIT_EXCEEDED,
            self::CODE_CONCURRENT_REQUEST_LIMIT_EXCEEDED,
            self::CODE_INVALID_DOCUMENT_TYPE_FOR_INSPECT,
            self::CODE_SERVICE_NOT_READY,
            self::CODE_UPDATE_LOCATION_REMITTANCE_MISMATCH_TYPE_AND_CATEGORY,
            self::CODE_UPDATE_LOCATION_REMITTANCE_CHECK_EXISTING_EFFECTIVE_DATE_ERROR,
            self::CODE_UPDATE_LOCATION_REMITTANCE_CHECK_EXISTING_END_DATE_ERROR,
            self::CODE_ERROR_COUNT_LIMIT_EXCEEDED_ERROR,
            self::CODE_RATE_LIMIT_EXCEEDED_ERROR,
            self::CODE_UNSUPPORTED_FILE_FORMAT,
            self::CODE_UNSUPPORTED_OUTPUT_FILE_TYPE,
            self::CODE_TAX_PROFILE_NOT_PROVIDED,
            self::CODE_INVALID_TAX_PROFILE,
            self::CODE_COMPANY_TAX_PROFILE_ENTRY_REQUIRED,
            self::CODE_ERROR_READING_TAX_PROFILE_ENTRY,
            self::CODE_TRACE_DATA_NOT_AVAILABLE,
            self::CODE_INVALID_PARAMETER_UNIT_MEASUREMENT_TYPE,
            self::CODE_PARAMETER_UNIT_REQUIRED,
            self::CODE_INVALID_PARAMETER_VALUE_DATA_TYPE,
            self::CODE_INVALID_PARAMETER_ATTRIBUTE_TYPE,
            self::CODE_SUBSCRIPTION_REQUIRED_FOR_PARAMETER,
            self::CODE_INVALID_ACCOUNT_TYPE,
            self::CODE_INVALID_FIRM_SUBSCRIPTIONS,
            self::CODE_GENERIC_TAX_CODE_FOR_ITEM,
            self::CODE_CANNOT_CERTIFY_COMPANY,
            self::CODE_NO_VOIDED_DOCUMENTS,
            self::CODE_INADEQUATE_COMMITTED_DOCUMENTS,
            self::CODE_DOCUMENT_CODE_IS_GUID,
            self::CODE_CUSTOMER_VENDOR_CODE_IS_GUID,
            self::CODE_INADEQUATE_DOCUMENT_LINE_COUNT,
            self::CODE_SAME_DOCUMENT_DESCRIPTION,
            self::CODE_NO_EXEMPTION_NO_OR_CUSTOMER_USAGE_TYPE,
            self::CODE_INADEQUATE_UNIQUE_ADDRESSES,
            self::CODE_ITEM_CODES_ARE_ALL_SAME,
            self::CODE_TAX_CODES_ARE_ALL_SAME,
            self::CODE_LOCATION_CODE_NOT_USED,
            self::CODE_REPEATED_LINES_IN_DOCUMENT,
            self::CODE_TAX_DATE_OVERRIDE_AND_NEGATIVE_LINE_AMOUNT,
            self::CODE_ALL_USD_CURRENCY_CODES,
            self::CODE_NO_VAT_BUYER_ID,
            self::CODE_ALL_US_COUNTRY_CODES,
            self::CODE_NO_DOCUMENTS_TO_TEST,
            self::CODE_NO_SHIPPING_CHARGE,
            self::CODE_FAILED_TO_UPDATE_COMPANY_LOCATION,
            self::CODE_COMPANY_LOCATION_DATE_RANGE_OVERLAP,
            self::CODE_FIELD_LENGTH_ERROR,
            self::CODE_INPUT_CONTAINS_BLACKLISTED_CHARACTERS,
            self::CODE_CANNOT_CREATE_NESTED_OBJECTS,
            self::CODE_BATCH_TRANSACTION_TYPE_ERROR,
            self::CODE_BATCH_TRANSACTION_LINE_LIMIT_EXCEEDED,
            self::CODE_BATCH_COMPANY_ID_AND_COMPANY_CODE_MISMATCH,
            self::CODE_BATCH_CANNOT_BE_CANCELLED_STATUS_ERROR,
            self::CODE_BATCH_CANNOT_BE_CANCELLED_FORMAT_ERROR,
            self::CODE_INVALID_PARAMETER_DATA_TYPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSeverityAllowableValues()
    {
        return [
            self::SEVERITY_SUCCESS,
            self::SEVERITY_WARNING,
            self::SEVERITY_ERROR,
            self::SEVERITY_EXCEPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['fault_code'] = isset($data['fault_code']) ? $data['fault_code'] : null;
        $this->container['fault_sub_code'] = isset($data['fault_sub_code']) ? $data['fault_sub_code'] : null;
        $this->container['help_link'] = isset($data['help_link']) ? $data['help_link'] : null;
        $this->container['refers_to'] = isset($data['refers_to']) ? $data['refers_to'] : null;
        $this->container['severity'] = isset($data['severity']) ? $data['severity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($this->container['severity']) && !in_array($this->container['severity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'severity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Name of the error or message.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Unique ID number referring to this error or message.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Concise summary of the message, suitable for display in the caption of an alert box.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A more detailed description of the problem referenced by this error message, suitable for display in the contents area of an alert box.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fault_code
     *
     * @return string
     */
    public function getFaultCode()
    {
        return $this->container['fault_code'];
    }

    /**
     * Sets fault_code
     *
     * @param string $fault_code Indicates the SOAP Fault code, if this was related to an error that corresponded to AvaTax SOAP v1 behavior.
     *
     * @return $this
     */
    public function setFaultCode($fault_code)
    {
        $this->container['fault_code'] = $fault_code;

        return $this;
    }

    /**
     * Gets fault_sub_code
     *
     * @return string
     */
    public function getFaultSubCode()
    {
        return $this->container['fault_sub_code'];
    }

    /**
     * Sets fault_sub_code
     *
     * @param string $fault_sub_code If this is an error from a downstream system (such as Calc) faultSubCode can be used to represent the fault code from that system.
     *
     * @return $this
     */
    public function setFaultSubCode($fault_sub_code)
    {
        $this->container['fault_sub_code'] = $fault_sub_code;

        return $this;
    }

    /**
     * Gets help_link
     *
     * @return string
     */
    public function getHelpLink()
    {
        return $this->container['help_link'];
    }

    /**
     * Sets help_link
     *
     * @param string $help_link URL to help for this message
     *
     * @return $this
     */
    public function setHelpLink($help_link)
    {
        $this->container['help_link'] = $help_link;

        return $this;
    }

    /**
     * Gets refers_to
     *
     * @return string
     */
    public function getRefersTo()
    {
        return $this->container['refers_to'];
    }

    /**
     * Sets refers_to
     *
     * @param string $refers_to Item the message refers to, if applicable.  This is used to indicate a missing or incorrect value.
     *
     * @return $this
     */
    public function setRefersTo($refers_to)
    {
        $this->container['refers_to'] = $refers_to;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param string $severity Severity of the message
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $allowedValues = $this->getSeverityAllowableValues();
        if (!is_null($severity) && !in_array($severity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'severity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['severity'] = $severity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


