<?php
/**
 * UomModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * UomModel Class Doc Comment
 *
 * @category Class
 * @description The \&quot;Unit of Measurement\&quot; model captures information about a type of measurement.  Types of measurement refer to  different scales for the same dimension.  For example, measurements of type \&quot;Distance\&quot; may include units of measurement  such as meters, feet, inches, and miles.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UomModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UomModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'short_desc' => 'string',
        'description' => 'string',
        'measurement_type_id' => 'int',
        'measurement_type_code' => 'string',
        'si_uom' => 'string',
        'measurement_type_description' => 'string',
        'is_si_uom' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'code' => null,
        'short_desc' => null,
        'description' => null,
        'measurement_type_id' => 'int32',
        'measurement_type_code' => null,
        'si_uom' => null,
        'measurement_type_description' => null,
        'is_si_uom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'short_desc' => 'shortDesc',
        'description' => 'description',
        'measurement_type_id' => 'measurementTypeId',
        'measurement_type_code' => 'measurementTypeCode',
        'si_uom' => 'siUOM',
        'measurement_type_description' => 'measurementTypeDescription',
        'is_si_uom' => 'isSiUom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'short_desc' => 'setShortDesc',
        'description' => 'setDescription',
        'measurement_type_id' => 'setMeasurementTypeId',
        'measurement_type_code' => 'setMeasurementTypeCode',
        'si_uom' => 'setSiUom',
        'measurement_type_description' => 'setMeasurementTypeDescription',
        'is_si_uom' => 'setIsSiUom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'short_desc' => 'getShortDesc',
        'description' => 'getDescription',
        'measurement_type_id' => 'getMeasurementTypeId',
        'measurement_type_code' => 'getMeasurementTypeCode',
        'si_uom' => 'getSiUom',
        'measurement_type_description' => 'getMeasurementTypeDescription',
        'is_si_uom' => 'getIsSiUom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['short_desc'] = isset($data['short_desc']) ? $data['short_desc'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['measurement_type_id'] = isset($data['measurement_type_id']) ? $data['measurement_type_id'] : null;
        $this->container['measurement_type_code'] = isset($data['measurement_type_code']) ? $data['measurement_type_code'] : null;
        $this->container['si_uom'] = isset($data['si_uom']) ? $data['si_uom'] : null;
        $this->container['measurement_type_description'] = isset($data['measurement_type_description']) ? $data['measurement_type_description'] : null;
        $this->container['is_si_uom'] = isset($data['is_si_uom']) ? $data['is_si_uom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this unit of measurement.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The code that refers to this unit of measurement.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets short_desc
     *
     * @return string
     */
    public function getShortDesc()
    {
        return $this->container['short_desc'];
    }

    /**
     * Sets short_desc
     *
     * @param string $short_desc A short description of this unit of measurement.
     *
     * @return $this
     */
    public function setShortDesc($short_desc)
    {
        $this->container['short_desc'] = $short_desc;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A longer description of this unit of measurement.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets measurement_type_id
     *
     * @return int
     */
    public function getMeasurementTypeId()
    {
        return $this->container['measurement_type_id'];
    }

    /**
     * Sets measurement_type_id
     *
     * @param int $measurement_type_id The ID number of the measurement type, such as \"Distance\" or \"Mass\".
     *
     * @return $this
     */
    public function setMeasurementTypeId($measurement_type_id)
    {
        $this->container['measurement_type_id'] = $measurement_type_id;

        return $this;
    }

    /**
     * Gets measurement_type_code
     *
     * @return string
     */
    public function getMeasurementTypeCode()
    {
        return $this->container['measurement_type_code'];
    }

    /**
     * Sets measurement_type_code
     *
     * @param string $measurement_type_code The code describing the measurement type.
     *
     * @return $this
     */
    public function setMeasurementTypeCode($measurement_type_code)
    {
        $this->container['measurement_type_code'] = $measurement_type_code;

        return $this;
    }

    /**
     * Gets si_uom
     *
     * @return string
     */
    public function getSiUom()
    {
        return $this->container['si_uom'];
    }

    /**
     * Sets si_uom
     *
     * @param string $si_uom For a particular measurement type, this is the ID number of the unit of measurement object corresponding to the  International System of Units (abbreviated SI) unit of measurement standard.  This pointer allows you to select  the SI unit of measurement for a particular measurement type.
     *
     * @return $this
     */
    public function setSiUom($si_uom)
    {
        $this->container['si_uom'] = $si_uom;

        return $this;
    }

    /**
     * Gets measurement_type_description
     *
     * @return string
     */
    public function getMeasurementTypeDescription()
    {
        return $this->container['measurement_type_description'];
    }

    /**
     * Sets measurement_type_description
     *
     * @param string $measurement_type_description A description of the measurement type system.
     *
     * @return $this
     */
    public function setMeasurementTypeDescription($measurement_type_description)
    {
        $this->container['measurement_type_description'] = $measurement_type_description;

        return $this;
    }

    /**
     * Gets is_si_uom
     *
     * @return bool
     */
    public function getIsSiUom()
    {
        return $this->container['is_si_uom'];
    }

    /**
     * Sets is_si_uom
     *
     * @param bool $is_si_uom True if this measurement is an International System of Units (abbreviated SI) defined standard.
     *
     * @return $this
     */
    public function setIsSiUom($is_si_uom)
    {
        $this->container['is_si_uom'] = $is_si_uom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


