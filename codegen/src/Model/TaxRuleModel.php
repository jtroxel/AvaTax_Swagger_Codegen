<?php
/**
 * TaxRuleModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TaxRuleModel Class Doc Comment
 *
 * @category Class
 * @description Represents a tax rule that changes the behavior of Avalara&#39;s tax engine for certain products and/or entity use codes  in certain jurisdictions.                Avalara supports a few different types of tax rules.  For information about tax rule types, see  [TaxRuleTypeId](https://developer.avalara.com/api-reference/avatax/rest/v2/models/enums/TaxRuleTypeId/)                Because different types of tax rules have different behavior, some fields may change their behavior based on  the type of tax rule selected.  Please read the documentation for each field carefully and ensure that  the value you send is appropriate for the type of tax rule.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxRuleModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxRuleModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'tax_code_id' => 'int',
        'tax_code' => 'string',
        'state_fips' => 'string',
        'juris_name' => 'string',
        'juris_code' => 'string',
        'juris_type_id' => 'string',
        'jurisdiction_type_id' => 'string',
        'customer_usage_type' => 'string',
        'entity_use_code' => 'string',
        'tax_type_id' => 'string',
        'rate_type_id' => 'string',
        'rate_type_code' => 'string',
        'tax_rule_type_id' => 'string',
        'is_all_juris' => 'bool',
        'value' => 'double',
        'cap' => 'double',
        'threshold' => 'double',
        'options' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'description' => 'string',
        'county_fips' => 'string',
        'is_st_pro' => 'bool',
        'country' => 'string',
        'region' => 'string',
        'sourcing' => 'string',
        'tax_type_group' => 'string',
        'tax_sub_type' => 'string',
        'non_passthrough_expression' => 'string',
        'currency_code' => 'string',
        'preferred_program_id' => 'int',
        'uom_id' => 'int',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'tax_code_id' => 'int32',
        'tax_code' => null,
        'state_fips' => null,
        'juris_name' => null,
        'juris_code' => null,
        'juris_type_id' => null,
        'jurisdiction_type_id' => null,
        'customer_usage_type' => null,
        'entity_use_code' => null,
        'tax_type_id' => null,
        'rate_type_id' => null,
        'rate_type_code' => null,
        'tax_rule_type_id' => null,
        'is_all_juris' => null,
        'value' => 'double',
        'cap' => 'double',
        'threshold' => 'double',
        'options' => null,
        'effective_date' => 'date',
        'end_date' => 'date',
        'description' => null,
        'county_fips' => null,
        'is_st_pro' => null,
        'country' => null,
        'region' => null,
        'sourcing' => null,
        'tax_type_group' => null,
        'tax_sub_type' => null,
        'non_passthrough_expression' => null,
        'currency_code' => null,
        'preferred_program_id' => 'int32',
        'uom_id' => 'int32',
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'tax_code_id' => 'taxCodeId',
        'tax_code' => 'taxCode',
        'state_fips' => 'stateFIPS',
        'juris_name' => 'jurisName',
        'juris_code' => 'jurisCode',
        'juris_type_id' => 'jurisTypeId',
        'jurisdiction_type_id' => 'jurisdictionTypeId',
        'customer_usage_type' => 'customerUsageType',
        'entity_use_code' => 'entityUseCode',
        'tax_type_id' => 'taxTypeId',
        'rate_type_id' => 'rateTypeId',
        'rate_type_code' => 'rateTypeCode',
        'tax_rule_type_id' => 'taxRuleTypeId',
        'is_all_juris' => 'isAllJuris',
        'value' => 'value',
        'cap' => 'cap',
        'threshold' => 'threshold',
        'options' => 'options',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'description' => 'description',
        'county_fips' => 'countyFIPS',
        'is_st_pro' => 'isSTPro',
        'country' => 'country',
        'region' => 'region',
        'sourcing' => 'sourcing',
        'tax_type_group' => 'taxTypeGroup',
        'tax_sub_type' => 'taxSubType',
        'non_passthrough_expression' => 'nonPassthroughExpression',
        'currency_code' => 'currencyCode',
        'preferred_program_id' => 'preferredProgramId',
        'uom_id' => 'uomId',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'tax_code_id' => 'setTaxCodeId',
        'tax_code' => 'setTaxCode',
        'state_fips' => 'setStateFips',
        'juris_name' => 'setJurisName',
        'juris_code' => 'setJurisCode',
        'juris_type_id' => 'setJurisTypeId',
        'jurisdiction_type_id' => 'setJurisdictionTypeId',
        'customer_usage_type' => 'setCustomerUsageType',
        'entity_use_code' => 'setEntityUseCode',
        'tax_type_id' => 'setTaxTypeId',
        'rate_type_id' => 'setRateTypeId',
        'rate_type_code' => 'setRateTypeCode',
        'tax_rule_type_id' => 'setTaxRuleTypeId',
        'is_all_juris' => 'setIsAllJuris',
        'value' => 'setValue',
        'cap' => 'setCap',
        'threshold' => 'setThreshold',
        'options' => 'setOptions',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'description' => 'setDescription',
        'county_fips' => 'setCountyFips',
        'is_st_pro' => 'setIsStPro',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'sourcing' => 'setSourcing',
        'tax_type_group' => 'setTaxTypeGroup',
        'tax_sub_type' => 'setTaxSubType',
        'non_passthrough_expression' => 'setNonPassthroughExpression',
        'currency_code' => 'setCurrencyCode',
        'preferred_program_id' => 'setPreferredProgramId',
        'uom_id' => 'setUomId',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'tax_code_id' => 'getTaxCodeId',
        'tax_code' => 'getTaxCode',
        'state_fips' => 'getStateFips',
        'juris_name' => 'getJurisName',
        'juris_code' => 'getJurisCode',
        'juris_type_id' => 'getJurisTypeId',
        'jurisdiction_type_id' => 'getJurisdictionTypeId',
        'customer_usage_type' => 'getCustomerUsageType',
        'entity_use_code' => 'getEntityUseCode',
        'tax_type_id' => 'getTaxTypeId',
        'rate_type_id' => 'getRateTypeId',
        'rate_type_code' => 'getRateTypeCode',
        'tax_rule_type_id' => 'getTaxRuleTypeId',
        'is_all_juris' => 'getIsAllJuris',
        'value' => 'getValue',
        'cap' => 'getCap',
        'threshold' => 'getThreshold',
        'options' => 'getOptions',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'description' => 'getDescription',
        'county_fips' => 'getCountyFips',
        'is_st_pro' => 'getIsStPro',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'sourcing' => 'getSourcing',
        'tax_type_group' => 'getTaxTypeGroup',
        'tax_sub_type' => 'getTaxSubType',
        'non_passthrough_expression' => 'getNonPassthroughExpression',
        'currency_code' => 'getCurrencyCode',
        'preferred_program_id' => 'getPreferredProgramId',
        'uom_id' => 'getUomId',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURIS_TYPE_ID_STA = 'STA';
    const JURIS_TYPE_ID_CTY = 'CTY';
    const JURIS_TYPE_ID_CIT = 'CIT';
    const JURIS_TYPE_ID_STJ = 'STJ';
    const JURIS_TYPE_ID_CNT = 'CNT';
    const JURISDICTION_TYPE_ID_COUNTRY = 'Country';
    const JURISDICTION_TYPE_ID_STATE = 'State';
    const JURISDICTION_TYPE_ID_COUNTY = 'County';
    const JURISDICTION_TYPE_ID_CITY = 'City';
    const JURISDICTION_TYPE_ID_SPECIAL = 'Special';
    const TAX_TYPE_ID_E = 'E';
    const TAX_TYPE_ID_LODGING = 'Lodging';
    const TAX_TYPE_ID_BOTTLE = 'Bottle';
    const TAX_TYPE_ID_RENT_TO_OWN = 'RentToOwn';
    const TAX_TYPE_ID_ALL = 'All';
    const TAX_TYPE_ID_BOTH_SALES_AND_USE_TAX = 'BothSalesAndUseTax';
    const TAX_TYPE_ID_CONSUMER_USE_TAX = 'ConsumerUseTax';
    const TAX_TYPE_ID_CONSUMERS_USE_AND_SELLERS_USE_TAX = 'ConsumersUseAndSellersUseTax';
    const TAX_TYPE_ID_CONSUMER_USE_AND_SALES_TAX = 'ConsumerUseAndSalesTax';
    const TAX_TYPE_ID_FEE = 'Fee';
    const TAX_TYPE_ID_VAT_INPUT_TAX = 'VATInputTax';
    const TAX_TYPE_ID_LIGHT_BULBS = 'LightBulbs';
    const TAX_TYPE_ID_MEALS = 'Meals';
    const TAX_TYPE_ID_VAT_NONRECOVERABLE_INPUT_TAX = 'VATNonrecoverableInputTax';
    const TAX_TYPE_ID_VAT_OUTPUT_TAX = 'VATOutputTax';
    const TAX_TYPE_ID_RENTAL = 'Rental';
    const TAX_TYPE_ID_SALES_TAX = 'SalesTax';
    const TAX_TYPE_ID_USE_TAX = 'UseTax';
    const TAX_TYPE_ID_E_WASTE = 'EWaste';
    const TAX_TYPE_ID_BATTERIES = 'Batteries';
    const RATE_TYPE_ID_REDUCED_A = 'ReducedA';
    const RATE_TYPE_ID_REDUCED_B = 'ReducedB';
    const RATE_TYPE_ID_FOOD = 'Food';
    const RATE_TYPE_ID_GENERAL = 'General';
    const RATE_TYPE_ID_INCREASED_STANDARD = 'IncreasedStandard';
    const RATE_TYPE_ID_LINEN_RENTAL = 'LinenRental';
    const RATE_TYPE_ID_MEDICAL = 'Medical';
    const RATE_TYPE_ID_PARKING = 'Parking';
    const RATE_TYPE_ID_SUPER_REDUCED = 'SuperReduced';
    const RATE_TYPE_ID_REDUCED_R = 'ReducedR';
    const RATE_TYPE_ID_STANDARD = 'Standard';
    const RATE_TYPE_ID_LEASING = 'Leasing';
    const RATE_TYPE_ID_LEASING_LOW = 'LeasingLow';
    const RATE_TYPE_ID_SERVICES = 'Services';
    const RATE_TYPE_ID_ZERO = 'Zero';
    const TAX_RULE_TYPE_ID_RATE_RULE = 'RateRule';
    const TAX_RULE_TYPE_ID_RATE_OVERRIDE_RULE = 'RateOverrideRule';
    const TAX_RULE_TYPE_ID_BASE_RULE = 'BaseRule';
    const TAX_RULE_TYPE_ID_EXEMPT_ENTITY_RULE = 'ExemptEntityRule';
    const TAX_RULE_TYPE_ID_PRODUCT_TAXABILITY_RULE = 'ProductTaxabilityRule';
    const TAX_RULE_TYPE_ID_NEXUS_RULE = 'NexusRule';
    const SOURCING_MIXED = 'Mixed';
    const SOURCING_DESTINATION = 'Destination';
    const SOURCING_ORIGIN = 'Origin';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisTypeIdAllowableValues()
    {
        return [
            self::JURIS_TYPE_ID_STA,
            self::JURIS_TYPE_ID_CTY,
            self::JURIS_TYPE_ID_CIT,
            self::JURIS_TYPE_ID_STJ,
            self::JURIS_TYPE_ID_CNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionTypeIdAllowableValues()
    {
        return [
            self::JURISDICTION_TYPE_ID_COUNTRY,
            self::JURISDICTION_TYPE_ID_STATE,
            self::JURISDICTION_TYPE_ID_COUNTY,
            self::JURISDICTION_TYPE_ID_CITY,
            self::JURISDICTION_TYPE_ID_SPECIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeIdAllowableValues()
    {
        return [
            self::TAX_TYPE_ID_E,
            self::TAX_TYPE_ID_LODGING,
            self::TAX_TYPE_ID_BOTTLE,
            self::TAX_TYPE_ID_RENT_TO_OWN,
            self::TAX_TYPE_ID_ALL,
            self::TAX_TYPE_ID_BOTH_SALES_AND_USE_TAX,
            self::TAX_TYPE_ID_CONSUMER_USE_TAX,
            self::TAX_TYPE_ID_CONSUMERS_USE_AND_SELLERS_USE_TAX,
            self::TAX_TYPE_ID_CONSUMER_USE_AND_SALES_TAX,
            self::TAX_TYPE_ID_FEE,
            self::TAX_TYPE_ID_VAT_INPUT_TAX,
            self::TAX_TYPE_ID_LIGHT_BULBS,
            self::TAX_TYPE_ID_MEALS,
            self::TAX_TYPE_ID_VAT_NONRECOVERABLE_INPUT_TAX,
            self::TAX_TYPE_ID_VAT_OUTPUT_TAX,
            self::TAX_TYPE_ID_RENTAL,
            self::TAX_TYPE_ID_SALES_TAX,
            self::TAX_TYPE_ID_USE_TAX,
            self::TAX_TYPE_ID_E_WASTE,
            self::TAX_TYPE_ID_BATTERIES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTypeIdAllowableValues()
    {
        return [
            self::RATE_TYPE_ID_REDUCED_A,
            self::RATE_TYPE_ID_REDUCED_B,
            self::RATE_TYPE_ID_FOOD,
            self::RATE_TYPE_ID_GENERAL,
            self::RATE_TYPE_ID_INCREASED_STANDARD,
            self::RATE_TYPE_ID_LINEN_RENTAL,
            self::RATE_TYPE_ID_MEDICAL,
            self::RATE_TYPE_ID_PARKING,
            self::RATE_TYPE_ID_SUPER_REDUCED,
            self::RATE_TYPE_ID_REDUCED_R,
            self::RATE_TYPE_ID_STANDARD,
            self::RATE_TYPE_ID_LEASING,
            self::RATE_TYPE_ID_LEASING_LOW,
            self::RATE_TYPE_ID_SERVICES,
            self::RATE_TYPE_ID_ZERO,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxRuleTypeIdAllowableValues()
    {
        return [
            self::TAX_RULE_TYPE_ID_RATE_RULE,
            self::TAX_RULE_TYPE_ID_RATE_OVERRIDE_RULE,
            self::TAX_RULE_TYPE_ID_BASE_RULE,
            self::TAX_RULE_TYPE_ID_EXEMPT_ENTITY_RULE,
            self::TAX_RULE_TYPE_ID_PRODUCT_TAXABILITY_RULE,
            self::TAX_RULE_TYPE_ID_NEXUS_RULE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourcingAllowableValues()
    {
        return [
            self::SOURCING_MIXED,
            self::SOURCING_DESTINATION,
            self::SOURCING_ORIGIN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['tax_code_id'] = isset($data['tax_code_id']) ? $data['tax_code_id'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['state_fips'] = isset($data['state_fips']) ? $data['state_fips'] : null;
        $this->container['juris_name'] = isset($data['juris_name']) ? $data['juris_name'] : null;
        $this->container['juris_code'] = isset($data['juris_code']) ? $data['juris_code'] : null;
        $this->container['juris_type_id'] = isset($data['juris_type_id']) ? $data['juris_type_id'] : null;
        $this->container['jurisdiction_type_id'] = isset($data['jurisdiction_type_id']) ? $data['jurisdiction_type_id'] : null;
        $this->container['customer_usage_type'] = isset($data['customer_usage_type']) ? $data['customer_usage_type'] : null;
        $this->container['entity_use_code'] = isset($data['entity_use_code']) ? $data['entity_use_code'] : null;
        $this->container['tax_type_id'] = isset($data['tax_type_id']) ? $data['tax_type_id'] : null;
        $this->container['rate_type_id'] = isset($data['rate_type_id']) ? $data['rate_type_id'] : null;
        $this->container['rate_type_code'] = isset($data['rate_type_code']) ? $data['rate_type_code'] : null;
        $this->container['tax_rule_type_id'] = isset($data['tax_rule_type_id']) ? $data['tax_rule_type_id'] : null;
        $this->container['is_all_juris'] = isset($data['is_all_juris']) ? $data['is_all_juris'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['cap'] = isset($data['cap']) ? $data['cap'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['county_fips'] = isset($data['county_fips']) ? $data['county_fips'] : null;
        $this->container['is_st_pro'] = isset($data['is_st_pro']) ? $data['is_st_pro'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['sourcing'] = isset($data['sourcing']) ? $data['sourcing'] : null;
        $this->container['tax_type_group'] = isset($data['tax_type_group']) ? $data['tax_type_group'] : null;
        $this->container['tax_sub_type'] = isset($data['tax_sub_type']) ? $data['tax_sub_type'] : null;
        $this->container['non_passthrough_expression'] = isset($data['non_passthrough_expression']) ? $data['non_passthrough_expression'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['preferred_program_id'] = isset($data['preferred_program_id']) ? $data['preferred_program_id'] : null;
        $this->container['uom_id'] = isset($data['uom_id']) ? $data['uom_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state_fips']) && (mb_strlen($this->container['state_fips']) > 2)) {
            $invalidProperties[] = "invalid value for 'state_fips', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['state_fips']) && (mb_strlen($this->container['state_fips']) < 0)) {
            $invalidProperties[] = "invalid value for 'state_fips', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['juris_name']) && (mb_strlen($this->container['juris_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'juris_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['juris_name']) && (mb_strlen($this->container['juris_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'juris_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['juris_code'] === null) {
            $invalidProperties[] = "'juris_code' can't be null";
        }
        if ((mb_strlen($this->container['juris_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'juris_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['juris_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'juris_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getJurisTypeIdAllowableValues();
        if (!is_null($this->container['juris_type_id']) && !in_array($this->container['juris_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'juris_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJurisdictionTypeIdAllowableValues();
        if (!is_null($this->container['jurisdiction_type_id']) && !in_array($this->container['jurisdiction_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jurisdiction_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['customer_usage_type']) && (mb_strlen($this->container['customer_usage_type']) > 25)) {
            $invalidProperties[] = "invalid value for 'customer_usage_type', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['customer_usage_type']) && (mb_strlen($this->container['customer_usage_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_usage_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTaxTypeIdAllowableValues();
        if (!is_null($this->container['tax_type_id']) && !in_array($this->container['tax_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateTypeIdAllowableValues();
        if (!is_null($this->container['rate_type_id']) && !in_array($this->container['rate_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rate_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tax_rule_type_id'] === null) {
            $invalidProperties[] = "'tax_rule_type_id' can't be null";
        }
        $allowedValues = $this->getTaxRuleTypeIdAllowableValues();
        if (!is_null($this->container['tax_rule_type_id']) && !in_array($this->container['tax_rule_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_rule_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['options']) && (mb_strlen($this->container['options']) > 100)) {
            $invalidProperties[] = "invalid value for 'options', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['options']) && (mb_strlen($this->container['options']) < 0)) {
            $invalidProperties[] = "invalid value for 'options', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['county_fips']) && (mb_strlen($this->container['county_fips']) > 3)) {
            $invalidProperties[] = "invalid value for 'county_fips', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['county_fips']) && (mb_strlen($this->container['county_fips']) < 0)) {
            $invalidProperties[] = "invalid value for 'county_fips', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($this->container['sourcing']) && !in_array($this->container['sourcing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sourcing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['non_passthrough_expression']) && (mb_strlen($this->container['non_passthrough_expression']) > 500)) {
            $invalidProperties[] = "invalid value for 'non_passthrough_expression', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['non_passthrough_expression']) && (mb_strlen($this->container['non_passthrough_expression']) < 0)) {
            $invalidProperties[] = "invalid value for 'non_passthrough_expression', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this tax rule.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company that owns this tax rule.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets tax_code_id
     *
     * @return int
     */
    public function getTaxCodeId()
    {
        return $this->container['tax_code_id'];
    }

    /**
     * Sets tax_code_id
     *
     * @param int $tax_code_id For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.
     *
     * @return $this
     */
    public function setTaxCodeId($tax_code_id)
    {
        $this->container['tax_code_id'] = $tax_code_id;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code For rules that apply to a specific tax code only, this specifies which tax code is affected by this rule.                You can choose to specify a tax code either by passing its unique ID number in the `taxCodeId` field or  by passing its alphanumeric code in the `taxCode` field.  To search for the appropriate tax code for your  custom rule, use the `ListTaxCodes` API.                The `RateOverrideRule`, `BaseRule`, and `ExemptEntityRule` rule types can be applied to all tax codes.  To  make a rule that applies to all tax codes, leave both fields blank.                The `ProductTaxabilityRule` rule must be associated with a tax code.  If you attempt to create a product taxability rule  without a tax code, you will get an error message.
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        if (!is_null($tax_code) && (mb_strlen($tax_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling TaxRuleModel., must be smaller than or equal to 25.');
        }
        if (!is_null($tax_code) && (mb_strlen($tax_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets state_fips
     *
     * @return string
     */
    public function getStateFips()
    {
        return $this->container['state_fips'];
    }

    /**
     * Sets state_fips
     *
     * @param string $state_fips For U.S. tax rules, this is the state's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.
     *
     * @return $this
     */
    public function setStateFips($state_fips)
    {
        if (!is_null($state_fips) && (mb_strlen($state_fips) > 2)) {
            throw new \InvalidArgumentException('invalid length for $state_fips when calling TaxRuleModel., must be smaller than or equal to 2.');
        }
        if (!is_null($state_fips) && (mb_strlen($state_fips) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state_fips when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['state_fips'] = $state_fips;

        return $this;
    }

    /**
     * Gets juris_name
     *
     * @return string
     */
    public function getJurisName()
    {
        return $this->container['juris_name'];
    }

    /**
     * Sets juris_name
     *
     * @param string $juris_name The name of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).  To set a rule that applies to all jurisdictions of a specific type, see `isAllJuris`.                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.
     *
     * @return $this
     */
    public function setJurisName($juris_name)
    {
        if (!is_null($juris_name) && (mb_strlen($juris_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $juris_name when calling TaxRuleModel., must be smaller than or equal to 200.');
        }
        if (!is_null($juris_name) && (mb_strlen($juris_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $juris_name when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['juris_name'] = $juris_name;

        return $this;
    }

    /**
     * Gets juris_code
     *
     * @return string
     */
    public function getJurisCode()
    {
        return $this->container['juris_code'];
    }

    /**
     * Sets juris_code
     *
     * @param string $juris_code The code of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.
     *
     * @return $this
     */
    public function setJurisCode($juris_code)
    {
        if ((mb_strlen($juris_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $juris_code when calling TaxRuleModel., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($juris_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $juris_code when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['juris_code'] = $juris_code;

        return $this;
    }

    /**
     * Gets juris_type_id
     *
     * @return string
     */
    public function getJurisTypeId()
    {
        return $this->container['juris_type_id'];
    }

    /**
     * Sets juris_type_id
     *
     * @param string $juris_type_id DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use `jurisdictionTypeId` instead.
     *
     * @return $this
     */
    public function setJurisTypeId($juris_type_id)
    {
        $allowedValues = $this->getJurisTypeIdAllowableValues();
        if (!is_null($juris_type_id) && !in_array($juris_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'juris_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['juris_type_id'] = $juris_type_id;

        return $this;
    }

    /**
     * Gets jurisdiction_type_id
     *
     * @return string
     */
    public function getJurisdictionTypeId()
    {
        return $this->container['jurisdiction_type_id'];
    }

    /**
     * Sets jurisdiction_type_id
     *
     * @param string $jurisdiction_type_id The type of the jurisdiction to which this tax rule applies.                Custom tax rules can apply to a specific jurisdiction or to all jurisdictions.  To select a jurisdiction, use the  [ListJurisdictions API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictions/)  or the [ListJurisdictionsByAddress API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListJurisdictionsByAddress/).                Once you have determined which jurisdiction you wish to assign to the tax rule, you should fill in the `jurisName`, `jurisCode`, and  `jurisdictionTypeId` fields using the information you retrieved from the API above.                To make a custom tax rule for US or Canada that applies to all jurisdictions of a specific type, see the `isAllJuris`  field for more information.
     *
     * @return $this
     */
    public function setJurisdictionTypeId($jurisdiction_type_id)
    {
        $allowedValues = $this->getJurisdictionTypeIdAllowableValues();
        if (!is_null($jurisdiction_type_id) && !in_array($jurisdiction_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jurisdiction_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction_type_id'] = $jurisdiction_type_id;

        return $this;
    }

    /**
     * Gets customer_usage_type
     *
     * @return string
     */
    public function getCustomerUsageType()
    {
        return $this->container['customer_usage_type'];
    }

    /**
     * Sets customer_usage_type
     *
     * @param string $customer_usage_type DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use `entityUseCode` instead.
     *
     * @return $this
     */
    public function setCustomerUsageType($customer_usage_type)
    {
        if (!is_null($customer_usage_type) && (mb_strlen($customer_usage_type) > 25)) {
            throw new \InvalidArgumentException('invalid length for $customer_usage_type when calling TaxRuleModel., must be smaller than or equal to 25.');
        }
        if (!is_null($customer_usage_type) && (mb_strlen($customer_usage_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_usage_type when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_usage_type'] = $customer_usage_type;

        return $this;
    }

    /**
     * Gets entity_use_code
     *
     * @return string
     */
    public function getEntityUseCode()
    {
        return $this->container['entity_use_code'];
    }

    /**
     * Sets entity_use_code
     *
     * @param string $entity_use_code The entity use code to which this rule applies.                You can create custom `entityUseCode` values with specific behavior using this API, or you can change  the behavior of Avalara's system-defined entity use codes.                For a full list of Avalara-defined entity use codes, see the [ListEntityUseCodes API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/).
     *
     * @return $this
     */
    public function setEntityUseCode($entity_use_code)
    {
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling TaxRuleModel., must be smaller than or equal to 25.');
        }
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['entity_use_code'] = $entity_use_code;

        return $this;
    }

    /**
     * Gets tax_type_id
     *
     * @return string
     */
    public function getTaxTypeId()
    {
        return $this->container['tax_type_id'];
    }

    /**
     * Sets tax_type_id
     *
     * @param string $tax_type_id Some tax type groups contain multiple different types of tax.  To create a rule that affects only one  type of tax within a tax type group, set this value to the code matching the specific tax type within  that group.  The custom tax rule will then only apply to taxes calculated for that specific type.                For rules that affect all tax types, use the value `A` to match `All` tax types within that group.
     *
     * @return $this
     */
    public function setTaxTypeId($tax_type_id)
    {
        $allowedValues = $this->getTaxTypeIdAllowableValues();
        if (!is_null($tax_type_id) && !in_array($tax_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type_id'] = $tax_type_id;

        return $this;
    }

    /**
     * Gets rate_type_id
     *
     * @return string
     */
    public function getRateTypeId()
    {
        return $this->container['rate_type_id'];
    }

    /**
     * Sets rate_type_id
     *
     * @param string $rate_type_id DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: Please use `rateTypeCode`, `taxTypeGroup` and `subTaxType` instead.
     *
     * @return $this
     */
    public function setRateTypeId($rate_type_id)
    {
        $allowedValues = $this->getRateTypeIdAllowableValues();
        if (!is_null($rate_type_id) && !in_array($rate_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rate_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_type_id'] = $rate_type_id;

        return $this;
    }

    /**
     * Gets rate_type_code
     *
     * @return string
     */
    public function getRateTypeCode()
    {
        return $this->container['rate_type_code'];
    }

    /**
     * Sets rate_type_code
     *
     * @param string $rate_type_code Indicates the code of the rate type that applies to this rule.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.                If you specify a value in the rateTypeCode field, this rule will cause tax lines that are affected by the rule  to change to a different rate type code.
     *
     * @return $this
     */
    public function setRateTypeCode($rate_type_code)
    {
        $this->container['rate_type_code'] = $rate_type_code;

        return $this;
    }

    /**
     * Gets tax_rule_type_id
     *
     * @return string
     */
    public function getTaxRuleTypeId()
    {
        return $this->container['tax_rule_type_id'];
    }

    /**
     * Sets tax_rule_type_id
     *
     * @param string $tax_rule_type_id This type value determines the behavior of the tax rule.                You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate  (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),  or other types of behavior.
     *
     * @return $this
     */
    public function setTaxRuleTypeId($tax_rule_type_id)
    {
        $allowedValues = $this->getTaxRuleTypeIdAllowableValues();
        if (!in_array($tax_rule_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_rule_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_rule_type_id'] = $tax_rule_type_id;

        return $this;
    }

    /**
     * Gets is_all_juris
     *
     * @return bool
     */
    public function getIsAllJuris()
    {
        return $this->container['is_all_juris'];
    }

    /**
     * Sets is_all_juris
     *
     * @param bool $is_all_juris Allows you to make tax rules apply to lower jurisdictions.  This feature is only available in the United States and Canada.                * In the United States, this value can be used for rules written at the `State` jurisdictional level.  If set to `true`, this rule will at the state level, county level, city level, and special jurisdiction level.  * In Canada, this value can be used for rules written at the `Country` or `State` jurisdictional levels.  If set to `true`, this rule will at all lower jurisdictional levels.                For any other use case, this value must be `false`.
     *
     * @return $this
     */
    public function setIsAllJuris($is_all_juris)
    {
        $this->container['is_all_juris'] = $is_all_juris;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value This field has different behavior based on the type of the tax rule.                * For a product taxability rule, this value is either 1 or 0, indicating taxable or non-taxable.  * For a rate override rule, this value is the corrected rate stored as a decimal, for example, a rate of 5% would be stored as 0.05 decimal.  If you use the special value of 1.0, only the cap and threshold values will be applied and the rate will be left alone.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets cap
     *
     * @return double
     */
    public function getCap()
    {
        return $this->container['cap'];
    }

    /**
     * Sets cap
     *
     * @param double $cap The maximum cap for the price of this item according to this rule.  Any amount above this cap will not be subject to this rule.                For example, if you must pay 5% of a product's value up to a maximum value of $1000, you would set the `cap` to `1000.00` and the `value` to `0.05`.
     *
     * @return $this
     */
    public function setCap($cap)
    {
        $this->container['cap'] = $cap;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return double
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param double $threshold The per-unit threshold that must be met before this rule applies.                For example, if your product is nontaxable unless it is above $100 per product, you would set the `threshold` value to `100`.  In this case, the rate  for the rule would apply to the entire amount above $100.                You can also create rules that make the entire product taxable if it exceeds a threshold, but is nontaxable  if it is below the threshold.  To choose this, set the `options` field to the value `TaxAll`.
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string $options Supports custom options for your tax rule.                Supported options include:  * `TaxAll` - This value indicates that the entire amount of the line becomes taxable when the line amount exceeds the `threshold`.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        if (!is_null($options) && (mb_strlen($options) > 100)) {
            throw new \InvalidArgumentException('invalid length for $options when calling TaxRuleModel., must be smaller than or equal to 100.');
        }
        if (!is_null($options) && (mb_strlen($options) < 0)) {
            throw new \InvalidArgumentException('invalid length for $options when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The first date at which this rule applies.  If `null`, this rule will apply to all dates prior to the end date.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The last date for which this rule applies.  If `null`, this rule will apply to all dates after the effective date.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A friendly name for this tax rule.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxRuleModel., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets county_fips
     *
     * @return string
     */
    public function getCountyFips()
    {
        return $this->container['county_fips'];
    }

    /**
     * Sets county_fips
     *
     * @param string $county_fips For U.S. tax rules, this is the county's Federal Information Processing Standard (FIPS) code.                This field is required for rules that apply to specific jurisdictions in the United States.  It is not required  if you set the `isAllJuris` flag to true.
     *
     * @return $this
     */
    public function setCountyFips($county_fips)
    {
        if (!is_null($county_fips) && (mb_strlen($county_fips) > 3)) {
            throw new \InvalidArgumentException('invalid length for $county_fips when calling TaxRuleModel., must be smaller than or equal to 3.');
        }
        if (!is_null($county_fips) && (mb_strlen($county_fips) < 0)) {
            throw new \InvalidArgumentException('invalid length for $county_fips when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['county_fips'] = $county_fips;

        return $this;
    }

    /**
     * Gets is_st_pro
     *
     * @return bool
     */
    public function getIsStPro()
    {
        return $this->container['is_st_pro'];
    }

    /**
     * Sets is_st_pro
     *
     * @param bool $is_st_pro DEPRECATED - Date: 8/27/2018, Version: 18.9, Message: This field is no longer required.
     *
     * @return $this
     */
    public function setIsStPro($is_st_pro)
    {
        $this->container['is_st_pro'] = $is_st_pro;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country where this rule will apply.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region where this rule will apply.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.  NOTE: Region is required for US and not required for non-US countries because the user may be either creating a Country-level or Region-level rule.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets sourcing
     *
     * @return string
     */
    public function getSourcing()
    {
        return $this->container['sourcing'];
    }

    /**
     * Sets sourcing
     *
     * @param string $sourcing The sourcing types to which this rule applies.
     *
     * @return $this
     */
    public function setSourcing($sourcing)
    {
        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($sourcing) && !in_array($sourcing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sourcing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sourcing'] = $sourcing;

        return $this;
    }

    /**
     * Gets tax_type_group
     *
     * @return string
     */
    public function getTaxTypeGroup()
    {
        return $this->container['tax_type_group'];
    }

    /**
     * Sets tax_type_group
     *
     * @param string $tax_type_group This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax type group of the original product.  * For other rules, this value determines what tax type groups will be affected by the rule.                Refer to `ListTaxTypeGroups` for a list of tax type groups supported by AvaTax.
     *
     * @return $this
     */
    public function setTaxTypeGroup($tax_type_group)
    {
        $this->container['tax_type_group'] = $tax_type_group;

        return $this;
    }

    /**
     * Gets tax_sub_type
     *
     * @return string
     */
    public function getTaxSubType()
    {
        return $this->container['tax_sub_type'];
    }

    /**
     * Sets tax_sub_type
     *
     * @param string $tax_sub_type This field has different behavior based on the type of rule.                * For a product taxability rule, if the rule applies to an item, this value will override the tax sub type of the original product.  * For other rules, this value determines what tax sub types will be affected by the rule.                Refer to `ListTaxSubtypes` for a list of tax sub types supported by AvaTax.
     *
     * @return $this
     */
    public function setTaxSubType($tax_sub_type)
    {
        $this->container['tax_sub_type'] = $tax_sub_type;

        return $this;
    }

    /**
     * Gets non_passthrough_expression
     *
     * @return string
     */
    public function getNonPassthroughExpression()
    {
        return $this->container['non_passthrough_expression'];
    }

    /**
     * Sets non_passthrough_expression
     *
     * @param string $non_passthrough_expression Reserved for Avalara internal usage.  Leave this field null.
     *
     * @return $this
     */
    public function setNonPassthroughExpression($non_passthrough_expression)
    {
        if (!is_null($non_passthrough_expression) && (mb_strlen($non_passthrough_expression) > 500)) {
            throw new \InvalidArgumentException('invalid length for $non_passthrough_expression when calling TaxRuleModel., must be smaller than or equal to 500.');
        }
        if (!is_null($non_passthrough_expression) && (mb_strlen($non_passthrough_expression) < 0)) {
            throw new \InvalidArgumentException('invalid length for $non_passthrough_expression when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['non_passthrough_expression'] = $non_passthrough_expression;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The currency code to use for this rule.                For a list of currencies supported by AvaTax, use the [ListCurrencies API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListCurrencies/).
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling TaxRuleModel., must be smaller than or equal to 3.');
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling TaxRuleModel., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets preferred_program_id
     *
     * @return int
     */
    public function getPreferredProgramId()
    {
        return $this->container['preferred_program_id'];
    }

    /**
     * Sets preferred_program_id
     *
     * @param int $preferred_program_id Reserved for Avalara internal usage.  Leave this field null.
     *
     * @return $this
     */
    public function setPreferredProgramId($preferred_program_id)
    {
        $this->container['preferred_program_id'] = $preferred_program_id;

        return $this;
    }

    /**
     * Gets uom_id
     *
     * @return int
     */
    public function getUomId()
    {
        return $this->container['uom_id'];
    }

    /**
     * Sets uom_id
     *
     * @param int $uom_id For tax rules that are calculated using units of measurement, this indicates the unit of measurement type  used to calculate the amounts for this rule.                For a list of units of measurement, use the [ListUnitsOfMeasurement API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListUnitOfMeasurement/).
     *
     * @return $this
     */
    public function setUomId($uom_id)
    {
        $this->container['uom_id'] = $uom_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


