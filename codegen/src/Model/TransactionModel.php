<?php
/**
 * TransactionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TransactionModel Class Doc Comment
 *
 * @category Class
 * @description This object represents a single transaction; for example, a sales invoice or purchase order.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'code' => 'string',
        'company_id' => 'int',
        'date' => '\DateTime',
        'payment_date' => '\DateTime',
        'status' => 'string',
        'type' => 'string',
        'batch_code' => 'string',
        'currency_code' => 'string',
        'customer_usage_type' => 'string',
        'entity_use_code' => 'string',
        'customer_vendor_code' => 'string',
        'customer_code' => 'string',
        'exempt_no' => 'string',
        'reconciled' => 'bool',
        'location_code' => 'string',
        'reporting_location_code' => 'string',
        'purchase_order_no' => 'string',
        'reference_code' => 'string',
        'salesperson_code' => 'string',
        'tax_override_type' => 'string',
        'tax_override_amount' => 'double',
        'tax_override_reason' => 'string',
        'total_amount' => 'double',
        'total_exempt' => 'double',
        'total_discount' => 'double',
        'total_tax' => 'double',
        'total_taxable' => 'double',
        'total_tax_calculated' => 'double',
        'adjustment_reason' => 'string',
        'adjustment_description' => 'string',
        'locked' => 'bool',
        'region' => 'string',
        'country' => 'string',
        'version' => 'int',
        'software_version' => 'string',
        'origin_address_id' => 'int',
        'destination_address_id' => 'int',
        'exchange_rate_effective_date' => '\DateTime',
        'exchange_rate' => 'double',
        'is_seller_importer_of_record' => 'bool',
        'description' => 'string',
        'email' => 'string',
        'business_identification_no' => 'string',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'tax_date' => '\DateTime',
        'lines' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLineModel[]',
        'addresses' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionAddressModel[]',
        'location_types' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLocationTypeModel[]',
        'summary' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionSummary[]',
        'tax_details_by_tax_type' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TaxDetailsByTaxType[]',
        'parameters' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionParameterModel[]',
        'messages' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AvaTaxMessage[]',
        'invoice_messages' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\InvoiceMessageModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'code' => null,
        'company_id' => 'int32',
        'date' => 'date',
        'payment_date' => 'date',
        'status' => null,
        'type' => null,
        'batch_code' => null,
        'currency_code' => null,
        'customer_usage_type' => null,
        'entity_use_code' => null,
        'customer_vendor_code' => null,
        'customer_code' => null,
        'exempt_no' => null,
        'reconciled' => null,
        'location_code' => null,
        'reporting_location_code' => null,
        'purchase_order_no' => null,
        'reference_code' => null,
        'salesperson_code' => null,
        'tax_override_type' => null,
        'tax_override_amount' => 'double',
        'tax_override_reason' => null,
        'total_amount' => 'double',
        'total_exempt' => 'double',
        'total_discount' => 'double',
        'total_tax' => 'double',
        'total_taxable' => 'double',
        'total_tax_calculated' => 'double',
        'adjustment_reason' => null,
        'adjustment_description' => null,
        'locked' => null,
        'region' => null,
        'country' => null,
        'version' => 'int32',
        'software_version' => null,
        'origin_address_id' => 'int64',
        'destination_address_id' => 'int64',
        'exchange_rate_effective_date' => 'date',
        'exchange_rate' => 'double',
        'is_seller_importer_of_record' => null,
        'description' => null,
        'email' => null,
        'business_identification_no' => null,
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'tax_date' => 'date-time',
        'lines' => null,
        'addresses' => null,
        'location_types' => null,
        'summary' => null,
        'tax_details_by_tax_type' => null,
        'parameters' => null,
        'messages' => null,
        'invoice_messages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'company_id' => 'companyId',
        'date' => 'date',
        'payment_date' => 'paymentDate',
        'status' => 'status',
        'type' => 'type',
        'batch_code' => 'batchCode',
        'currency_code' => 'currencyCode',
        'customer_usage_type' => 'customerUsageType',
        'entity_use_code' => 'entityUseCode',
        'customer_vendor_code' => 'customerVendorCode',
        'customer_code' => 'customerCode',
        'exempt_no' => 'exemptNo',
        'reconciled' => 'reconciled',
        'location_code' => 'locationCode',
        'reporting_location_code' => 'reportingLocationCode',
        'purchase_order_no' => 'purchaseOrderNo',
        'reference_code' => 'referenceCode',
        'salesperson_code' => 'salespersonCode',
        'tax_override_type' => 'taxOverrideType',
        'tax_override_amount' => 'taxOverrideAmount',
        'tax_override_reason' => 'taxOverrideReason',
        'total_amount' => 'totalAmount',
        'total_exempt' => 'totalExempt',
        'total_discount' => 'totalDiscount',
        'total_tax' => 'totalTax',
        'total_taxable' => 'totalTaxable',
        'total_tax_calculated' => 'totalTaxCalculated',
        'adjustment_reason' => 'adjustmentReason',
        'adjustment_description' => 'adjustmentDescription',
        'locked' => 'locked',
        'region' => 'region',
        'country' => 'country',
        'version' => 'version',
        'software_version' => 'softwareVersion',
        'origin_address_id' => 'originAddressId',
        'destination_address_id' => 'destinationAddressId',
        'exchange_rate_effective_date' => 'exchangeRateEffectiveDate',
        'exchange_rate' => 'exchangeRate',
        'is_seller_importer_of_record' => 'isSellerImporterOfRecord',
        'description' => 'description',
        'email' => 'email',
        'business_identification_no' => 'businessIdentificationNo',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'tax_date' => 'taxDate',
        'lines' => 'lines',
        'addresses' => 'addresses',
        'location_types' => 'locationTypes',
        'summary' => 'summary',
        'tax_details_by_tax_type' => 'taxDetailsByTaxType',
        'parameters' => 'parameters',
        'messages' => 'messages',
        'invoice_messages' => 'invoiceMessages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'company_id' => 'setCompanyId',
        'date' => 'setDate',
        'payment_date' => 'setPaymentDate',
        'status' => 'setStatus',
        'type' => 'setType',
        'batch_code' => 'setBatchCode',
        'currency_code' => 'setCurrencyCode',
        'customer_usage_type' => 'setCustomerUsageType',
        'entity_use_code' => 'setEntityUseCode',
        'customer_vendor_code' => 'setCustomerVendorCode',
        'customer_code' => 'setCustomerCode',
        'exempt_no' => 'setExemptNo',
        'reconciled' => 'setReconciled',
        'location_code' => 'setLocationCode',
        'reporting_location_code' => 'setReportingLocationCode',
        'purchase_order_no' => 'setPurchaseOrderNo',
        'reference_code' => 'setReferenceCode',
        'salesperson_code' => 'setSalespersonCode',
        'tax_override_type' => 'setTaxOverrideType',
        'tax_override_amount' => 'setTaxOverrideAmount',
        'tax_override_reason' => 'setTaxOverrideReason',
        'total_amount' => 'setTotalAmount',
        'total_exempt' => 'setTotalExempt',
        'total_discount' => 'setTotalDiscount',
        'total_tax' => 'setTotalTax',
        'total_taxable' => 'setTotalTaxable',
        'total_tax_calculated' => 'setTotalTaxCalculated',
        'adjustment_reason' => 'setAdjustmentReason',
        'adjustment_description' => 'setAdjustmentDescription',
        'locked' => 'setLocked',
        'region' => 'setRegion',
        'country' => 'setCountry',
        'version' => 'setVersion',
        'software_version' => 'setSoftwareVersion',
        'origin_address_id' => 'setOriginAddressId',
        'destination_address_id' => 'setDestinationAddressId',
        'exchange_rate_effective_date' => 'setExchangeRateEffectiveDate',
        'exchange_rate' => 'setExchangeRate',
        'is_seller_importer_of_record' => 'setIsSellerImporterOfRecord',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'business_identification_no' => 'setBusinessIdentificationNo',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'tax_date' => 'setTaxDate',
        'lines' => 'setLines',
        'addresses' => 'setAddresses',
        'location_types' => 'setLocationTypes',
        'summary' => 'setSummary',
        'tax_details_by_tax_type' => 'setTaxDetailsByTaxType',
        'parameters' => 'setParameters',
        'messages' => 'setMessages',
        'invoice_messages' => 'setInvoiceMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'company_id' => 'getCompanyId',
        'date' => 'getDate',
        'payment_date' => 'getPaymentDate',
        'status' => 'getStatus',
        'type' => 'getType',
        'batch_code' => 'getBatchCode',
        'currency_code' => 'getCurrencyCode',
        'customer_usage_type' => 'getCustomerUsageType',
        'entity_use_code' => 'getEntityUseCode',
        'customer_vendor_code' => 'getCustomerVendorCode',
        'customer_code' => 'getCustomerCode',
        'exempt_no' => 'getExemptNo',
        'reconciled' => 'getReconciled',
        'location_code' => 'getLocationCode',
        'reporting_location_code' => 'getReportingLocationCode',
        'purchase_order_no' => 'getPurchaseOrderNo',
        'reference_code' => 'getReferenceCode',
        'salesperson_code' => 'getSalespersonCode',
        'tax_override_type' => 'getTaxOverrideType',
        'tax_override_amount' => 'getTaxOverrideAmount',
        'tax_override_reason' => 'getTaxOverrideReason',
        'total_amount' => 'getTotalAmount',
        'total_exempt' => 'getTotalExempt',
        'total_discount' => 'getTotalDiscount',
        'total_tax' => 'getTotalTax',
        'total_taxable' => 'getTotalTaxable',
        'total_tax_calculated' => 'getTotalTaxCalculated',
        'adjustment_reason' => 'getAdjustmentReason',
        'adjustment_description' => 'getAdjustmentDescription',
        'locked' => 'getLocked',
        'region' => 'getRegion',
        'country' => 'getCountry',
        'version' => 'getVersion',
        'software_version' => 'getSoftwareVersion',
        'origin_address_id' => 'getOriginAddressId',
        'destination_address_id' => 'getDestinationAddressId',
        'exchange_rate_effective_date' => 'getExchangeRateEffectiveDate',
        'exchange_rate' => 'getExchangeRate',
        'is_seller_importer_of_record' => 'getIsSellerImporterOfRecord',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'business_identification_no' => 'getBusinessIdentificationNo',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'tax_date' => 'getTaxDate',
        'lines' => 'getLines',
        'addresses' => 'getAddresses',
        'location_types' => 'getLocationTypes',
        'summary' => 'getSummary',
        'tax_details_by_tax_type' => 'getTaxDetailsByTaxType',
        'parameters' => 'getParameters',
        'messages' => 'getMessages',
        'invoice_messages' => 'getInvoiceMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_TEMPORARY = 'Temporary';
    const STATUS_SAVED = 'Saved';
    const STATUS_POSTED = 'Posted';
    const STATUS_COMMITTED = 'Committed';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_ADJUSTED = 'Adjusted';
    const STATUS_QUEUED = 'Queued';
    const STATUS_PENDING_APPROVAL = 'PendingApproval';
    const STATUS_ANY = 'Any';
    const TYPE_SALES_ORDER = 'SalesOrder';
    const TYPE_SALES_INVOICE = 'SalesInvoice';
    const TYPE_PURCHASE_ORDER = 'PurchaseOrder';
    const TYPE_PURCHASE_INVOICE = 'PurchaseInvoice';
    const TYPE_RETURN_ORDER = 'ReturnOrder';
    const TYPE_RETURN_INVOICE = 'ReturnInvoice';
    const TYPE_INVENTORY_TRANSFER_ORDER = 'InventoryTransferOrder';
    const TYPE_INVENTORY_TRANSFER_INVOICE = 'InventoryTransferInvoice';
    const TYPE_REVERSE_CHARGE_ORDER = 'ReverseChargeOrder';
    const TYPE_REVERSE_CHARGE_INVOICE = 'ReverseChargeInvoice';
    const TYPE_CUSTOMS_INVOICE = 'CustomsInvoice';
    const TYPE_CUSTOMS_ORDER = 'CustomsOrder';
    const TYPE_ANY = 'Any';
    const TAX_OVERRIDE_TYPE_NONE = 'None';
    const TAX_OVERRIDE_TYPE_TAX_AMOUNT = 'TaxAmount';
    const TAX_OVERRIDE_TYPE_EXEMPTION = 'Exemption';
    const TAX_OVERRIDE_TYPE_TAX_DATE = 'TaxDate';
    const TAX_OVERRIDE_TYPE_ACCRUED_TAX_AMOUNT = 'AccruedTaxAmount';
    const TAX_OVERRIDE_TYPE_DERIVE_TAXABLE = 'DeriveTaxable';
    const TAX_OVERRIDE_TYPE_OUT_OF_HARBOR = 'OutOfHarbor';
    const ADJUSTMENT_REASON_NOT_ADJUSTED = 'NotAdjusted';
    const ADJUSTMENT_REASON_SOURCING_ISSUE = 'SourcingIssue';
    const ADJUSTMENT_REASON_RECONCILED_WITH_GENERAL_LEDGER = 'ReconciledWithGeneralLedger';
    const ADJUSTMENT_REASON_EXEMPT_CERT_APPLIED = 'ExemptCertApplied';
    const ADJUSTMENT_REASON_PRICE_ADJUSTED = 'PriceAdjusted';
    const ADJUSTMENT_REASON_PRODUCT_RETURNED = 'ProductReturned';
    const ADJUSTMENT_REASON_PRODUCT_EXCHANGED = 'ProductExchanged';
    const ADJUSTMENT_REASON_BAD_DEBT = 'BadDebt';
    const ADJUSTMENT_REASON_OTHER = 'Other';
    const ADJUSTMENT_REASON_OFFLINE = 'Offline';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_TEMPORARY,
            self::STATUS_SAVED,
            self::STATUS_POSTED,
            self::STATUS_COMMITTED,
            self::STATUS_CANCELLED,
            self::STATUS_ADJUSTED,
            self::STATUS_QUEUED,
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALES_ORDER,
            self::TYPE_SALES_INVOICE,
            self::TYPE_PURCHASE_ORDER,
            self::TYPE_PURCHASE_INVOICE,
            self::TYPE_RETURN_ORDER,
            self::TYPE_RETURN_INVOICE,
            self::TYPE_INVENTORY_TRANSFER_ORDER,
            self::TYPE_INVENTORY_TRANSFER_INVOICE,
            self::TYPE_REVERSE_CHARGE_ORDER,
            self::TYPE_REVERSE_CHARGE_INVOICE,
            self::TYPE_CUSTOMS_INVOICE,
            self::TYPE_CUSTOMS_ORDER,
            self::TYPE_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxOverrideTypeAllowableValues()
    {
        return [
            self::TAX_OVERRIDE_TYPE_NONE,
            self::TAX_OVERRIDE_TYPE_TAX_AMOUNT,
            self::TAX_OVERRIDE_TYPE_EXEMPTION,
            self::TAX_OVERRIDE_TYPE_TAX_DATE,
            self::TAX_OVERRIDE_TYPE_ACCRUED_TAX_AMOUNT,
            self::TAX_OVERRIDE_TYPE_DERIVE_TAXABLE,
            self::TAX_OVERRIDE_TYPE_OUT_OF_HARBOR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdjustmentReasonAllowableValues()
    {
        return [
            self::ADJUSTMENT_REASON_NOT_ADJUSTED,
            self::ADJUSTMENT_REASON_SOURCING_ISSUE,
            self::ADJUSTMENT_REASON_RECONCILED_WITH_GENERAL_LEDGER,
            self::ADJUSTMENT_REASON_EXEMPT_CERT_APPLIED,
            self::ADJUSTMENT_REASON_PRICE_ADJUSTED,
            self::ADJUSTMENT_REASON_PRODUCT_RETURNED,
            self::ADJUSTMENT_REASON_PRODUCT_EXCHANGED,
            self::ADJUSTMENT_REASON_BAD_DEBT,
            self::ADJUSTMENT_REASON_OTHER,
            self::ADJUSTMENT_REASON_OFFLINE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['batch_code'] = isset($data['batch_code']) ? $data['batch_code'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['customer_usage_type'] = isset($data['customer_usage_type']) ? $data['customer_usage_type'] : null;
        $this->container['entity_use_code'] = isset($data['entity_use_code']) ? $data['entity_use_code'] : null;
        $this->container['customer_vendor_code'] = isset($data['customer_vendor_code']) ? $data['customer_vendor_code'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['exempt_no'] = isset($data['exempt_no']) ? $data['exempt_no'] : null;
        $this->container['reconciled'] = isset($data['reconciled']) ? $data['reconciled'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['reporting_location_code'] = isset($data['reporting_location_code']) ? $data['reporting_location_code'] : null;
        $this->container['purchase_order_no'] = isset($data['purchase_order_no']) ? $data['purchase_order_no'] : null;
        $this->container['reference_code'] = isset($data['reference_code']) ? $data['reference_code'] : null;
        $this->container['salesperson_code'] = isset($data['salesperson_code']) ? $data['salesperson_code'] : null;
        $this->container['tax_override_type'] = isset($data['tax_override_type']) ? $data['tax_override_type'] : null;
        $this->container['tax_override_amount'] = isset($data['tax_override_amount']) ? $data['tax_override_amount'] : null;
        $this->container['tax_override_reason'] = isset($data['tax_override_reason']) ? $data['tax_override_reason'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['total_exempt'] = isset($data['total_exempt']) ? $data['total_exempt'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['total_taxable'] = isset($data['total_taxable']) ? $data['total_taxable'] : null;
        $this->container['total_tax_calculated'] = isset($data['total_tax_calculated']) ? $data['total_tax_calculated'] : null;
        $this->container['adjustment_reason'] = isset($data['adjustment_reason']) ? $data['adjustment_reason'] : null;
        $this->container['adjustment_description'] = isset($data['adjustment_description']) ? $data['adjustment_description'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['origin_address_id'] = isset($data['origin_address_id']) ? $data['origin_address_id'] : null;
        $this->container['destination_address_id'] = isset($data['destination_address_id']) ? $data['destination_address_id'] : null;
        $this->container['exchange_rate_effective_date'] = isset($data['exchange_rate_effective_date']) ? $data['exchange_rate_effective_date'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['is_seller_importer_of_record'] = isset($data['is_seller_importer_of_record']) ? $data['is_seller_importer_of_record'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['business_identification_no'] = isset($data['business_identification_no']) ? $data['business_identification_no'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['tax_date'] = isset($data['tax_date']) ? $data['tax_date'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['location_types'] = isset($data['location_types']) ? $data['location_types'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['tax_details_by_tax_type'] = isset($data['tax_details_by_tax_type']) ? $data['tax_details_by_tax_type'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['invoice_messages'] = isset($data['invoice_messages']) ? $data['invoice_messages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxOverrideTypeAllowableValues();
        if (!is_null($this->container['tax_override_type']) && !in_array($this->container['tax_override_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_override_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdjustmentReasonAllowableValues();
        if (!is_null($this->container['adjustment_reason']) && !in_array($this->container['adjustment_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'adjustment_reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this transaction.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code A unique customer-provided code identifying this transaction.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company that recorded this transaction.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date on which this transaction occurred.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date DEPRECATED - Date: 07/25/2018, Version: 18.7, Message: This field is deprecated and will return null till its removed.  The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction.
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the transaction.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the transaction.                Transactions of type `SalesOrder`, `ReturnOrder`, and so on are temporary estimates and will not be saved.                Transactions of type `SalesInvoice, `ReturnInvoice`, and so on are permanent transactions that can be reported to tax authorities  if they are in status `Committed`.                A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.  A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory  transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets batch_code
     *
     * @return string
     */
    public function getBatchCode()
    {
        return $this->container['batch_code'];
    }

    /**
     * Sets batch_code
     *
     * @param string $batch_code If this transaction was created as part of a batch, this code indicates which batch.
     *
     * @return $this
     */
    public function setBatchCode($batch_code)
    {
        $this->container['batch_code'] = $batch_code;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The three-character ISO 4217 currency code that was used for payment for this transaction.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets customer_usage_type
     *
     * @return string
     */
    public function getCustomerUsageType()
    {
        return $this->container['customer_usage_type'];
    }

    /**
     * Sets customer_usage_type
     *
     * @param string $customer_usage_type DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules.
     *
     * @return $this
     */
    public function setCustomerUsageType($customer_usage_type)
    {
        $this->container['customer_usage_type'] = $customer_usage_type;

        return $this;
    }

    /**
     * Gets entity_use_code
     *
     * @return string
     */
    public function getEntityUseCode()
    {
        return $this->container['entity_use_code'];
    }

    /**
     * Sets entity_use_code
     *
     * @param string $entity_use_code The entity use code for this transaction.  Entity use codes often affect exemption or taxability rules.
     *
     * @return $this
     */
    public function setEntityUseCode($entity_use_code)
    {
        $this->container['entity_use_code'] = $entity_use_code;

        return $this;
    }

    /**
     * Gets customer_vendor_code
     *
     * @return string
     */
    public function getCustomerVendorCode()
    {
        return $this->container['customer_vendor_code'];
    }

    /**
     * Sets customer_vendor_code
     *
     * @param string $customer_vendor_code DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use `customerCode`  This field has been renamed to `customerCode` to match documentation for other APIs related to exemption customers.
     *
     * @return $this
     */
    public function setCustomerVendorCode($customer_vendor_code)
    {
        $this->container['customer_vendor_code'] = $customer_vendor_code;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code Unique code identifying the customer that requested this transaction.                When you specify a `customerCode`, AvaTax will look to see if a customer exists with this code in the exemption certificate system.  If that customer exists, and if that customer has uploaded an exemption certificate that applies to this transaction, the relevant  parts of this transaction that can use the exemption certificate will be treated as exempt.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets exempt_no
     *
     * @return string
     */
    public function getExemptNo()
    {
        return $this->container['exempt_no'];
    }

    /**
     * Sets exempt_no
     *
     * @param string $exempt_no The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.
     *
     * @return $this
     */
    public function setExemptNo($exempt_no)
    {
        $this->container['exempt_no'] = $exempt_no;

        return $this;
    }

    /**
     * Gets reconciled
     *
     * @return bool
     */
    public function getReconciled()
    {
        return $this->container['reconciled'];
    }

    /**
     * Sets reconciled
     *
     * @param bool $reconciled If this transaction has been reconciled against the company's ledger, this value is set to true.
     *
     * @return $this
     */
    public function setReconciled($reconciled)
    {
        $this->container['reconciled'] = $reconciled;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: In order to ensure consistency of field names, Please use reportingLocationCode instead.  This field has been replaced by the reportingLocationCode field
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets reporting_location_code
     *
     * @return string
     */
    public function getReportingLocationCode()
    {
        return $this->container['reporting_location_code'];
    }

    /**
     * Sets reporting_location_code
     *
     * @param string $reporting_location_code For customers who use [location-based tax reporting](https://developer.avalara.com/avatax/dev-guide/locations/location-based-reporting),  this field controls how this transaction will be filed for multi-location tax filings.                If you specify a non-null value for this field, AvaTax will ensure that this transaction is reported on the tax return associated  with the [LocationModel](https://developer.avalara.com/api-reference/avatax/rest/v2/models/LocationModel/) identified by this code.                This field does not affect any addresses for the transaction.  It only controls the tax filing behavior of this transaction.                If you are looking for information about how to set up addresses for a transaction, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.
     *
     * @return $this
     */
    public function setReportingLocationCode($reporting_location_code)
    {
        $this->container['reporting_location_code'] = $reporting_location_code;

        return $this;
    }

    /**
     * Gets purchase_order_no
     *
     * @return string
     */
    public function getPurchaseOrderNo()
    {
        return $this->container['purchase_order_no'];
    }

    /**
     * Sets purchase_order_no
     *
     * @param string $purchase_order_no The customer-supplied purchase order number of this transaction.
     *
     * @return $this
     */
    public function setPurchaseOrderNo($purchase_order_no)
    {
        $this->container['purchase_order_no'] = $purchase_order_no;

        return $this;
    }

    /**
     * Gets reference_code
     *
     * @return string
     */
    public function getReferenceCode()
    {
        return $this->container['reference_code'];
    }

    /**
     * Sets reference_code
     *
     * @param string $reference_code A user-defined reference code for this transaction.
     *
     * @return $this
     */
    public function setReferenceCode($reference_code)
    {
        $this->container['reference_code'] = $reference_code;

        return $this;
    }

    /**
     * Gets salesperson_code
     *
     * @return string
     */
    public function getSalespersonCode()
    {
        return $this->container['salesperson_code'];
    }

    /**
     * Sets salesperson_code
     *
     * @param string $salesperson_code The salesperson who provided this transaction.  Not required.
     *
     * @return $this
     */
    public function setSalespersonCode($salesperson_code)
    {
        $this->container['salesperson_code'] = $salesperson_code;

        return $this;
    }

    /**
     * Gets tax_override_type
     *
     * @return string
     */
    public function getTaxOverrideType()
    {
        return $this->container['tax_override_type'];
    }

    /**
     * Sets tax_override_type
     *
     * @param string $tax_override_type If a tax override was applied to this transaction, indicates what type of tax override was applied.
     *
     * @return $this
     */
    public function setTaxOverrideType($tax_override_type)
    {
        $allowedValues = $this->getTaxOverrideTypeAllowableValues();
        if (!is_null($tax_override_type) && !in_array($tax_override_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_override_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_override_type'] = $tax_override_type;

        return $this;
    }

    /**
     * Gets tax_override_amount
     *
     * @return double
     */
    public function getTaxOverrideAmount()
    {
        return $this->container['tax_override_amount'];
    }

    /**
     * Sets tax_override_amount
     *
     * @param double $tax_override_amount If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer.
     *
     * @return $this
     */
    public function setTaxOverrideAmount($tax_override_amount)
    {
        $this->container['tax_override_amount'] = $tax_override_amount;

        return $this;
    }

    /**
     * Gets tax_override_reason
     *
     * @return string
     */
    public function getTaxOverrideReason()
    {
        return $this->container['tax_override_reason'];
    }

    /**
     * Sets tax_override_reason
     *
     * @param string $tax_override_reason If a tax override was applied to this transaction, indicates the reason for the tax override.
     *
     * @return $this
     */
    public function setTaxOverrideReason($tax_override_reason)
    {
        $this->container['tax_override_reason'] = $tax_override_reason;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount The total amount of this transaction.
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_exempt
     *
     * @return double
     */
    public function getTotalExempt()
    {
        return $this->container['total_exempt'];
    }

    /**
     * Sets total_exempt
     *
     * @param double $total_exempt The amount of this transaction that was exempt.
     *
     * @return $this
     */
    public function setTotalExempt($total_exempt)
    {
        $this->container['total_exempt'] = $total_exempt;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return double
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param double $total_discount The total amount of discounts applied to all lines within this transaction.
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double $total_tax The total tax for all lines in this transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  may be different than the amount of tax calculated by AvaTax.  The amount of tax calculated by  AvaTax will be stored in the `totalTaxCalculated` field, whereas this field will contain the  total tax that was charged on the transaction.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_taxable
     *
     * @return double
     */
    public function getTotalTaxable()
    {
        return $this->container['total_taxable'];
    }

    /**
     * Sets total_taxable
     *
     * @param double $total_taxable The portion of the total amount of this transaction that was taxable.
     *
     * @return $this
     */
    public function setTotalTaxable($total_taxable)
    {
        $this->container['total_taxable'] = $total_taxable;

        return $this;
    }

    /**
     * Gets total_tax_calculated
     *
     * @return double
     */
    public function getTotalTaxCalculated()
    {
        return $this->container['total_tax_calculated'];
    }

    /**
     * Sets total_tax_calculated
     *
     * @param double $total_tax_calculated The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount` for any lines in this transaction, this value  will represent the amount that AvaTax calculated for this transaction without applying the override.  The field `totalTax` will be the total amount of tax after all overrides are applied.                You can compare the `totalTax` and `totalTaxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.
     *
     * @return $this
     */
    public function setTotalTaxCalculated($total_tax_calculated)
    {
        $this->container['total_tax_calculated'] = $total_tax_calculated;

        return $this;
    }

    /**
     * Gets adjustment_reason
     *
     * @return string
     */
    public function getAdjustmentReason()
    {
        return $this->container['adjustment_reason'];
    }

    /**
     * Sets adjustment_reason
     *
     * @param string $adjustment_reason If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.
     *
     * @return $this
     */
    public function setAdjustmentReason($adjustment_reason)
    {
        $allowedValues = $this->getAdjustmentReasonAllowableValues();
        if (!is_null($adjustment_reason) && !in_array($adjustment_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'adjustment_reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['adjustment_reason'] = $adjustment_reason;

        return $this;
    }

    /**
     * Gets adjustment_description
     *
     * @return string
     */
    public function getAdjustmentDescription()
    {
        return $this->container['adjustment_description'];
    }

    /**
     * Sets adjustment_description
     *
     * @param string $adjustment_description If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted.
     *
     * @return $this
     */
    public function setAdjustmentDescription($adjustment_description)
    {
        $this->container['adjustment_description'] = $adjustment_description;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting.
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The two-or-three character ISO region code of the region for this transaction.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The two-character ISO 3166 code of the country for this transaction.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling TransactionModel., must be smaller than or equal to 2.');
        }
        if (!is_null($country) && (mb_strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling TransactionModel., must be bigger than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction  is adjusted.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version The software version used to calculate this transaction.
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets origin_address_id
     *
     * @return int
     */
    public function getOriginAddressId()
    {
        return $this->container['origin_address_id'];
    }

    /**
     * Sets origin_address_id
     *
     * @param int $origin_address_id The unique ID number of the origin address for this transaction.
     *
     * @return $this
     */
    public function setOriginAddressId($origin_address_id)
    {
        $this->container['origin_address_id'] = $origin_address_id;

        return $this;
    }

    /**
     * Gets destination_address_id
     *
     * @return int
     */
    public function getDestinationAddressId()
    {
        return $this->container['destination_address_id'];
    }

    /**
     * Sets destination_address_id
     *
     * @param int $destination_address_id The unique ID number of the destination address for this transaction.
     *
     * @return $this
     */
    public function setDestinationAddressId($destination_address_id)
    {
        $this->container['destination_address_id'] = $destination_address_id;

        return $this;
    }

    /**
     * Gets exchange_rate_effective_date
     *
     * @return \DateTime
     */
    public function getExchangeRateEffectiveDate()
    {
        return $this->container['exchange_rate_effective_date'];
    }

    /**
     * Sets exchange_rate_effective_date
     *
     * @param \DateTime $exchange_rate_effective_date If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated.
     *
     * @return $this
     */
    public function setExchangeRateEffectiveDate($exchange_rate_effective_date)
    {
        $this->container['exchange_rate_effective_date'] = $exchange_rate_effective_date;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate If this transaction included foreign currency exchange, this is the exchange rate that was used.
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets is_seller_importer_of_record
     *
     * @return bool
     */
    public function getIsSellerImporterOfRecord()
    {
        return $this->container['is_seller_importer_of_record'];
    }

    /**
     * Sets is_seller_importer_of_record
     *
     * @param bool $is_seller_importer_of_record By default, the value is null, when the value is null, the value can be set at nexus level and used.  If the value is not null, it will override the value at nexus level.                If true, this seller was considered the importer of record of a product shipped internationally.                If this transaction is not an international transaction, this field may be left blank.                The \"importer of record\" is liable to pay customs and import duties for products shipped internationally.  If  you specify that the seller is the importer of record, then estimates of customs and import duties will be added  as tax details to the transaction.  Otherwise, the buyer is considered the importer of record, and customs  and import duties will not be added to the tax details for this transaction.
     *
     * @return $this
     */
    public function setIsSellerImporterOfRecord($is_seller_importer_of_record)
    {
        $this->container['is_seller_importer_of_record'] = $is_seller_importer_of_record;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of this transaction.  Field permits unicode values.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address associated with this transaction.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets business_identification_no
     *
     * @return string
     */
    public function getBusinessIdentificationNo()
    {
        return $this->container['business_identification_no'];
    }

    /**
     * Sets business_identification_no
     *
     * @param string $business_identification_no VAT business identification number used for this transaction.
     *
     * @return $this
     */
    public function setBusinessIdentificationNo($business_identification_no)
    {
        $this->container['business_identification_no'] = $business_identification_no;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets tax_date
     *
     * @return \DateTime
     */
    public function getTaxDate()
    {
        return $this->container['tax_date'];
    }

    /**
     * Sets tax_date
     *
     * @param \DateTime $tax_date Tax date for this transaction
     *
     * @return $this
     */
    public function setTaxDate($tax_date)
    {
        $this->container['tax_date'] = $tax_date;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLineModel[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLineModel[] $lines A list of line items in this transaction.  To fetch this list, add the query string `?$include=Lines` or `?$include=Details` to your URL.
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionAddressModel[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionAddressModel[] $addresses A list of line items in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.                For more information about transaction addresses, please see [Using Address Types](https://developer.avalara.com/avatax/dev-guide/customizing-transaction/address-types/)  in the AvaTax Developer Guide.
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets location_types
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLocationTypeModel[]
     */
    public function getLocationTypes()
    {
        return $this->container['location_types'];
    }

    /**
     * Sets location_types
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionLocationTypeModel[] $location_types A list of location types in this transaction.  To fetch this list, add the query string `?$include=Addresses` to your URL.
     *
     * @return $this
     */
    public function setLocationTypes($location_types)
    {
        $this->container['location_types'] = $location_types;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionSummary[]
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionSummary[] $summary Contains a summary of tax on this transaction.
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets tax_details_by_tax_type
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TaxDetailsByTaxType[]
     */
    public function getTaxDetailsByTaxType()
    {
        return $this->container['tax_details_by_tax_type'];
    }

    /**
     * Sets tax_details_by_tax_type
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TaxDetailsByTaxType[] $tax_details_by_tax_type Contains the tax details per tax type
     *
     * @return $this
     */
    public function setTaxDetailsByTaxType($tax_details_by_tax_type)
    {
        $this->container['tax_details_by_tax_type'] = $tax_details_by_tax_type;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionParameterModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\TransactionParameterModel[] $parameters Contains a list of extra parameters that were set when the transaction was created.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AvaTaxMessage[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AvaTaxMessage[] $messages List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call.
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets invoice_messages
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\InvoiceMessageModel[]
     */
    public function getInvoiceMessages()
    {
        return $this->container['invoice_messages'];
    }

    /**
     * Sets invoice_messages
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\InvoiceMessageModel[] $invoice_messages Invoice messages associated with this document. Currently, this stores legally-required VAT messages.
     *
     * @return $this
     */
    public function setInvoiceMessages($invoice_messages)
    {
        $this->container['invoice_messages'] = $invoice_messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


