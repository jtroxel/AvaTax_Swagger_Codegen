<?php
/**
 * AddressesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * AddressesModel Class Doc Comment
 *
 * @category Class
 * @description Information about all the addresses involved in this transaction.                For a physical in-person transaction at a retail point-of-sale location, please specify only one address using  the &#x60;singleLocation&#x60; field.                For a transaction that was shipped, delivered, or provided from an origin location such as a warehouse to  a destination location such as a customer, please specify the &#x60;shipFrom&#x60; and &#x60;shipTo&#x60; addresses.                In the United States, some jurisdictions recognize the address types &#x60;pointOfOrderOrigin&#x60; and &#x60;pointOfOrderAcceptance&#x60;.  These address types affect the sourcing models of some transactions.                If latitude and longitude information is provided for any of these addresses along with line, city, region, country and postal code information,  we will be using only latitude and longitude and will discard line, city, region, country and postal code information for the transaction.  Please ensure that you have the correct latitude/longitude information for the addresses prior to using the API.  If you provide either latitude or longitude information but not both, we will be using the line, city, region, country and postal code information for the addresses.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddressesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddressesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'single_location' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'ship_from' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'ship_to' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'point_of_order_origin' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'point_of_order_acceptance' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'goods_place_or_service_rendered' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo',
        'import' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'single_location' => null,
        'ship_from' => null,
        'ship_to' => null,
        'point_of_order_origin' => null,
        'point_of_order_acceptance' => null,
        'goods_place_or_service_rendered' => null,
        'import' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'single_location' => 'singleLocation',
        'ship_from' => 'shipFrom',
        'ship_to' => 'shipTo',
        'point_of_order_origin' => 'pointOfOrderOrigin',
        'point_of_order_acceptance' => 'pointOfOrderAcceptance',
        'goods_place_or_service_rendered' => 'goodsPlaceOrServiceRendered',
        'import' => 'import'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'single_location' => 'setSingleLocation',
        'ship_from' => 'setShipFrom',
        'ship_to' => 'setShipTo',
        'point_of_order_origin' => 'setPointOfOrderOrigin',
        'point_of_order_acceptance' => 'setPointOfOrderAcceptance',
        'goods_place_or_service_rendered' => 'setGoodsPlaceOrServiceRendered',
        'import' => 'setImport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'single_location' => 'getSingleLocation',
        'ship_from' => 'getShipFrom',
        'ship_to' => 'getShipTo',
        'point_of_order_origin' => 'getPointOfOrderOrigin',
        'point_of_order_acceptance' => 'getPointOfOrderAcceptance',
        'goods_place_or_service_rendered' => 'getGoodsPlaceOrServiceRendered',
        'import' => 'getImport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['single_location'] = isset($data['single_location']) ? $data['single_location'] : null;
        $this->container['ship_from'] = isset($data['ship_from']) ? $data['ship_from'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
        $this->container['point_of_order_origin'] = isset($data['point_of_order_origin']) ? $data['point_of_order_origin'] : null;
        $this->container['point_of_order_acceptance'] = isset($data['point_of_order_acceptance']) ? $data['point_of_order_acceptance'] : null;
        $this->container['goods_place_or_service_rendered'] = isset($data['goods_place_or_service_rendered']) ? $data['goods_place_or_service_rendered'] : null;
        $this->container['import'] = isset($data['import']) ? $data['import'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets single_location
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getSingleLocation()
    {
        return $this->container['single_location'];
    }

    /**
     * Sets single_location
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $single_location If this transaction occurred at a retail point-of-sale location, provide that single address here and leave  all other address types null.
     *
     * @return $this
     */
    public function setSingleLocation($single_location)
    {
        $this->container['single_location'] = $single_location;

        return $this;
    }

    /**
     * Gets ship_from
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getShipFrom()
    {
        return $this->container['ship_from'];
    }

    /**
     * Sets ship_from
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $ship_from The origination address where the products were shipped from, or from where the services originated.
     *
     * @return $this
     */
    public function setShipFrom($ship_from)
    {
        $this->container['ship_from'] = $ship_from;

        return $this;
    }

    /**
     * Gets ship_to
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $ship_to The destination address where the products were shipped to, or where the services were delivered.
     *
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }

    /**
     * Gets point_of_order_origin
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getPointOfOrderOrigin()
    {
        return $this->container['point_of_order_origin'];
    }

    /**
     * Sets point_of_order_origin
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $point_of_order_origin The place of business where you receive the customer's order.  This address type is valid in the United States only  and only applies to tangible personal property.
     *
     * @return $this
     */
    public function setPointOfOrderOrigin($point_of_order_origin)
    {
        $this->container['point_of_order_origin'] = $point_of_order_origin;

        return $this;
    }

    /**
     * Gets point_of_order_acceptance
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getPointOfOrderAcceptance()
    {
        return $this->container['point_of_order_acceptance'];
    }

    /**
     * Sets point_of_order_acceptance
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $point_of_order_acceptance The place of business where you accept/approve the customer’s order,  thereby becoming contractually obligated to make the sale.  This address type is valid in the United States only  and only applies to tangible personal property.
     *
     * @return $this
     */
    public function setPointOfOrderAcceptance($point_of_order_acceptance)
    {
        $this->container['point_of_order_acceptance'] = $point_of_order_acceptance;

        return $this;
    }

    /**
     * Gets goods_place_or_service_rendered
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getGoodsPlaceOrServiceRendered()
    {
        return $this->container['goods_place_or_service_rendered'];
    }

    /**
     * Sets goods_place_or_service_rendered
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $goods_place_or_service_rendered The address where the goods are located or where services are rendered.This address type is valid only for VAT transactions.
     *
     * @return $this
     */
    public function setGoodsPlaceOrServiceRendered($goods_place_or_service_rendered)
    {
        $this->container['goods_place_or_service_rendered'] = $goods_place_or_service_rendered;

        return $this;
    }

    /**
     * Gets import
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo
     */
    public function getImport()
    {
        return $this->container['import'];
    }

    /**
     * Sets import
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AddressLocationInfo $import The address of the buyer importing a good from another country.This address type is valid only for VAT transactions.
     *
     * @return $this
     */
    public function setImport($import)
    {
        $this->container['import'] = $import;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


