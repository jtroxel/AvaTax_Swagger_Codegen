<?php
/**
 * TransactionSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TransactionSummary Class Doc Comment
 *
 * @category Class
 * @description Summary information about an overall transaction.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country' => 'string',
        'region' => 'string',
        'juris_type' => 'string',
        'juris_code' => 'string',
        'juris_name' => 'string',
        'tax_authority_type' => 'int',
        'state_assigned_no' => 'string',
        'tax_type' => 'string',
        'tax_sub_type' => 'string',
        'tax_name' => 'string',
        'tax_group' => 'string',
        'rate_type' => 'string',
        'rate_type_code' => 'string',
        'taxable' => 'double',
        'rate' => 'double',
        'tax' => 'double',
        'tax_calculated' => 'double',
        'non_taxable' => 'double',
        'exemption' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country' => null,
        'region' => null,
        'juris_type' => null,
        'juris_code' => null,
        'juris_name' => null,
        'tax_authority_type' => 'int32',
        'state_assigned_no' => null,
        'tax_type' => null,
        'tax_sub_type' => null,
        'tax_name' => null,
        'tax_group' => null,
        'rate_type' => null,
        'rate_type_code' => null,
        'taxable' => 'double',
        'rate' => 'double',
        'tax' => 'double',
        'tax_calculated' => 'double',
        'non_taxable' => 'double',
        'exemption' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'region' => 'region',
        'juris_type' => 'jurisType',
        'juris_code' => 'jurisCode',
        'juris_name' => 'jurisName',
        'tax_authority_type' => 'taxAuthorityType',
        'state_assigned_no' => 'stateAssignedNo',
        'tax_type' => 'taxType',
        'tax_sub_type' => 'taxSubType',
        'tax_name' => 'taxName',
        'tax_group' => 'taxGroup',
        'rate_type' => 'rateType',
        'rate_type_code' => 'rateTypeCode',
        'taxable' => 'taxable',
        'rate' => 'rate',
        'tax' => 'tax',
        'tax_calculated' => 'taxCalculated',
        'non_taxable' => 'nonTaxable',
        'exemption' => 'exemption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'region' => 'setRegion',
        'juris_type' => 'setJurisType',
        'juris_code' => 'setJurisCode',
        'juris_name' => 'setJurisName',
        'tax_authority_type' => 'setTaxAuthorityType',
        'state_assigned_no' => 'setStateAssignedNo',
        'tax_type' => 'setTaxType',
        'tax_sub_type' => 'setTaxSubType',
        'tax_name' => 'setTaxName',
        'tax_group' => 'setTaxGroup',
        'rate_type' => 'setRateType',
        'rate_type_code' => 'setRateTypeCode',
        'taxable' => 'setTaxable',
        'rate' => 'setRate',
        'tax' => 'setTax',
        'tax_calculated' => 'setTaxCalculated',
        'non_taxable' => 'setNonTaxable',
        'exemption' => 'setExemption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'region' => 'getRegion',
        'juris_type' => 'getJurisType',
        'juris_code' => 'getJurisCode',
        'juris_name' => 'getJurisName',
        'tax_authority_type' => 'getTaxAuthorityType',
        'state_assigned_no' => 'getStateAssignedNo',
        'tax_type' => 'getTaxType',
        'tax_sub_type' => 'getTaxSubType',
        'tax_name' => 'getTaxName',
        'tax_group' => 'getTaxGroup',
        'rate_type' => 'getRateType',
        'rate_type_code' => 'getRateTypeCode',
        'taxable' => 'getTaxable',
        'rate' => 'getRate',
        'tax' => 'getTax',
        'tax_calculated' => 'getTaxCalculated',
        'non_taxable' => 'getNonTaxable',
        'exemption' => 'getExemption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURIS_TYPE_COUNTRY = 'Country';
    const JURIS_TYPE_STATE = 'State';
    const JURIS_TYPE_COUNTY = 'County';
    const JURIS_TYPE_CITY = 'City';
    const JURIS_TYPE_SPECIAL = 'Special';
    const RATE_TYPE_REDUCED_A = 'ReducedA';
    const RATE_TYPE_REDUCED_B = 'ReducedB';
    const RATE_TYPE_FOOD = 'Food';
    const RATE_TYPE_GENERAL = 'General';
    const RATE_TYPE_INCREASED_STANDARD = 'IncreasedStandard';
    const RATE_TYPE_LINEN_RENTAL = 'LinenRental';
    const RATE_TYPE_MEDICAL = 'Medical';
    const RATE_TYPE_PARKING = 'Parking';
    const RATE_TYPE_SUPER_REDUCED = 'SuperReduced';
    const RATE_TYPE_REDUCED_R = 'ReducedR';
    const RATE_TYPE_STANDARD = 'Standard';
    const RATE_TYPE_LEASING = 'Leasing';
    const RATE_TYPE_LEASING_LOW = 'LeasingLow';
    const RATE_TYPE_SERVICES = 'Services';
    const RATE_TYPE_ZERO = 'Zero';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisTypeAllowableValues()
    {
        return [
            self::JURIS_TYPE_COUNTRY,
            self::JURIS_TYPE_STATE,
            self::JURIS_TYPE_COUNTY,
            self::JURIS_TYPE_CITY,
            self::JURIS_TYPE_SPECIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTypeAllowableValues()
    {
        return [
            self::RATE_TYPE_REDUCED_A,
            self::RATE_TYPE_REDUCED_B,
            self::RATE_TYPE_FOOD,
            self::RATE_TYPE_GENERAL,
            self::RATE_TYPE_INCREASED_STANDARD,
            self::RATE_TYPE_LINEN_RENTAL,
            self::RATE_TYPE_MEDICAL,
            self::RATE_TYPE_PARKING,
            self::RATE_TYPE_SUPER_REDUCED,
            self::RATE_TYPE_REDUCED_R,
            self::RATE_TYPE_STANDARD,
            self::RATE_TYPE_LEASING,
            self::RATE_TYPE_LEASING_LOW,
            self::RATE_TYPE_SERVICES,
            self::RATE_TYPE_ZERO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['juris_type'] = isset($data['juris_type']) ? $data['juris_type'] : null;
        $this->container['juris_code'] = isset($data['juris_code']) ? $data['juris_code'] : null;
        $this->container['juris_name'] = isset($data['juris_name']) ? $data['juris_name'] : null;
        $this->container['tax_authority_type'] = isset($data['tax_authority_type']) ? $data['tax_authority_type'] : null;
        $this->container['state_assigned_no'] = isset($data['state_assigned_no']) ? $data['state_assigned_no'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['tax_sub_type'] = isset($data['tax_sub_type']) ? $data['tax_sub_type'] : null;
        $this->container['tax_name'] = isset($data['tax_name']) ? $data['tax_name'] : null;
        $this->container['tax_group'] = isset($data['tax_group']) ? $data['tax_group'] : null;
        $this->container['rate_type'] = isset($data['rate_type']) ? $data['rate_type'] : null;
        $this->container['rate_type_code'] = isset($data['rate_type_code']) ? $data['rate_type_code'] : null;
        $this->container['taxable'] = isset($data['taxable']) ? $data['taxable'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['tax_calculated'] = isset($data['tax_calculated']) ? $data['tax_calculated'] : null;
        $this->container['non_taxable'] = isset($data['non_taxable']) ? $data['non_taxable'] : null;
        $this->container['exemption'] = isset($data['exemption']) ? $data['exemption'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJurisTypeAllowableValues();
        if (!is_null($this->container['juris_type']) && !in_array($this->container['juris_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'juris_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($this->container['rate_type']) && !in_array($this->container['rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rate_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Two character ISO-3166 country code.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Two or three character ISO region, state or province code, if applicable.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets juris_type
     *
     * @return string
     */
    public function getJurisType()
    {
        return $this->container['juris_type'];
    }

    /**
     * Sets juris_type
     *
     * @param string $juris_type The type of jurisdiction that collects this tax.
     *
     * @return $this
     */
    public function setJurisType($juris_type)
    {
        $allowedValues = $this->getJurisTypeAllowableValues();
        if (!is_null($juris_type) && !in_array($juris_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'juris_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['juris_type'] = $juris_type;

        return $this;
    }

    /**
     * Gets juris_code
     *
     * @return string
     */
    public function getJurisCode()
    {
        return $this->container['juris_code'];
    }

    /**
     * Sets juris_code
     *
     * @param string $juris_code Jurisdiction Code for the taxing jurisdiction
     *
     * @return $this
     */
    public function setJurisCode($juris_code)
    {
        $this->container['juris_code'] = $juris_code;

        return $this;
    }

    /**
     * Gets juris_name
     *
     * @return string
     */
    public function getJurisName()
    {
        return $this->container['juris_name'];
    }

    /**
     * Sets juris_name
     *
     * @param string $juris_name The name of the jurisdiction that collects this tax.
     *
     * @return $this
     */
    public function setJurisName($juris_name)
    {
        $this->container['juris_name'] = $juris_name;

        return $this;
    }

    /**
     * Gets tax_authority_type
     *
     * @return int
     */
    public function getTaxAuthorityType()
    {
        return $this->container['tax_authority_type'];
    }

    /**
     * Sets tax_authority_type
     *
     * @param int $tax_authority_type The unique ID of the Tax Authority Type that collects this tax.
     *
     * @return $this
     */
    public function setTaxAuthorityType($tax_authority_type)
    {
        $this->container['tax_authority_type'] = $tax_authority_type;

        return $this;
    }

    /**
     * Gets state_assigned_no
     *
     * @return string
     */
    public function getStateAssignedNo()
    {
        return $this->container['state_assigned_no'];
    }

    /**
     * Sets state_assigned_no
     *
     * @param string $state_assigned_no The state assigned number of the jurisdiction that collects this tax.
     *
     * @return $this
     */
    public function setStateAssignedNo($state_assigned_no)
    {
        $this->container['state_assigned_no'] = $state_assigned_no;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type The tax type of this tax.
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax_sub_type
     *
     * @return string
     */
    public function getTaxSubType()
    {
        return $this->container['tax_sub_type'];
    }

    /**
     * Sets tax_sub_type
     *
     * @param string $tax_sub_type The tax subtype of this tax.
     *
     * @return $this
     */
    public function setTaxSubType($tax_sub_type)
    {
        $this->container['tax_sub_type'] = $tax_sub_type;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string $tax_name The name of the tax.
     *
     * @return $this
     */
    public function setTaxName($tax_name)
    {
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets tax_group
     *
     * @return string
     */
    public function getTaxGroup()
    {
        return $this->container['tax_group'];
    }

    /**
     * Sets tax_group
     *
     * @param string $tax_group Group code when special grouping is enabled.
     *
     * @return $this
     */
    public function setTaxGroup($tax_group)
    {
        $this->container['tax_group'] = $tax_group;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string $rate_type DEPRECATED - Date: 3/1/2018, Version: 18.3, Message: Please use rateTypeCode instead.  Indicates the tax rate type.
     *
     * @return $this
     */
    public function setRateType($rate_type)
    {
        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($rate_type) && !in_array($rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rate_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets rate_type_code
     *
     * @return string
     */
    public function getRateTypeCode()
    {
        return $this->container['rate_type_code'];
    }

    /**
     * Sets rate_type_code
     *
     * @param string $rate_type_code Indicates the code of the rate type.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.
     *
     * @return $this
     */
    public function setRateTypeCode($rate_type_code)
    {
        $this->container['rate_type_code'] = $rate_type_code;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return double
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param double $taxable Tax Base - The adjusted taxable amount.
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate Tax Rate - The rate of taxation, as a fraction of the amount.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax Tax amount - The calculated tax (Base * Rate).
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets tax_calculated
     *
     * @return double
     */
    public function getTaxCalculated()
    {
        return $this->container['tax_calculated'];
    }

    /**
     * Sets tax_calculated
     *
     * @param double $tax_calculated The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `TaxCalculated` field which  represents the amount of tax that AvaTax calculated for this transaction without override.                You can use this for comparison.
     *
     * @return $this
     */
    public function setTaxCalculated($tax_calculated)
    {
        $this->container['tax_calculated'] = $tax_calculated;

        return $this;
    }

    /**
     * Gets non_taxable
     *
     * @return double
     */
    public function getNonTaxable()
    {
        return $this->container['non_taxable'];
    }

    /**
     * Sets non_taxable
     *
     * @param double $non_taxable The amount of the transaction that was non-taxable.
     *
     * @return $this
     */
    public function setNonTaxable($non_taxable)
    {
        $this->container['non_taxable'] = $non_taxable;

        return $this;
    }

    /**
     * Gets exemption
     *
     * @return double
     */
    public function getExemption()
    {
        return $this->container['exemption'];
    }

    /**
     * Sets exemption
     *
     * @param double $exemption The amount of the transaction that was exempt.
     *
     * @return $this
     */
    public function setExemption($exemption)
    {
        $this->container['exemption'] = $exemption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


