<?php
/**
 * SkyscraperStatusModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * SkyscraperStatusModel Class Doc Comment
 *
 * @category Class
 * @description Represents a list of statuses of returns available in skyscraper
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SkyscraperStatusModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SkyscraperStatusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'tax_form_codes' => 'string[]',
        'country' => 'string',
        'scraper_type' => 'string',
        'is_available' => 'bool',
        'expected_response_time' => 'string',
        'message' => 'string',
        'required_filing_calendar_data_fields' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\RequiredFilingCalendarDataFieldModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'tax_form_codes' => null,
        'country' => null,
        'scraper_type' => null,
        'is_available' => null,
        'expected_response_time' => null,
        'message' => null,
        'required_filing_calendar_data_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'tax_form_codes' => 'taxFormCodes',
        'country' => 'country',
        'scraper_type' => 'scraperType',
        'is_available' => 'isAvailable',
        'expected_response_time' => 'expectedResponseTime',
        'message' => 'message',
        'required_filing_calendar_data_fields' => 'requiredFilingCalendarDataFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'tax_form_codes' => 'setTaxFormCodes',
        'country' => 'setCountry',
        'scraper_type' => 'setScraperType',
        'is_available' => 'setIsAvailable',
        'expected_response_time' => 'setExpectedResponseTime',
        'message' => 'setMessage',
        'required_filing_calendar_data_fields' => 'setRequiredFilingCalendarDataFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'tax_form_codes' => 'getTaxFormCodes',
        'country' => 'getCountry',
        'scraper_type' => 'getScraperType',
        'is_available' => 'getIsAvailable',
        'expected_response_time' => 'getExpectedResponseTime',
        'message' => 'getMessage',
        'required_filing_calendar_data_fields' => 'getRequiredFilingCalendarDataFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCRAPER_TYPE_LOGIN = 'Login';
    const SCRAPER_TYPE_CUSTOMER_DOR_DATA = 'CustomerDorData';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScraperTypeAllowableValues()
    {
        return [
            self::SCRAPER_TYPE_LOGIN,
            self::SCRAPER_TYPE_CUSTOMER_DOR_DATA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tax_form_codes'] = isset($data['tax_form_codes']) ? $data['tax_form_codes'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['scraper_type'] = isset($data['scraper_type']) ? $data['scraper_type'] : null;
        $this->container['is_available'] = isset($data['is_available']) ? $data['is_available'] : null;
        $this->container['expected_response_time'] = isset($data['expected_response_time']) ? $data['expected_response_time'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['required_filing_calendar_data_fields'] = isset($data['required_filing_calendar_data_fields']) ? $data['required_filing_calendar_data_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScraperTypeAllowableValues();
        if (!is_null($this->container['scraper_type']) && !in_array($this->container['scraper_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scraper_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The specific name of the returns available in skyscraper
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tax_form_codes
     *
     * @return string[]
     */
    public function getTaxFormCodes()
    {
        return $this->container['tax_form_codes'];
    }

    /**
     * Sets tax_form_codes
     *
     * @param string[] $tax_form_codes The tax form codes available to file through skyscrper
     *
     * @return $this
     */
    public function setTaxFormCodes($tax_form_codes)
    {
        $this->container['tax_form_codes'] = $tax_form_codes;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the returns
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets scraper_type
     *
     * @return string
     */
    public function getScraperType()
    {
        return $this->container['scraper_type'];
    }

    /**
     * Sets scraper_type
     *
     * @param string $scraper_type The Scraper type
     *
     * @return $this
     */
    public function setScraperType($scraper_type)
    {
        $allowedValues = $this->getScraperTypeAllowableValues();
        if (!is_null($scraper_type) && !in_array($scraper_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scraper_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scraper_type'] = $scraper_type;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool $is_available Indicates if the return is currently available
     *
     * @return $this
     */
    public function setIsAvailable($is_available)
    {
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets expected_response_time
     *
     * @return string
     */
    public function getExpectedResponseTime()
    {
        return $this->container['expected_response_time'];
    }

    /**
     * Sets expected_response_time
     *
     * @param string $expected_response_time The expected response time of the call
     *
     * @return $this
     */
    public function setExpectedResponseTime($expected_response_time)
    {
        $this->container['expected_response_time'] = $expected_response_time;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Message on the returns
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets required_filing_calendar_data_fields
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\RequiredFilingCalendarDataFieldModel[]
     */
    public function getRequiredFilingCalendarDataFields()
    {
        return $this->container['required_filing_calendar_data_fields'];
    }

    /**
     * Sets required_filing_calendar_data_fields
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\RequiredFilingCalendarDataFieldModel[] $required_filing_calendar_data_fields A list of required fields to file
     *
     * @return $this
     */
    public function setRequiredFilingCalendarDataFields($required_filing_calendar_data_fields)
    {
        $this->container['required_filing_calendar_data_fields'] = $required_filing_calendar_data_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


