<?php
/**
 * HsCodeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * HsCodeModel Class Doc Comment
 *
 * @category Class
 * @description Describes an element in the harmonized tariff system.                According to the [United States International Trade Commission](https://www.usitc.gov), the harmonized tariff schedule is defined as follows:                The HTS is a U.S. nomenclature system used to classify traded goods based on their material composition, product name, and/or intended  function. The HTS is designed so that each article falls into only one category. It is divided into chapters, each of which has a 2-digit  number. Each product category within the various chapters is designated by 4, 6, 8, or 10 digits. The 4-digit categories are called  \&quot;headings.\&quot; The 6-, 8- and 10-digit classifications are called \&quot;subheadings.\&quot;                Within AvaTax, the &#x60;HsCodeModel&#x60; object can refer to sections, chapters, headings, subheadings, or articles.  Each object represents one  classification.  Many of these objects have child objects underneath them; these child objects are more specific than their parent objects.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HsCodeModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HsCodeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hs_code' => 'string',
        'id' => 'int',
        'parent_hs_code_id' => 'int',
        'description' => 'string',
        'system' => 'string',
        'destination_country' => 'string',
        'eff_date' => '\DateTime',
        'end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hs_code' => null,
        'id' => 'int64',
        'parent_hs_code_id' => 'int64',
        'description' => null,
        'system' => null,
        'destination_country' => null,
        'eff_date' => 'date',
        'end_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hs_code' => 'hsCode',
        'id' => 'id',
        'parent_hs_code_id' => 'parentHsCodeId',
        'description' => 'description',
        'system' => 'system',
        'destination_country' => 'destinationCountry',
        'eff_date' => 'effDate',
        'end_date' => 'endDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hs_code' => 'setHsCode',
        'id' => 'setId',
        'parent_hs_code_id' => 'setParentHsCodeId',
        'description' => 'setDescription',
        'system' => 'setSystem',
        'destination_country' => 'setDestinationCountry',
        'eff_date' => 'setEffDate',
        'end_date' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hs_code' => 'getHsCode',
        'id' => 'getId',
        'parent_hs_code_id' => 'getParentHsCodeId',
        'description' => 'getDescription',
        'system' => 'getSystem',
        'destination_country' => 'getDestinationCountry',
        'eff_date' => 'getEffDate',
        'end_date' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hs_code'] = isset($data['hs_code']) ? $data['hs_code'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parent_hs_code_id'] = isset($data['parent_hs_code_id']) ? $data['parent_hs_code_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['system'] = isset($data['system']) ? $data['system'] : null;
        $this->container['destination_country'] = isset($data['destination_country']) ? $data['destination_country'] : null;
        $this->container['eff_date'] = isset($data['eff_date']) ? $data['eff_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['hs_code']) && (mb_strlen($this->container['hs_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'hs_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['hs_code']) && (mb_strlen($this->container['hs_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'hs_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hs_code
     *
     * @return string
     */
    public function getHsCode()
    {
        return $this->container['hs_code'];
    }

    /**
     * Sets hs_code
     *
     * @param string $hs_code The harmonized tariff system code for this section and chapter.                A full HS code contains more than six characters.  Partial HS codes with two, four, or six characters may have child codes underneath them.  A child code is one that contains greater specificity than a parent code.  It is recommended that when you identify a product you use  the most detailed code available to identify it.                Top level sections do not have HS Codes.
     *
     * @return $this
     */
    public function setHsCode($hs_code)
    {
        if (!is_null($hs_code) && (mb_strlen($hs_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $hs_code when calling HsCodeModel., must be smaller than or equal to 25.');
        }
        if (!is_null($hs_code) && (mb_strlen($hs_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $hs_code when calling HsCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['hs_code'] = $hs_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id A unique identifier for this harmonized tariff system code.                To search for a list of child codes underneath a specific HS code, search for codes where the child's `parentHsCodeId` value matches the parent's `id` value.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parent_hs_code_id
     *
     * @return int
     */
    public function getParentHsCodeId()
    {
        return $this->container['parent_hs_code_id'];
    }

    /**
     * Sets parent_hs_code_id
     *
     * @param int $parent_hs_code_id The unique ID number of the parent HS code or HS code prefix.                To search for a list of child codes underneath a specific HS code, search for codes where the child's `parentHsCodeId` value matches the parent's `id` value.
     *
     * @return $this
     */
    public function setParentHsCodeId($parent_hs_code_id)
    {
        $this->container['parent_hs_code_id'] = $parent_hs_code_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A human readable description that identifies Code descriptive text for this Section, Chapter, Heading, or Subheading.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets system
     *
     * @return string
     */
    public function getSystem()
    {
        return $this->container['system'];
    }

    /**
     * Sets system
     *
     * @param string $system The system to which this HS code belongs.
     *
     * @return $this
     */
    public function setSystem($system)
    {
        $this->container['system'] = $system;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country The destination country identified with this HS Code.  This value applies when certain products are classified in specific ways by  bilateral trade agreements.
     *
     * @return $this
     */
    public function setDestinationCountry($destination_country)
    {
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets eff_date
     *
     * @return \DateTime
     */
    public function getEffDate()
    {
        return $this->container['eff_date'];
    }

    /**
     * Sets eff_date
     *
     * @param \DateTime $eff_date For codes that have been expired or defined on specific dates, this value indicates the earliest  date for which this code is considered valid.                If this value is null, this code can be used for any valid date earlier than its end date.
     *
     * @return $this
     */
    public function setEffDate($eff_date)
    {
        $this->container['eff_date'] = $eff_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date For codes that have been expired or defined on specific dates, this value indicates the latest  date for which this code is considered valid.                If this value is null, this code can be used for any valid date later than its effective date.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


