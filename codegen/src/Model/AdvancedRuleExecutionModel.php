<?php
/**
 * AdvancedRuleExecutionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * AdvancedRuleExecutionModel Class Doc Comment
 *
 * @category Class
 * @description Model representing an execution of an advanced rule for a company
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdvancedRuleExecutionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AdvancedRuleExecutionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rule_execution_id' => 'string',
        'name' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'enabled' => 'bool',
        'continue_on_error' => 'bool',
        'rule_id' => 'string',
        'rule' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\AdvancedRuleModel',
        'customer_data' => 'string',
        'customer_data_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rule_execution_id' => null,
        'name' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'enabled' => null,
        'continue_on_error' => null,
        'rule_id' => null,
        'rule' => null,
        'customer_data' => null,
        'customer_data_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rule_execution_id' => 'ruleExecutionId',
        'name' => 'name',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'enabled' => 'enabled',
        'continue_on_error' => 'continueOnError',
        'rule_id' => 'ruleId',
        'rule' => 'rule',
        'customer_data' => 'customerData',
        'customer_data_id' => 'customerDataId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rule_execution_id' => 'setRuleExecutionId',
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'enabled' => 'setEnabled',
        'continue_on_error' => 'setContinueOnError',
        'rule_id' => 'setRuleId',
        'rule' => 'setRule',
        'customer_data' => 'setCustomerData',
        'customer_data_id' => 'setCustomerDataId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rule_execution_id' => 'getRuleExecutionId',
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'enabled' => 'getEnabled',
        'continue_on_error' => 'getContinueOnError',
        'rule_id' => 'getRuleId',
        'rule' => 'getRule',
        'customer_data' => 'getCustomerData',
        'customer_data_id' => 'getCustomerDataId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rule_execution_id'] = isset($data['rule_execution_id']) ? $data['rule_execution_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['continue_on_error'] = isset($data['continue_on_error']) ? $data['continue_on_error'] : null;
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['customer_data'] = isset($data['customer_data']) ? $data['customer_data'] : null;
        $this->container['customer_data_id'] = isset($data['customer_data_id']) ? $data['customer_data_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['rule_id'] === null) {
            $invalidProperties[] = "'rule_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rule_execution_id
     *
     * @return string
     */
    public function getRuleExecutionId()
    {
        return $this->container['rule_execution_id'];
    }

    /**
     * Sets rule_execution_id
     *
     * @param string $rule_execution_id Rule execution unique identifier
     *
     * @return $this
     */
    public function setRuleExecutionId($rule_execution_id)
    {
        $this->container['rule_execution_id'] = $rule_execution_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of rule execution
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Date rule execution starts
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Date rule execution ends
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Is rule execution enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets continue_on_error
     *
     * @return bool
     */
    public function getContinueOnError()
    {
        return $this->container['continue_on_error'];
    }

    /**
     * Sets continue_on_error
     *
     * @param bool $continue_on_error Should we keep running if we hit an exception
     *
     * @return $this
     */
    public function setContinueOnError($continue_on_error)
    {
        $this->container['continue_on_error'] = $continue_on_error;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string $rule_id Unique identifier of rule to execute
     *
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\AdvancedRuleModel
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\AdvancedRuleModel $rule Advanced rule to execute
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets customer_data
     *
     * @return string
     */
    public function getCustomerData()
    {
        return $this->container['customer_data'];
    }

    /**
     * Sets customer_data
     *
     * @param string $customer_data Json data used for rule execution
     *
     * @return $this
     */
    public function setCustomerData($customer_data)
    {
        $this->container['customer_data'] = $customer_data;

        return $this;
    }

    /**
     * Gets customer_data_id
     *
     * @return string
     */
    public function getCustomerDataId()
    {
        return $this->container['customer_data_id'];
    }

    /**
     * Sets customer_data_id
     *
     * @param string $customer_data_id Unique identifier of customer data used in rule execution
     *
     * @return $this
     */
    public function setCustomerDataId($customer_data_id)
    {
        $this->container['customer_data_id'] = $customer_data_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


