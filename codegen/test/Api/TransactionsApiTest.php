<?php
/**
 * TransactionsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger;

use \Together\Taxes\Provider\AvaTax\Swagger\Configuration;
use \Together\Taxes\Provider\AvaTax\Swagger\ApiException;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TransactionsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addLines
     *
     * Add lines to an existing unlocked transaction.
     *
     */
    public function testAddLines()
    {
    }

    /**
     * Test case for adjustTransaction
     *
     * Correct a previously created transaction.
     *
     */
    public function testAdjustTransaction()
    {
    }

    /**
     * Test case for auditTransaction
     *
     * Get audit information about a transaction.
     *
     */
    public function testAuditTransaction()
    {
    }

    /**
     * Test case for auditTransactionWithType
     *
     * Get audit information about a transaction.
     *
     */
    public function testAuditTransactionWithType()
    {
    }

    /**
     * Test case for bulkLockTransaction
     *
     * Lock a set of documents.
     *
     */
    public function testBulkLockTransaction()
    {
    }

    /**
     * Test case for changeTransactionCode
     *
     * Change a transaction's code.
     *
     */
    public function testChangeTransactionCode()
    {
    }

    /**
     * Test case for commitTransaction
     *
     * Commit a transaction for reporting.
     *
     */
    public function testCommitTransaction()
    {
    }

    /**
     * Test case for createOrAdjustTransaction
     *
     * Create or adjust a transaction.
     *
     */
    public function testCreateOrAdjustTransaction()
    {
    }

    /**
     * Test case for createTransaction
     *
     * Create a new transaction.
     *
     */
    public function testCreateTransaction()
    {
    }

    /**
     * Test case for deleteLines
     *
     * Remove lines from an existing unlocked transaction.
     *
     */
    public function testDeleteLines()
    {
    }

    /**
     * Test case for getTransactionByCode
     *
     * Retrieve a single transaction by code.
     *
     */
    public function testGetTransactionByCode()
    {
    }

    /**
     * Test case for getTransactionByCodeAndType
     *
     * Retrieve a single transaction by code.
     *
     */
    public function testGetTransactionByCodeAndType()
    {
    }

    /**
     * Test case for getTransactionById
     *
     * Retrieve a single transaction by ID.
     *
     */
    public function testGetTransactionById()
    {
    }

    /**
     * Test case for listTransactionsByCompany
     *
     * Retrieve all transactions.
     *
     */
    public function testListTransactionsByCompany()
    {
    }

    /**
     * Test case for lockTransaction
     *
     * Lock a single transaction.
     *
     */
    public function testLockTransaction()
    {
    }

    /**
     * Test case for refundTransaction
     *
     * Create a refund for a transaction.
     *
     */
    public function testRefundTransaction()
    {
    }

    /**
     * Test case for settleTransaction
     *
     * Perform multiple actions on a transaction.
     *
     */
    public function testSettleTransaction()
    {
    }

    /**
     * Test case for uncommitTransaction
     *
     * Uncommit a transaction for reporting.
     *
     */
    public function testUncommitTransaction()
    {
    }

    /**
     * Test case for unvoidTransaction
     *
     * Unvoids a transaction.
     *
     */
    public function testUnvoidTransaction()
    {
    }

    /**
     * Test case for verifyTransaction
     *
     * Verify a transaction.
     *
     */
    public function testVerifyTransaction()
    {
    }

    /**
     * Test case for voidTransaction
     *
     * Void a transaction.
     *
     */
    public function testVoidTransaction()
    {
    }
}
