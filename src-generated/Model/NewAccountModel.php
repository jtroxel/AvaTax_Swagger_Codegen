<?php
/**
 * NewAccountModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NewAccountModel Class Doc Comment
 *
 * @category Class
 * @description Represents information about a newly created account
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewAccountModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewAccountModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'int',
        'account_details_emailed_to' => 'string',
        'created_date' => '\DateTime',
        'emailed_date' => '\DateTime',
        'limitations' => 'string',
        'license_key' => 'string',
        'payment_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'int32',
        'account_details_emailed_to' => null,
        'created_date' => 'date-time',
        'emailed_date' => 'date-time',
        'limitations' => null,
        'license_key' => null,
        'payment_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'account_details_emailed_to' => 'accountDetailsEmailedTo',
        'created_date' => 'createdDate',
        'emailed_date' => 'emailedDate',
        'limitations' => 'limitations',
        'license_key' => 'licenseKey',
        'payment_url' => 'paymentUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_details_emailed_to' => 'setAccountDetailsEmailedTo',
        'created_date' => 'setCreatedDate',
        'emailed_date' => 'setEmailedDate',
        'limitations' => 'setLimitations',
        'license_key' => 'setLicenseKey',
        'payment_url' => 'setPaymentUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_details_emailed_to' => 'getAccountDetailsEmailedTo',
        'created_date' => 'getCreatedDate',
        'emailed_date' => 'getEmailedDate',
        'limitations' => 'getLimitations',
        'license_key' => 'getLicenseKey',
        'payment_url' => 'getPaymentUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_details_emailed_to'] = isset($data['account_details_emailed_to']) ? $data['account_details_emailed_to'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['emailed_date'] = isset($data['emailed_date']) ? $data['emailed_date'] : null;
        $this->container['limitations'] = isset($data['limitations']) ? $data['limitations'] : null;
        $this->container['license_key'] = isset($data['license_key']) ? $data['license_key'] : null;
        $this->container['payment_url'] = isset($data['payment_url']) ? $data['payment_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id This is the ID number of the account that was created
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_details_emailed_to
     *
     * @return string
     */
    public function getAccountDetailsEmailedTo()
    {
        return $this->container['account_details_emailed_to'];
    }

    /**
     * Sets account_details_emailed_to
     *
     * @param string $account_details_emailed_to This is the email address to which credentials were mailed
     *
     * @return $this
     */
    public function setAccountDetailsEmailedTo($account_details_emailed_to)
    {
        $this->container['account_details_emailed_to'] = $account_details_emailed_to;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date and time when this account was created
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets emailed_date
     *
     * @return \DateTime
     */
    public function getEmailedDate()
    {
        return $this->container['emailed_date'];
    }

    /**
     * Sets emailed_date
     *
     * @param \DateTime $emailed_date The date and time when account information was emailed to the user
     *
     * @return $this
     */
    public function setEmailedDate($emailed_date)
    {
        $this->container['emailed_date'] = $emailed_date;

        return $this;
    }

    /**
     * Gets limitations
     *
     * @return string
     */
    public function getLimitations()
    {
        return $this->container['limitations'];
    }

    /**
     * Sets limitations
     *
     * @param string $limitations If this account includes any limitations, specify them here
     *
     * @return $this
     */
    public function setLimitations($limitations)
    {
        $this->container['limitations'] = $limitations;

        return $this;
    }

    /**
     * Gets license_key
     *
     * @return string
     */
    public function getLicenseKey()
    {
        return $this->container['license_key'];
    }

    /**
     * Sets license_key
     *
     * @param string $license_key The license key of the account that was created
     *
     * @return $this
     */
    public function setLicenseKey($license_key)
    {
        $this->container['license_key'] = $license_key;

        return $this;
    }

    /**
     * Gets payment_url
     *
     * @return string
     */
    public function getPaymentUrl()
    {
        return $this->container['payment_url'];
    }

    /**
     * Sets payment_url
     *
     * @param string $payment_url The payment url where the payment method can be set up
     *
     * @return $this
     */
    public function setPaymentUrl($payment_url)
    {
        $this->container['payment_url'] = $payment_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


