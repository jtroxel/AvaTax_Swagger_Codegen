<?php
/**
 * CompanyInitializationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CompanyInitializationModel Class Doc Comment
 *
 * @category Class
 * @description Company Initialization Model
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyInitializationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyInitializationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'company_code' => 'string',
        'vat_registration_id' => 'string',
        'taxpayer_id_number' => 'string',
        'is_fein' => 'bool',
        'line1' => 'string',
        'line2' => 'string',
        'line3' => 'string',
        'city' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => 'string',
        'email' => 'string',
        'phone_number' => 'string',
        'mobile_number' => 'string',
        'fax_number' => 'string',
        'parent_company_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'company_code' => null,
        'vat_registration_id' => null,
        'taxpayer_id_number' => null,
        'is_fein' => null,
        'line1' => null,
        'line2' => null,
        'line3' => null,
        'city' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null,
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'email' => null,
        'phone_number' => null,
        'mobile_number' => null,
        'fax_number' => null,
        'parent_company_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'company_code' => 'companyCode',
        'vat_registration_id' => 'vatRegistrationId',
        'taxpayer_id_number' => 'taxpayerIdNumber',
        'is_fein' => 'isFein',
        'line1' => 'line1',
        'line2' => 'line2',
        'line3' => 'line3',
        'city' => 'city',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'title' => 'title',
        'email' => 'email',
        'phone_number' => 'phoneNumber',
        'mobile_number' => 'mobileNumber',
        'fax_number' => 'faxNumber',
        'parent_company_id' => 'parentCompanyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'company_code' => 'setCompanyCode',
        'vat_registration_id' => 'setVatRegistrationId',
        'taxpayer_id_number' => 'setTaxpayerIdNumber',
        'is_fein' => 'setIsFein',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'line3' => 'setLine3',
        'city' => 'setCity',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'email' => 'setEmail',
        'phone_number' => 'setPhoneNumber',
        'mobile_number' => 'setMobileNumber',
        'fax_number' => 'setFaxNumber',
        'parent_company_id' => 'setParentCompanyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'company_code' => 'getCompanyCode',
        'vat_registration_id' => 'getVatRegistrationId',
        'taxpayer_id_number' => 'getTaxpayerIdNumber',
        'is_fein' => 'getIsFein',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'line3' => 'getLine3',
        'city' => 'getCity',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'email' => 'getEmail',
        'phone_number' => 'getPhoneNumber',
        'mobile_number' => 'getMobileNumber',
        'fax_number' => 'getFaxNumber',
        'parent_company_id' => 'getParentCompanyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['vat_registration_id'] = isset($data['vat_registration_id']) ? $data['vat_registration_id'] : null;
        $this->container['taxpayer_id_number'] = isset($data['taxpayer_id_number']) ? $data['taxpayer_id_number'] : null;
        $this->container['is_fein'] = isset($data['is_fein']) ? $data['is_fein'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['line3'] = isset($data['line3']) ? $data['line3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_number'] = isset($data['mobile_number']) ? $data['mobile_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['parent_company_id'] = isset($data['parent_company_id']) ? $data['parent_company_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vat_registration_id']) && (mb_strlen($this->container['vat_registration_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'vat_registration_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['vat_registration_id']) && (mb_strlen($this->container['vat_registration_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'vat_registration_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxpayer_id_number']) && (mb_strlen($this->container['taxpayer_id_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['taxpayer_id_number']) && (mb_strlen($this->container['taxpayer_id_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['line1'] === null) {
            $invalidProperties[] = "'line1' can't be null";
        }
        if ((mb_strlen($this->container['line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line3']) && (mb_strlen($this->container['line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line3']) && (mb_strlen($this->container['line3']) < 0)) {
            $invalidProperties[] = "invalid value for 'line3', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if ((mb_strlen($this->container['phone_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 25.";
        }

        if ((mb_strlen($this->container['phone_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_number']) && (mb_strlen($this->container['mobile_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'mobile_number', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['mobile_number']) && (mb_strlen($this->container['mobile_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) > 25)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Company Name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code Company Code - used to distinguish between companies within your accounting system
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if (!is_null($company_code) && (mb_strlen($company_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CompanyInitializationModel., must be smaller than or equal to 25.');
        }
        if (!is_null($company_code) && (mb_strlen($company_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets vat_registration_id
     *
     * @return string
     */
    public function getVatRegistrationId()
    {
        return $this->container['vat_registration_id'];
    }

    /**
     * Sets vat_registration_id
     *
     * @param string $vat_registration_id Vat Registration Id - leave blank if not known.
     *
     * @return $this
     */
    public function setVatRegistrationId($vat_registration_id)
    {
        if (!is_null($vat_registration_id) && (mb_strlen($vat_registration_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_id when calling CompanyInitializationModel., must be smaller than or equal to 25.');
        }
        if (!is_null($vat_registration_id) && (mb_strlen($vat_registration_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_id when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['vat_registration_id'] = $vat_registration_id;

        return $this;
    }

    /**
     * Gets taxpayer_id_number
     *
     * @return string
     */
    public function getTaxpayerIdNumber()
    {
        return $this->container['taxpayer_id_number'];
    }

    /**
     * Sets taxpayer_id_number
     *
     * @param string $taxpayer_id_number United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your  Social Security Number if you are an individual.  This value is required if the address provided is inside the US and if you subscribed to the Avalara Managed Returns or SST Certified Service Provider service. Otherwise it is optional.
     *
     * @return $this
     */
    public function setTaxpayerIdNumber($taxpayer_id_number)
    {
        if (!is_null($taxpayer_id_number) && (mb_strlen($taxpayer_id_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id_number when calling CompanyInitializationModel., must be smaller than or equal to 11.');
        }
        if (!is_null($taxpayer_id_number) && (mb_strlen($taxpayer_id_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id_number when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['taxpayer_id_number'] = $taxpayer_id_number;

        return $this;
    }

    /**
     * Gets is_fein
     *
     * @return bool
     */
    public function getIsFein()
    {
        return $this->container['is_fein'];
    }

    /**
     * Sets is_fein
     *
     * @param bool $is_fein Set this field to true if the taxPayerIdNumber is a FEIN.
     *
     * @return $this
     */
    public function setIsFein($is_fein)
    {
        $this->container['is_fein'] = $is_fein;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 Address Line1
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        if ((mb_strlen($line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 Line2
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        if (!is_null($line2) && (mb_strlen($line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line2) && (mb_strlen($line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets line3
     *
     * @return string
     */
    public function getLine3()
    {
        return $this->container['line3'];
    }

    /**
     * Sets line3
     *
     * @param string $line3 Line3
     *
     * @return $this
     */
    public function setLine3($line3)
    {
        if (!is_null($line3) && (mb_strlen($line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line3 when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line3) && (mb_strlen($line3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line3 when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['line3'] = $line3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return $this
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal Code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CompanyInitializationModel., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First Name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last Name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CompanyInitializationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone Number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if ((mb_strlen($phone_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CompanyInitializationModel., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string $mobile_number Mobile Number
     *
     * @return $this
     */
    public function setMobileNumber($mobile_number)
    {
        if (!is_null($mobile_number) && (mb_strlen($mobile_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number when calling CompanyInitializationModel., must be smaller than or equal to 25.');
        }
        if (!is_null($mobile_number) && (mb_strlen($mobile_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number Fax Number
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (!is_null($fax_number) && (mb_strlen($fax_number) > 25)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling CompanyInitializationModel., must be smaller than or equal to 25.');
        }
        if (!is_null($fax_number) && (mb_strlen($fax_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling CompanyInitializationModel., must be bigger than or equal to 0.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets parent_company_id
     *
     * @return int
     */
    public function getParentCompanyId()
    {
        return $this->container['parent_company_id'];
    }

    /**
     * Sets parent_company_id
     *
     * @param int $parent_company_id Parent Company ID
     *
     * @return $this
     */
    public function setParentCompanyId($parent_company_id)
    {
        $this->container['parent_company_id'] = $parent_company_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


