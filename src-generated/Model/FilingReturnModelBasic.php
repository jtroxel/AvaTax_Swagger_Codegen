<?php
/**
 * FilingReturnModelBasic
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * FilingReturnModelBasic Class Doc Comment
 *
 * @category Class
 * @description Filing Returns Model
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilingReturnModelBasic implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilingReturnModelBasic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_id' => 'int',
        'id' => 'int',
        'filing_id' => 'int',
        'resource_file_id' => 'int',
        'filing_region_id' => 'int',
        'filing_calendar_id' => 'int',
        'country' => 'string',
        'region' => 'string',
        'end_period_month' => 'int',
        'end_period_year' => 'int',
        'status' => 'string',
        'filing_frequency' => 'string',
        'filed_date' => '\DateTime',
        'sales_amount' => 'double',
        'filing_type' => 'string',
        'form_name' => 'string',
        'remit_amount' => 'double',
        'form_code' => 'string',
        'description' => 'string',
        'taxable_amount' => 'double',
        'tax_amount' => 'double',
        'collect_amount' => 'double',
        'tax_due_amount' => 'double',
        'non_taxable_amount' => 'double',
        'non_taxable_due_amount' => 'double',
        'consumer_use_tax_amount' => 'double',
        'consumer_use_non_taxable_amount' => 'double',
        'consumer_use_taxable_amount' => 'double',
        'excluded_sales_amount' => 'double',
        'excluded_non_taxable_amount' => 'double',
        'excluded_tax_amount' => 'double',
        'accrual_type' => 'string',
        'attachments' => '\Together\Taxes\Model\FilingAttachmentModel[]',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_id' => 'int64',
        'id' => 'int64',
        'filing_id' => 'int64',
        'resource_file_id' => 'int64',
        'filing_region_id' => 'int64',
        'filing_calendar_id' => 'int64',
        'country' => null,
        'region' => null,
        'end_period_month' => 'int32',
        'end_period_year' => 'int16',
        'status' => null,
        'filing_frequency' => null,
        'filed_date' => 'date-time',
        'sales_amount' => 'double',
        'filing_type' => null,
        'form_name' => null,
        'remit_amount' => 'double',
        'form_code' => null,
        'description' => null,
        'taxable_amount' => 'double',
        'tax_amount' => 'double',
        'collect_amount' => 'double',
        'tax_due_amount' => 'double',
        'non_taxable_amount' => 'double',
        'non_taxable_due_amount' => 'double',
        'consumer_use_tax_amount' => 'double',
        'consumer_use_non_taxable_amount' => 'double',
        'consumer_use_taxable_amount' => 'double',
        'excluded_sales_amount' => 'double',
        'excluded_non_taxable_amount' => 'double',
        'excluded_tax_amount' => 'double',
        'accrual_type' => null,
        'attachments' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_id' => 'companyId',
        'id' => 'id',
        'filing_id' => 'filingId',
        'resource_file_id' => 'resourceFileId',
        'filing_region_id' => 'filingRegionId',
        'filing_calendar_id' => 'filingCalendarId',
        'country' => 'country',
        'region' => 'region',
        'end_period_month' => 'endPeriodMonth',
        'end_period_year' => 'endPeriodYear',
        'status' => 'status',
        'filing_frequency' => 'filingFrequency',
        'filed_date' => 'filedDate',
        'sales_amount' => 'salesAmount',
        'filing_type' => 'filingType',
        'form_name' => 'formName',
        'remit_amount' => 'remitAmount',
        'form_code' => 'formCode',
        'description' => 'description',
        'taxable_amount' => 'taxableAmount',
        'tax_amount' => 'taxAmount',
        'collect_amount' => 'collectAmount',
        'tax_due_amount' => 'taxDueAmount',
        'non_taxable_amount' => 'nonTaxableAmount',
        'non_taxable_due_amount' => 'nonTaxableDueAmount',
        'consumer_use_tax_amount' => 'consumerUseTaxAmount',
        'consumer_use_non_taxable_amount' => 'consumerUseNonTaxableAmount',
        'consumer_use_taxable_amount' => 'consumerUseTaxableAmount',
        'excluded_sales_amount' => 'excludedSalesAmount',
        'excluded_non_taxable_amount' => 'excludedNonTaxableAmount',
        'excluded_tax_amount' => 'excludedTaxAmount',
        'accrual_type' => 'accrualType',
        'attachments' => 'attachments',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_id' => 'setCompanyId',
        'id' => 'setId',
        'filing_id' => 'setFilingId',
        'resource_file_id' => 'setResourceFileId',
        'filing_region_id' => 'setFilingRegionId',
        'filing_calendar_id' => 'setFilingCalendarId',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'end_period_month' => 'setEndPeriodMonth',
        'end_period_year' => 'setEndPeriodYear',
        'status' => 'setStatus',
        'filing_frequency' => 'setFilingFrequency',
        'filed_date' => 'setFiledDate',
        'sales_amount' => 'setSalesAmount',
        'filing_type' => 'setFilingType',
        'form_name' => 'setFormName',
        'remit_amount' => 'setRemitAmount',
        'form_code' => 'setFormCode',
        'description' => 'setDescription',
        'taxable_amount' => 'setTaxableAmount',
        'tax_amount' => 'setTaxAmount',
        'collect_amount' => 'setCollectAmount',
        'tax_due_amount' => 'setTaxDueAmount',
        'non_taxable_amount' => 'setNonTaxableAmount',
        'non_taxable_due_amount' => 'setNonTaxableDueAmount',
        'consumer_use_tax_amount' => 'setConsumerUseTaxAmount',
        'consumer_use_non_taxable_amount' => 'setConsumerUseNonTaxableAmount',
        'consumer_use_taxable_amount' => 'setConsumerUseTaxableAmount',
        'excluded_sales_amount' => 'setExcludedSalesAmount',
        'excluded_non_taxable_amount' => 'setExcludedNonTaxableAmount',
        'excluded_tax_amount' => 'setExcludedTaxAmount',
        'accrual_type' => 'setAccrualType',
        'attachments' => 'setAttachments',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_id' => 'getCompanyId',
        'id' => 'getId',
        'filing_id' => 'getFilingId',
        'resource_file_id' => 'getResourceFileId',
        'filing_region_id' => 'getFilingRegionId',
        'filing_calendar_id' => 'getFilingCalendarId',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'end_period_month' => 'getEndPeriodMonth',
        'end_period_year' => 'getEndPeriodYear',
        'status' => 'getStatus',
        'filing_frequency' => 'getFilingFrequency',
        'filed_date' => 'getFiledDate',
        'sales_amount' => 'getSalesAmount',
        'filing_type' => 'getFilingType',
        'form_name' => 'getFormName',
        'remit_amount' => 'getRemitAmount',
        'form_code' => 'getFormCode',
        'description' => 'getDescription',
        'taxable_amount' => 'getTaxableAmount',
        'tax_amount' => 'getTaxAmount',
        'collect_amount' => 'getCollectAmount',
        'tax_due_amount' => 'getTaxDueAmount',
        'non_taxable_amount' => 'getNonTaxableAmount',
        'non_taxable_due_amount' => 'getNonTaxableDueAmount',
        'consumer_use_tax_amount' => 'getConsumerUseTaxAmount',
        'consumer_use_non_taxable_amount' => 'getConsumerUseNonTaxableAmount',
        'consumer_use_taxable_amount' => 'getConsumerUseTaxableAmount',
        'excluded_sales_amount' => 'getExcludedSalesAmount',
        'excluded_non_taxable_amount' => 'getExcludedNonTaxableAmount',
        'excluded_tax_amount' => 'getExcludedTaxAmount',
        'accrual_type' => 'getAccrualType',
        'attachments' => 'getAttachments',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING_APPROVAL = 'PendingApproval';
    const STATUS_DIRTY = 'Dirty';
    const STATUS_APPROVED_TO_FILE = 'ApprovedToFile';
    const STATUS_PENDING_FILING = 'PendingFiling';
    const STATUS_PENDING_FILING_ON_BEHALF = 'PendingFilingOnBehalf';
    const STATUS_FILED = 'Filed';
    const STATUS_FILED_ON_BEHALF = 'FiledOnBehalf';
    const STATUS_RETURN_ACCEPTED = 'ReturnAccepted';
    const STATUS_RETURN_ACCEPTED_ON_BEHALF = 'ReturnAcceptedOnBehalf';
    const STATUS_PAYMENT_REMITTED = 'PaymentRemitted';
    const STATUS_VOIDED = 'Voided';
    const STATUS_PENDING_RETURN = 'PendingReturn';
    const STATUS_PENDING_RETURN_ON_BEHALF = 'PendingReturnOnBehalf';
    const STATUS_DO_NOT_FILE = 'DoNotFile';
    const STATUS_RETURN_REJECTED = 'ReturnRejected';
    const STATUS_RETURN_REJECTED_ON_BEHALF = 'ReturnRejectedOnBehalf';
    const STATUS_APPROVED_TO_FILE_ON_BEHALF = 'ApprovedToFileOnBehalf';
    const FILING_FREQUENCY_MONTHLY = 'Monthly';
    const FILING_FREQUENCY_QUARTERLY = 'Quarterly';
    const FILING_FREQUENCY_SEMI_ANNUALLY = 'SemiAnnually';
    const FILING_FREQUENCY_ANNUALLY = 'Annually';
    const FILING_FREQUENCY_BIMONTHLY = 'Bimonthly';
    const FILING_FREQUENCY_OCCASIONAL = 'Occasional';
    const FILING_FREQUENCY_INVERSE_QUARTERLY = 'InverseQuarterly';
    const FILING_FREQUENCY_WEEKLY = 'Weekly';
    const FILING_TYPE_PAPER_RETURN = 'PaperReturn';
    const FILING_TYPE_ELECTRONIC_RETURN = 'ElectronicReturn';
    const FILING_TYPE_SER = 'SER';
    const FILING_TYPE_EFT_PAPER = 'EFTPaper';
    const FILING_TYPE_PHONE_PAPER = 'PhonePaper';
    const FILING_TYPE_SIGNATURE_READY = 'SignatureReady';
    const FILING_TYPE_EFILE_CHECK = 'EfileCheck';
    const ACCRUAL_TYPE_FILING = 'Filing';
    const ACCRUAL_TYPE_ACCRUAL = 'Accrual';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_DIRTY,
            self::STATUS_APPROVED_TO_FILE,
            self::STATUS_PENDING_FILING,
            self::STATUS_PENDING_FILING_ON_BEHALF,
            self::STATUS_FILED,
            self::STATUS_FILED_ON_BEHALF,
            self::STATUS_RETURN_ACCEPTED,
            self::STATUS_RETURN_ACCEPTED_ON_BEHALF,
            self::STATUS_PAYMENT_REMITTED,
            self::STATUS_VOIDED,
            self::STATUS_PENDING_RETURN,
            self::STATUS_PENDING_RETURN_ON_BEHALF,
            self::STATUS_DO_NOT_FILE,
            self::STATUS_RETURN_REJECTED,
            self::STATUS_RETURN_REJECTED_ON_BEHALF,
            self::STATUS_APPROVED_TO_FILE_ON_BEHALF,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingFrequencyAllowableValues()
    {
        return [
            self::FILING_FREQUENCY_MONTHLY,
            self::FILING_FREQUENCY_QUARTERLY,
            self::FILING_FREQUENCY_SEMI_ANNUALLY,
            self::FILING_FREQUENCY_ANNUALLY,
            self::FILING_FREQUENCY_BIMONTHLY,
            self::FILING_FREQUENCY_OCCASIONAL,
            self::FILING_FREQUENCY_INVERSE_QUARTERLY,
            self::FILING_FREQUENCY_WEEKLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingTypeAllowableValues()
    {
        return [
            self::FILING_TYPE_PAPER_RETURN,
            self::FILING_TYPE_ELECTRONIC_RETURN,
            self::FILING_TYPE_SER,
            self::FILING_TYPE_EFT_PAPER,
            self::FILING_TYPE_PHONE_PAPER,
            self::FILING_TYPE_SIGNATURE_READY,
            self::FILING_TYPE_EFILE_CHECK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccrualTypeAllowableValues()
    {
        return [
            self::ACCRUAL_TYPE_FILING,
            self::ACCRUAL_TYPE_ACCRUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['filing_id'] = isset($data['filing_id']) ? $data['filing_id'] : null;
        $this->container['resource_file_id'] = isset($data['resource_file_id']) ? $data['resource_file_id'] : null;
        $this->container['filing_region_id'] = isset($data['filing_region_id']) ? $data['filing_region_id'] : null;
        $this->container['filing_calendar_id'] = isset($data['filing_calendar_id']) ? $data['filing_calendar_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['end_period_month'] = isset($data['end_period_month']) ? $data['end_period_month'] : null;
        $this->container['end_period_year'] = isset($data['end_period_year']) ? $data['end_period_year'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['filing_frequency'] = isset($data['filing_frequency']) ? $data['filing_frequency'] : null;
        $this->container['filed_date'] = isset($data['filed_date']) ? $data['filed_date'] : null;
        $this->container['sales_amount'] = isset($data['sales_amount']) ? $data['sales_amount'] : null;
        $this->container['filing_type'] = isset($data['filing_type']) ? $data['filing_type'] : null;
        $this->container['form_name'] = isset($data['form_name']) ? $data['form_name'] : null;
        $this->container['remit_amount'] = isset($data['remit_amount']) ? $data['remit_amount'] : null;
        $this->container['form_code'] = isset($data['form_code']) ? $data['form_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['collect_amount'] = isset($data['collect_amount']) ? $data['collect_amount'] : null;
        $this->container['tax_due_amount'] = isset($data['tax_due_amount']) ? $data['tax_due_amount'] : null;
        $this->container['non_taxable_amount'] = isset($data['non_taxable_amount']) ? $data['non_taxable_amount'] : null;
        $this->container['non_taxable_due_amount'] = isset($data['non_taxable_due_amount']) ? $data['non_taxable_due_amount'] : null;
        $this->container['consumer_use_tax_amount'] = isset($data['consumer_use_tax_amount']) ? $data['consumer_use_tax_amount'] : null;
        $this->container['consumer_use_non_taxable_amount'] = isset($data['consumer_use_non_taxable_amount']) ? $data['consumer_use_non_taxable_amount'] : null;
        $this->container['consumer_use_taxable_amount'] = isset($data['consumer_use_taxable_amount']) ? $data['consumer_use_taxable_amount'] : null;
        $this->container['excluded_sales_amount'] = isset($data['excluded_sales_amount']) ? $data['excluded_sales_amount'] : null;
        $this->container['excluded_non_taxable_amount'] = isset($data['excluded_non_taxable_amount']) ? $data['excluded_non_taxable_amount'] : null;
        $this->container['excluded_tax_amount'] = isset($data['excluded_tax_amount']) ? $data['excluded_tax_amount'] : null;
        $this->container['accrual_type'] = isset($data['accrual_type']) ? $data['accrual_type'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($this->container['filing_frequency']) && !in_array($this->container['filing_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingTypeAllowableValues();
        if (!is_null($this->container['filing_type']) && !in_array($this->container['filing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (!is_null($this->container['accrual_type']) && !in_array($this->container['accrual_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accrual_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company filing return.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this filing return.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets filing_id
     *
     * @return int
     */
    public function getFilingId()
    {
        return $this->container['filing_id'];
    }

    /**
     * Sets filing_id
     *
     * @param int $filing_id The filing id that this return belongs too
     *
     * @return $this
     */
    public function setFilingId($filing_id)
    {
        $this->container['filing_id'] = $filing_id;

        return $this;
    }

    /**
     * Gets resource_file_id
     *
     * @return int
     */
    public function getResourceFileId()
    {
        return $this->container['resource_file_id'];
    }

    /**
     * Sets resource_file_id
     *
     * @param int $resource_file_id The resourceFileId of the return
     *
     * @return $this
     */
    public function setResourceFileId($resource_file_id)
    {
        $this->container['resource_file_id'] = $resource_file_id;

        return $this;
    }

    /**
     * Gets filing_region_id
     *
     * @return int
     */
    public function getFilingRegionId()
    {
        return $this->container['filing_region_id'];
    }

    /**
     * Sets filing_region_id
     *
     * @param int $filing_region_id The region id that this return belongs too
     *
     * @return $this
     */
    public function setFilingRegionId($filing_region_id)
    {
        $this->container['filing_region_id'] = $filing_region_id;

        return $this;
    }

    /**
     * Gets filing_calendar_id
     *
     * @return int
     */
    public function getFilingCalendarId()
    {
        return $this->container['filing_calendar_id'];
    }

    /**
     * Sets filing_calendar_id
     *
     * @param int $filing_calendar_id The unique ID number of the filing calendar associated with this return.
     *
     * @return $this
     */
    public function setFilingCalendarId($filing_calendar_id)
    {
        $this->container['filing_calendar_id'] = $filing_calendar_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the form.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The region of the form.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets end_period_month
     *
     * @return int
     */
    public function getEndPeriodMonth()
    {
        return $this->container['end_period_month'];
    }

    /**
     * Sets end_period_month
     *
     * @param int $end_period_month The month of the filing period for this tax filing.  The filing period represents the year and month of the last day of taxes being reported on this filing.  For example, an annual tax filing for Jan-Dec 2015 would have a filing period of Dec 2015.
     *
     * @return $this
     */
    public function setEndPeriodMonth($end_period_month)
    {
        $this->container['end_period_month'] = $end_period_month;

        return $this;
    }

    /**
     * Gets end_period_year
     *
     * @return int
     */
    public function getEndPeriodYear()
    {
        return $this->container['end_period_year'];
    }

    /**
     * Sets end_period_year
     *
     * @param int $end_period_year The year of the filing period for this tax filing.  The filing period represents the year and month of the last day of taxes being reported on this filing.  For example, an annual tax filing for Jan-Dec 2015 would have a filing period of Dec 2015.
     *
     * @return $this
     */
    public function setEndPeriodYear($end_period_year)
    {
        $this->container['end_period_year'] = $end_period_year;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the filing return.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets filing_frequency
     *
     * @return string
     */
    public function getFilingFrequency()
    {
        return $this->container['filing_frequency'];
    }

    /**
     * Sets filing_frequency
     *
     * @param string $filing_frequency The filing frequency of the return.
     *
     * @return $this
     */
    public function setFilingFrequency($filing_frequency)
    {
        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($filing_frequency) && !in_array($filing_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_frequency'] = $filing_frequency;

        return $this;
    }

    /**
     * Gets filed_date
     *
     * @return \DateTime
     */
    public function getFiledDate()
    {
        return $this->container['filed_date'];
    }

    /**
     * Sets filed_date
     *
     * @param \DateTime $filed_date The date the return was filed by Avalara.
     *
     * @return $this
     */
    public function setFiledDate($filed_date)
    {
        $this->container['filed_date'] = $filed_date;

        return $this;
    }

    /**
     * Gets sales_amount
     *
     * @return double
     */
    public function getSalesAmount()
    {
        return $this->container['sales_amount'];
    }

    /**
     * Sets sales_amount
     *
     * @param double $sales_amount The sales amount.
     *
     * @return $this
     */
    public function setSalesAmount($sales_amount)
    {
        $this->container['sales_amount'] = $sales_amount;

        return $this;
    }

    /**
     * Gets filing_type
     *
     * @return string
     */
    public function getFilingType()
    {
        return $this->container['filing_type'];
    }

    /**
     * Sets filing_type
     *
     * @param string $filing_type The filing type of the return.
     *
     * @return $this
     */
    public function setFilingType($filing_type)
    {
        $allowedValues = $this->getFilingTypeAllowableValues();
        if (!is_null($filing_type) && !in_array($filing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_type'] = $filing_type;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string
     */
    public function getFormName()
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string $form_name The name of the form.
     *
     * @return $this
     */
    public function setFormName($form_name)
    {
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets remit_amount
     *
     * @return double
     */
    public function getRemitAmount()
    {
        return $this->container['remit_amount'];
    }

    /**
     * Sets remit_amount
     *
     * @param double $remit_amount The remittance amount of the return.
     *
     * @return $this
     */
    public function setRemitAmount($remit_amount)
    {
        $this->container['remit_amount'] = $remit_amount;

        return $this;
    }

    /**
     * Gets form_code
     *
     * @return string
     */
    public function getFormCode()
    {
        return $this->container['form_code'];
    }

    /**
     * Sets form_code
     *
     * @param string $form_code The unique code of the form.
     *
     * @return $this
     */
    public function setFormCode($form_code)
    {
        $this->container['form_code'] = $form_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description for the return.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return double
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param double $taxable_amount The taxable amount.
     *
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param double $tax_amount The tax amount.
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets collect_amount
     *
     * @return double
     */
    public function getCollectAmount()
    {
        return $this->container['collect_amount'];
    }

    /**
     * Sets collect_amount
     *
     * @param double $collect_amount The amount collected by avalara for this return
     *
     * @return $this
     */
    public function setCollectAmount($collect_amount)
    {
        $this->container['collect_amount'] = $collect_amount;

        return $this;
    }

    /**
     * Gets tax_due_amount
     *
     * @return double
     */
    public function getTaxDueAmount()
    {
        return $this->container['tax_due_amount'];
    }

    /**
     * Sets tax_due_amount
     *
     * @param double $tax_due_amount The tax due amount.
     *
     * @return $this
     */
    public function setTaxDueAmount($tax_due_amount)
    {
        $this->container['tax_due_amount'] = $tax_due_amount;

        return $this;
    }

    /**
     * Gets non_taxable_amount
     *
     * @return double
     */
    public function getNonTaxableAmount()
    {
        return $this->container['non_taxable_amount'];
    }

    /**
     * Sets non_taxable_amount
     *
     * @param double $non_taxable_amount The non-taxable amount.
     *
     * @return $this
     */
    public function setNonTaxableAmount($non_taxable_amount)
    {
        $this->container['non_taxable_amount'] = $non_taxable_amount;

        return $this;
    }

    /**
     * Gets non_taxable_due_amount
     *
     * @return double
     */
    public function getNonTaxableDueAmount()
    {
        return $this->container['non_taxable_due_amount'];
    }

    /**
     * Sets non_taxable_due_amount
     *
     * @param double $non_taxable_due_amount The non-taxable due amount.
     *
     * @return $this
     */
    public function setNonTaxableDueAmount($non_taxable_due_amount)
    {
        $this->container['non_taxable_due_amount'] = $non_taxable_due_amount;

        return $this;
    }

    /**
     * Gets consumer_use_tax_amount
     *
     * @return double
     */
    public function getConsumerUseTaxAmount()
    {
        return $this->container['consumer_use_tax_amount'];
    }

    /**
     * Sets consumer_use_tax_amount
     *
     * @param double $consumer_use_tax_amount Consumer use tax liability.
     *
     * @return $this
     */
    public function setConsumerUseTaxAmount($consumer_use_tax_amount)
    {
        $this->container['consumer_use_tax_amount'] = $consumer_use_tax_amount;

        return $this;
    }

    /**
     * Gets consumer_use_non_taxable_amount
     *
     * @return double
     */
    public function getConsumerUseNonTaxableAmount()
    {
        return $this->container['consumer_use_non_taxable_amount'];
    }

    /**
     * Sets consumer_use_non_taxable_amount
     *
     * @param double $consumer_use_non_taxable_amount Consumer use non-taxable amount.
     *
     * @return $this
     */
    public function setConsumerUseNonTaxableAmount($consumer_use_non_taxable_amount)
    {
        $this->container['consumer_use_non_taxable_amount'] = $consumer_use_non_taxable_amount;

        return $this;
    }

    /**
     * Gets consumer_use_taxable_amount
     *
     * @return double
     */
    public function getConsumerUseTaxableAmount()
    {
        return $this->container['consumer_use_taxable_amount'];
    }

    /**
     * Sets consumer_use_taxable_amount
     *
     * @param double $consumer_use_taxable_amount Consumer use taxable amount.
     *
     * @return $this
     */
    public function setConsumerUseTaxableAmount($consumer_use_taxable_amount)
    {
        $this->container['consumer_use_taxable_amount'] = $consumer_use_taxable_amount;

        return $this;
    }

    /**
     * Gets excluded_sales_amount
     *
     * @return double
     */
    public function getExcludedSalesAmount()
    {
        return $this->container['excluded_sales_amount'];
    }

    /**
     * Sets excluded_sales_amount
     *
     * @param double $excluded_sales_amount The amount of sales excluded from the liability calculation
     *
     * @return $this
     */
    public function setExcludedSalesAmount($excluded_sales_amount)
    {
        $this->container['excluded_sales_amount'] = $excluded_sales_amount;

        return $this;
    }

    /**
     * Gets excluded_non_taxable_amount
     *
     * @return double
     */
    public function getExcludedNonTaxableAmount()
    {
        return $this->container['excluded_non_taxable_amount'];
    }

    /**
     * Sets excluded_non_taxable_amount
     *
     * @param double $excluded_non_taxable_amount The amount of non-taxable sales excluded from the liability calculation
     *
     * @return $this
     */
    public function setExcludedNonTaxableAmount($excluded_non_taxable_amount)
    {
        $this->container['excluded_non_taxable_amount'] = $excluded_non_taxable_amount;

        return $this;
    }

    /**
     * Gets excluded_tax_amount
     *
     * @return double
     */
    public function getExcludedTaxAmount()
    {
        return $this->container['excluded_tax_amount'];
    }

    /**
     * Sets excluded_tax_amount
     *
     * @param double $excluded_tax_amount The amount of tax excluded from the liability calculation
     *
     * @return $this
     */
    public function setExcludedTaxAmount($excluded_tax_amount)
    {
        $this->container['excluded_tax_amount'] = $excluded_tax_amount;

        return $this;
    }

    /**
     * Gets accrual_type
     *
     * @return string
     */
    public function getAccrualType()
    {
        return $this->container['accrual_type'];
    }

    /**
     * Sets accrual_type
     *
     * @param string $accrual_type Accrual type of the return
     *
     * @return $this
     */
    public function setAccrualType($accrual_type)
    {
        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (!is_null($accrual_type) && !in_array($accrual_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accrual_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accrual_type'] = $accrual_type;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Together\Taxes\Model\FilingAttachmentModel[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Together\Taxes\Model\FilingAttachmentModel[] $attachments The attachments for this return.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


