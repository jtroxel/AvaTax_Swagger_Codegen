<?php
/**
 * ErrorTransactionOutputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ErrorTransactionOutputModel Class Doc Comment
 *
 * @category Class
 * @description Error Transaction Model
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ErrorTransactionOutputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ErrorTransactionOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_code' => 'string',
        'error_message' => 'string',
        'avatax_error_json' => 'string',
        'avatax_create_transaction_json' => 'string',
        'datasource' => 'string',
        'document_date' => '\DateTime',
        'expires_at' => '\DateTime',
        'amount' => 'double',
        'datasource_source' => 'string',
        'ship_to_country' => 'string',
        'ship_to_region' => 'string',
        'document_type' => 'string',
        'document_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_code' => null,
        'error_message' => null,
        'avatax_error_json' => null,
        'avatax_create_transaction_json' => null,
        'datasource' => null,
        'document_date' => 'date-time',
        'expires_at' => 'date-time',
        'amount' => 'double',
        'datasource_source' => null,
        'ship_to_country' => null,
        'ship_to_region' => null,
        'document_type' => null,
        'document_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error_code' => 'errorCode',
        'error_message' => 'errorMessage',
        'avatax_error_json' => 'avataxErrorJson',
        'avatax_create_transaction_json' => 'avataxCreateTransactionJson',
        'datasource' => 'datasource',
        'document_date' => 'documentDate',
        'expires_at' => 'expiresAt',
        'amount' => 'amount',
        'datasource_source' => 'datasourceSource',
        'ship_to_country' => 'shipToCountry',
        'ship_to_region' => 'shipToRegion',
        'document_type' => 'documentType',
        'document_code' => 'documentCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error_code' => 'setErrorCode',
        'error_message' => 'setErrorMessage',
        'avatax_error_json' => 'setAvataxErrorJson',
        'avatax_create_transaction_json' => 'setAvataxCreateTransactionJson',
        'datasource' => 'setDatasource',
        'document_date' => 'setDocumentDate',
        'expires_at' => 'setExpiresAt',
        'amount' => 'setAmount',
        'datasource_source' => 'setDatasourceSource',
        'ship_to_country' => 'setShipToCountry',
        'ship_to_region' => 'setShipToRegion',
        'document_type' => 'setDocumentType',
        'document_code' => 'setDocumentCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error_code' => 'getErrorCode',
        'error_message' => 'getErrorMessage',
        'avatax_error_json' => 'getAvataxErrorJson',
        'avatax_create_transaction_json' => 'getAvataxCreateTransactionJson',
        'datasource' => 'getDatasource',
        'document_date' => 'getDocumentDate',
        'expires_at' => 'getExpiresAt',
        'amount' => 'getAmount',
        'datasource_source' => 'getDatasourceSource',
        'ship_to_country' => 'getShipToCountry',
        'ship_to_region' => 'getShipToRegion',
        'document_type' => 'getDocumentType',
        'document_code' => 'getDocumentCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_SALES_ORDER = 'SalesOrder';
    const DOCUMENT_TYPE_SALES_INVOICE = 'SalesInvoice';
    const DOCUMENT_TYPE_PURCHASE_ORDER = 'PurchaseOrder';
    const DOCUMENT_TYPE_PURCHASE_INVOICE = 'PurchaseInvoice';
    const DOCUMENT_TYPE_RETURN_ORDER = 'ReturnOrder';
    const DOCUMENT_TYPE_RETURN_INVOICE = 'ReturnInvoice';
    const DOCUMENT_TYPE_INVENTORY_TRANSFER_ORDER = 'InventoryTransferOrder';
    const DOCUMENT_TYPE_INVENTORY_TRANSFER_INVOICE = 'InventoryTransferInvoice';
    const DOCUMENT_TYPE_REVERSE_CHARGE_ORDER = 'ReverseChargeOrder';
    const DOCUMENT_TYPE_REVERSE_CHARGE_INVOICE = 'ReverseChargeInvoice';
    const DOCUMENT_TYPE_CUSTOMS_INVOICE = 'CustomsInvoice';
    const DOCUMENT_TYPE_CUSTOMS_ORDER = 'CustomsOrder';
    const DOCUMENT_TYPE_ANY = 'Any';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_SALES_ORDER,
            self::DOCUMENT_TYPE_SALES_INVOICE,
            self::DOCUMENT_TYPE_PURCHASE_ORDER,
            self::DOCUMENT_TYPE_PURCHASE_INVOICE,
            self::DOCUMENT_TYPE_RETURN_ORDER,
            self::DOCUMENT_TYPE_RETURN_INVOICE,
            self::DOCUMENT_TYPE_INVENTORY_TRANSFER_ORDER,
            self::DOCUMENT_TYPE_INVENTORY_TRANSFER_INVOICE,
            self::DOCUMENT_TYPE_REVERSE_CHARGE_ORDER,
            self::DOCUMENT_TYPE_REVERSE_CHARGE_INVOICE,
            self::DOCUMENT_TYPE_CUSTOMS_INVOICE,
            self::DOCUMENT_TYPE_CUSTOMS_ORDER,
            self::DOCUMENT_TYPE_ANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_code'] = isset($data['error_code']) ? $data['error_code'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
        $this->container['avatax_error_json'] = isset($data['avatax_error_json']) ? $data['avatax_error_json'] : null;
        $this->container['avatax_create_transaction_json'] = isset($data['avatax_create_transaction_json']) ? $data['avatax_create_transaction_json'] : null;
        $this->container['datasource'] = isset($data['datasource']) ? $data['datasource'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['datasource_source'] = isset($data['datasource_source']) ? $data['datasource_source'] : null;
        $this->container['ship_to_country'] = isset($data['ship_to_country']) ? $data['ship_to_country'] : null;
        $this->container['ship_to_region'] = isset($data['ship_to_region']) ? $data['ship_to_region'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_code'] = isset($data['document_code']) ? $data['document_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['document_code'] === null) {
            $invalidProperties[] = "'document_code' can't be null";
        }
        if ((mb_strlen($this->container['document_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'document_code', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['document_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error_code
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['error_code'];
    }

    /**
     * Sets error_code
     *
     * @param string $error_code Error code of the error result from transaction creation
     *
     * @return $this
     */
    public function setErrorCode($error_code)
    {
        $this->container['error_code'] = $error_code;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message Error message of the error result from transaction creation
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets avatax_error_json
     *
     * @return string
     */
    public function getAvataxErrorJson()
    {
        return $this->container['avatax_error_json'];
    }

    /**
     * Sets avatax_error_json
     *
     * @param string $avatax_error_json The full JSON of the error result from transaction creation
     *
     * @return $this
     */
    public function setAvataxErrorJson($avatax_error_json)
    {
        $this->container['avatax_error_json'] = $avatax_error_json;

        return $this;
    }

    /**
     * Gets avatax_create_transaction_json
     *
     * @return string
     */
    public function getAvataxCreateTransactionJson()
    {
        return $this->container['avatax_create_transaction_json'];
    }

    /**
     * Sets avatax_create_transaction_json
     *
     * @param string $avatax_create_transaction_json The full JSON of the transaction creation request
     *
     * @return $this
     */
    public function setAvataxCreateTransactionJson($avatax_create_transaction_json)
    {
        $this->container['avatax_create_transaction_json'] = $avatax_create_transaction_json;

        return $this;
    }

    /**
     * Gets datasource
     *
     * @return string
     */
    public function getDatasource()
    {
        return $this->container['datasource'];
    }

    /**
     * Sets datasource
     *
     * @param string $datasource The datasource instance that made the transaction creation call
     *
     * @return $this
     */
    public function setDatasource($datasource)
    {
        $this->container['datasource'] = $datasource;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date The date of the document
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at The date that this ErrorTransaction will be automatically purged from the detabase.
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount of the transaction.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets datasource_source
     *
     * @return string
     */
    public function getDatasourceSource()
    {
        return $this->container['datasource_source'];
    }

    /**
     * Sets datasource_source
     *
     * @param string $datasource_source The Datasource source of the transaction creation call.
     *
     * @return $this
     */
    public function setDatasourceSource($datasource_source)
    {
        $this->container['datasource_source'] = $datasource_source;

        return $this;
    }

    /**
     * Gets ship_to_country
     *
     * @return string
     */
    public function getShipToCountry()
    {
        return $this->container['ship_to_country'];
    }

    /**
     * Sets ship_to_country
     *
     * @param string $ship_to_country The country of the ship to address for the transaction creation call.
     *
     * @return $this
     */
    public function setShipToCountry($ship_to_country)
    {
        $this->container['ship_to_country'] = $ship_to_country;

        return $this;
    }

    /**
     * Gets ship_to_region
     *
     * @return string
     */
    public function getShipToRegion()
    {
        return $this->container['ship_to_region'];
    }

    /**
     * Sets ship_to_region
     *
     * @param string $ship_to_region The region of the ship to address for the transaction creation call.
     *
     * @return $this
     */
    public function setShipToRegion($ship_to_region)
    {
        $this->container['ship_to_region'] = $ship_to_region;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type Type of transaction of the error transaction
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_code
     *
     * @return string
     */
    public function getDocumentCode()
    {
        return $this->container['document_code'];
    }

    /**
     * Sets document_code
     *
     * @param string $document_code The internal reference code (used by the client application) of the error transaction
     *
     * @return $this
     */
    public function setDocumentCode($document_code)
    {
        if ((mb_strlen($document_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $document_code when calling ErrorTransactionOutputModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($document_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_code when calling ErrorTransactionOutputModel., must be bigger than or equal to 0.');
        }

        $this->container['document_code'] = $document_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


