<?php
/**
 * WorksheetDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WorksheetDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorksheetDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorksheetDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'doc_code' => 'string',
        'doc_date' => '\DateTime',
        'total_exempt' => 'double',
        'total_taxable' => 'double',
        'total_tax' => 'double',
        'lines' => '\Swagger\Client\Model\WorksheetDocumentLine[]',
        'messages' => '\Swagger\Client\Model\Message[]',
        'result_code' => 'string',
        'transaction_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'doc_code' => null,
        'doc_date' => 'date-time',
        'total_exempt' => 'double',
        'total_taxable' => 'double',
        'total_tax' => 'double',
        'lines' => null,
        'messages' => null,
        'result_code' => null,
        'transaction_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'doc_code' => 'docCode',
        'doc_date' => 'docDate',
        'total_exempt' => 'totalExempt',
        'total_taxable' => 'totalTaxable',
        'total_tax' => 'totalTax',
        'lines' => 'lines',
        'messages' => 'messages',
        'result_code' => 'resultCode',
        'transaction_id' => 'transactionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'doc_code' => 'setDocCode',
        'doc_date' => 'setDocDate',
        'total_exempt' => 'setTotalExempt',
        'total_taxable' => 'setTotalTaxable',
        'total_tax' => 'setTotalTax',
        'lines' => 'setLines',
        'messages' => 'setMessages',
        'result_code' => 'setResultCode',
        'transaction_id' => 'setTransactionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'doc_code' => 'getDocCode',
        'doc_date' => 'getDocDate',
        'total_exempt' => 'getTotalExempt',
        'total_taxable' => 'getTotalTaxable',
        'total_tax' => 'getTotalTax',
        'lines' => 'getLines',
        'messages' => 'getMessages',
        'result_code' => 'getResultCode',
        'transaction_id' => 'getTransactionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_CODE_SUCCESS = 'Success';
    const RESULT_CODE_WARNING = 'Warning';
    const RESULT_CODE_ERROR = 'Error';
    const RESULT_CODE_EXCEPTION = 'Exception';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultCodeAllowableValues()
    {
        return [
            self::RESULT_CODE_SUCCESS,
            self::RESULT_CODE_WARNING,
            self::RESULT_CODE_ERROR,
            self::RESULT_CODE_EXCEPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['doc_code'] = isset($data['doc_code']) ? $data['doc_code'] : null;
        $this->container['doc_date'] = isset($data['doc_date']) ? $data['doc_date'] : null;
        $this->container['total_exempt'] = isset($data['total_exempt']) ? $data['total_exempt'] : null;
        $this->container['total_taxable'] = isset($data['total_taxable']) ? $data['total_taxable'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['result_code'] = isset($data['result_code']) ? $data['result_code'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResultCodeAllowableValues();
        if (!is_null($this->container['result_code']) && !in_array($this->container['result_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets doc_code
     *
     * @return string
     */
    public function getDocCode()
    {
        return $this->container['doc_code'];
    }

    /**
     * Sets doc_code
     *
     * @param string $doc_code doc_code
     *
     * @return $this
     */
    public function setDocCode($doc_code)
    {
        $this->container['doc_code'] = $doc_code;

        return $this;
    }

    /**
     * Gets doc_date
     *
     * @return \DateTime
     */
    public function getDocDate()
    {
        return $this->container['doc_date'];
    }

    /**
     * Sets doc_date
     *
     * @param \DateTime $doc_date doc_date
     *
     * @return $this
     */
    public function setDocDate($doc_date)
    {
        $this->container['doc_date'] = $doc_date;

        return $this;
    }

    /**
     * Gets total_exempt
     *
     * @return double
     */
    public function getTotalExempt()
    {
        return $this->container['total_exempt'];
    }

    /**
     * Sets total_exempt
     *
     * @param double $total_exempt total_exempt
     *
     * @return $this
     */
    public function setTotalExempt($total_exempt)
    {
        $this->container['total_exempt'] = $total_exempt;

        return $this;
    }

    /**
     * Gets total_taxable
     *
     * @return double
     */
    public function getTotalTaxable()
    {
        return $this->container['total_taxable'];
    }

    /**
     * Sets total_taxable
     *
     * @param double $total_taxable total_taxable
     *
     * @return $this
     */
    public function setTotalTaxable($total_taxable)
    {
        $this->container['total_taxable'] = $total_taxable;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Swagger\Client\Model\WorksheetDocumentLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Swagger\Client\Model\WorksheetDocumentLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Swagger\Client\Model\Message[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Swagger\Client\Model\Message[] $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets result_code
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param string $result_code result_code
     *
     * @return $this
     */
    public function setResultCode($result_code)
    {
        $allowedValues = $this->getResultCodeAllowableValues();
        if (!is_null($result_code) && !in_array($result_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


