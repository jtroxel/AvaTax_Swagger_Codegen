<?php
/**
 * CreateTransactionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CreateTransactionModel Class Doc Comment
 *
 * @category Class
 * @description Create a transaction
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateTransactionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateTransactionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'lines' => '\Together\Taxes\Model\LineItemModel[]',
        'type' => 'string',
        'company_code' => 'string',
        'date' => '\DateTime',
        'salesperson_code' => 'string',
        'customer_code' => 'string',
        'customer_usage_type' => 'string',
        'entity_use_code' => 'string',
        'discount' => 'double',
        'purchase_order_no' => 'string',
        'exemption_no' => 'string',
        'addresses' => '\Together\Taxes\Model\AddressesModel',
        'parameters' => '\Together\Taxes\Model\TransactionParameterModel[]',
        'reference_code' => 'string',
        'reporting_location_code' => 'string',
        'commit' => 'bool',
        'batch_code' => 'string',
        'tax_override' => '\Together\Taxes\Model\TaxOverrideModel',
        'currency_code' => 'string',
        'service_mode' => 'string',
        'exchange_rate' => 'double',
        'exchange_rate_effective_date' => '\DateTime',
        'pos_lane_code' => 'string',
        'business_identification_no' => 'string',
        'is_seller_importer_of_record' => 'bool',
        'description' => 'string',
        'email' => 'string',
        'debug_level' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'lines' => null,
        'type' => null,
        'company_code' => null,
        'date' => 'date',
        'salesperson_code' => null,
        'customer_code' => null,
        'customer_usage_type' => null,
        'entity_use_code' => null,
        'discount' => 'double',
        'purchase_order_no' => null,
        'exemption_no' => null,
        'addresses' => null,
        'parameters' => null,
        'reference_code' => null,
        'reporting_location_code' => null,
        'commit' => null,
        'batch_code' => null,
        'tax_override' => null,
        'currency_code' => null,
        'service_mode' => null,
        'exchange_rate' => 'double',
        'exchange_rate_effective_date' => 'date',
        'pos_lane_code' => null,
        'business_identification_no' => null,
        'is_seller_importer_of_record' => null,
        'description' => null,
        'email' => null,
        'debug_level' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'lines' => 'lines',
        'type' => 'type',
        'company_code' => 'companyCode',
        'date' => 'date',
        'salesperson_code' => 'salespersonCode',
        'customer_code' => 'customerCode',
        'customer_usage_type' => 'customerUsageType',
        'entity_use_code' => 'entityUseCode',
        'discount' => 'discount',
        'purchase_order_no' => 'purchaseOrderNo',
        'exemption_no' => 'exemptionNo',
        'addresses' => 'addresses',
        'parameters' => 'parameters',
        'reference_code' => 'referenceCode',
        'reporting_location_code' => 'reportingLocationCode',
        'commit' => 'commit',
        'batch_code' => 'batchCode',
        'tax_override' => 'taxOverride',
        'currency_code' => 'currencyCode',
        'service_mode' => 'serviceMode',
        'exchange_rate' => 'exchangeRate',
        'exchange_rate_effective_date' => 'exchangeRateEffectiveDate',
        'pos_lane_code' => 'posLaneCode',
        'business_identification_no' => 'businessIdentificationNo',
        'is_seller_importer_of_record' => 'isSellerImporterOfRecord',
        'description' => 'description',
        'email' => 'email',
        'debug_level' => 'debugLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'lines' => 'setLines',
        'type' => 'setType',
        'company_code' => 'setCompanyCode',
        'date' => 'setDate',
        'salesperson_code' => 'setSalespersonCode',
        'customer_code' => 'setCustomerCode',
        'customer_usage_type' => 'setCustomerUsageType',
        'entity_use_code' => 'setEntityUseCode',
        'discount' => 'setDiscount',
        'purchase_order_no' => 'setPurchaseOrderNo',
        'exemption_no' => 'setExemptionNo',
        'addresses' => 'setAddresses',
        'parameters' => 'setParameters',
        'reference_code' => 'setReferenceCode',
        'reporting_location_code' => 'setReportingLocationCode',
        'commit' => 'setCommit',
        'batch_code' => 'setBatchCode',
        'tax_override' => 'setTaxOverride',
        'currency_code' => 'setCurrencyCode',
        'service_mode' => 'setServiceMode',
        'exchange_rate' => 'setExchangeRate',
        'exchange_rate_effective_date' => 'setExchangeRateEffectiveDate',
        'pos_lane_code' => 'setPosLaneCode',
        'business_identification_no' => 'setBusinessIdentificationNo',
        'is_seller_importer_of_record' => 'setIsSellerImporterOfRecord',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'debug_level' => 'setDebugLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'lines' => 'getLines',
        'type' => 'getType',
        'company_code' => 'getCompanyCode',
        'date' => 'getDate',
        'salesperson_code' => 'getSalespersonCode',
        'customer_code' => 'getCustomerCode',
        'customer_usage_type' => 'getCustomerUsageType',
        'entity_use_code' => 'getEntityUseCode',
        'discount' => 'getDiscount',
        'purchase_order_no' => 'getPurchaseOrderNo',
        'exemption_no' => 'getExemptionNo',
        'addresses' => 'getAddresses',
        'parameters' => 'getParameters',
        'reference_code' => 'getReferenceCode',
        'reporting_location_code' => 'getReportingLocationCode',
        'commit' => 'getCommit',
        'batch_code' => 'getBatchCode',
        'tax_override' => 'getTaxOverride',
        'currency_code' => 'getCurrencyCode',
        'service_mode' => 'getServiceMode',
        'exchange_rate' => 'getExchangeRate',
        'exchange_rate_effective_date' => 'getExchangeRateEffectiveDate',
        'pos_lane_code' => 'getPosLaneCode',
        'business_identification_no' => 'getBusinessIdentificationNo',
        'is_seller_importer_of_record' => 'getIsSellerImporterOfRecord',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'debug_level' => 'getDebugLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_SALES_ORDER = 'SalesOrder';
    const TYPE_SALES_INVOICE = 'SalesInvoice';
    const TYPE_PURCHASE_ORDER = 'PurchaseOrder';
    const TYPE_PURCHASE_INVOICE = 'PurchaseInvoice';
    const TYPE_RETURN_ORDER = 'ReturnOrder';
    const TYPE_RETURN_INVOICE = 'ReturnInvoice';
    const TYPE_INVENTORY_TRANSFER_ORDER = 'InventoryTransferOrder';
    const TYPE_INVENTORY_TRANSFER_INVOICE = 'InventoryTransferInvoice';
    const TYPE_REVERSE_CHARGE_ORDER = 'ReverseChargeOrder';
    const TYPE_REVERSE_CHARGE_INVOICE = 'ReverseChargeInvoice';
    const TYPE_CUSTOMS_INVOICE = 'CustomsInvoice';
    const TYPE_CUSTOMS_ORDER = 'CustomsOrder';
    const TYPE_ANY = 'Any';
    const SERVICE_MODE_AUTOMATIC = 'Automatic';
    const SERVICE_MODE_LOCAL = 'Local';
    const SERVICE_MODE_REMOTE = 'Remote';
    const DEBUG_LEVEL_NORMAL = 'Normal';
    const DEBUG_LEVEL_DIAGNOSTIC = 'Diagnostic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SALES_ORDER,
            self::TYPE_SALES_INVOICE,
            self::TYPE_PURCHASE_ORDER,
            self::TYPE_PURCHASE_INVOICE,
            self::TYPE_RETURN_ORDER,
            self::TYPE_RETURN_INVOICE,
            self::TYPE_INVENTORY_TRANSFER_ORDER,
            self::TYPE_INVENTORY_TRANSFER_INVOICE,
            self::TYPE_REVERSE_CHARGE_ORDER,
            self::TYPE_REVERSE_CHARGE_INVOICE,
            self::TYPE_CUSTOMS_INVOICE,
            self::TYPE_CUSTOMS_ORDER,
            self::TYPE_ANY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServiceModeAllowableValues()
    {
        return [
            self::SERVICE_MODE_AUTOMATIC,
            self::SERVICE_MODE_LOCAL,
            self::SERVICE_MODE_REMOTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDebugLevelAllowableValues()
    {
        return [
            self::DEBUG_LEVEL_NORMAL,
            self::DEBUG_LEVEL_DIAGNOSTIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['salesperson_code'] = isset($data['salesperson_code']) ? $data['salesperson_code'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['customer_usage_type'] = isset($data['customer_usage_type']) ? $data['customer_usage_type'] : null;
        $this->container['entity_use_code'] = isset($data['entity_use_code']) ? $data['entity_use_code'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['purchase_order_no'] = isset($data['purchase_order_no']) ? $data['purchase_order_no'] : null;
        $this->container['exemption_no'] = isset($data['exemption_no']) ? $data['exemption_no'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['reference_code'] = isset($data['reference_code']) ? $data['reference_code'] : null;
        $this->container['reporting_location_code'] = isset($data['reporting_location_code']) ? $data['reporting_location_code'] : null;
        $this->container['commit'] = isset($data['commit']) ? $data['commit'] : null;
        $this->container['batch_code'] = isset($data['batch_code']) ? $data['batch_code'] : null;
        $this->container['tax_override'] = isset($data['tax_override']) ? $data['tax_override'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['service_mode'] = isset($data['service_mode']) ? $data['service_mode'] : null;
        $this->container['exchange_rate'] = isset($data['exchange_rate']) ? $data['exchange_rate'] : null;
        $this->container['exchange_rate_effective_date'] = isset($data['exchange_rate_effective_date']) ? $data['exchange_rate_effective_date'] : null;
        $this->container['pos_lane_code'] = isset($data['pos_lane_code']) ? $data['pos_lane_code'] : null;
        $this->container['business_identification_no'] = isset($data['business_identification_no']) ? $data['business_identification_no'] : null;
        $this->container['is_seller_importer_of_record'] = isset($data['is_seller_importer_of_record']) ? $data['is_seller_importer_of_record'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['debug_level'] = isset($data['debug_level']) ? $data['debug_level'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 50)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) < 0)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if (!is_null($this->container['salesperson_code']) && (mb_strlen($this->container['salesperson_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'salesperson_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['salesperson_code']) && (mb_strlen($this->container['salesperson_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'salesperson_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['customer_code'] === null) {
            $invalidProperties[] = "'customer_code' can't be null";
        }
        if ((mb_strlen($this->container['customer_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'customer_code', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['customer_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_usage_type']) && (mb_strlen($this->container['customer_usage_type']) > 25)) {
            $invalidProperties[] = "invalid value for 'customer_usage_type', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['customer_usage_type']) && (mb_strlen($this->container['customer_usage_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_usage_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['purchase_order_no']) && (mb_strlen($this->container['purchase_order_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'purchase_order_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['purchase_order_no']) && (mb_strlen($this->container['purchase_order_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'purchase_order_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['exemption_no']) && (mb_strlen($this->container['exemption_no']) > 25)) {
            $invalidProperties[] = "invalid value for 'exemption_no', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['exemption_no']) && (mb_strlen($this->container['exemption_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'exemption_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reference_code']) && (mb_strlen($this->container['reference_code']) > 1024)) {
            $invalidProperties[] = "invalid value for 'reference_code', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['reference_code']) && (mb_strlen($this->container['reference_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'reference_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reporting_location_code']) && (mb_strlen($this->container['reporting_location_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'reporting_location_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reporting_location_code']) && (mb_strlen($this->container['reporting_location_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'reporting_location_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['batch_code']) && (mb_strlen($this->container['batch_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'batch_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['batch_code']) && (mb_strlen($this->container['batch_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'batch_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['currency_code']) && (mb_strlen($this->container['currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getServiceModeAllowableValues();
        if (!is_null($this->container['service_mode']) && !in_array($this->container['service_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'service_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['pos_lane_code']) && (mb_strlen($this->container['pos_lane_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'pos_lane_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pos_lane_code']) && (mb_strlen($this->container['pos_lane_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'pos_lane_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['business_identification_no']) && (mb_strlen($this->container['business_identification_no']) > 25)) {
            $invalidProperties[] = "invalid value for 'business_identification_no', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['business_identification_no']) && (mb_strlen($this->container['business_identification_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_identification_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2048)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getDebugLevelAllowableValues();
        if (!is_null($this->container['debug_level']) && !in_array($this->container['debug_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'debug_level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code The internal reference code used by the client application.  This is used for operations such as  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction.
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($code) && (mb_strlen($code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Together\Taxes\Model\LineItemModel[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Together\Taxes\Model\LineItemModel[] $lines A list of line items that will appear on this transaction.
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Specifies the type of document to create.  A document type ending with `Invoice` is a permanent transaction  that will be recorded in AvaTax.  A document type ending with `Order` is a temporary estimate that will not  be preserved.                If you omit this value, the API will assume you want to create a `SalesOrder`.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code Company Code - Specify the code of the company creating this transaction here.  If you leave this value null,  your account's default company will be used instead.
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if (!is_null($company_code) && (mb_strlen($company_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($company_code) && (mb_strlen($company_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Transaction Date - The date on the invoice, purchase order, etc.                By default, this date will be used to calculate the tax rates for the transaction.  If you wish to use a  different date to calculate tax rates, please specify a `taxOverride` of type `taxDate`.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets salesperson_code
     *
     * @return string
     */
    public function getSalespersonCode()
    {
        return $this->container['salesperson_code'];
    }

    /**
     * Sets salesperson_code
     *
     * @param string $salesperson_code Salesperson Code - The client application salesperson reference code.
     *
     * @return $this
     */
    public function setSalespersonCode($salesperson_code)
    {
        if (!is_null($salesperson_code) && (mb_strlen($salesperson_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $salesperson_code when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($salesperson_code) && (mb_strlen($salesperson_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $salesperson_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['salesperson_code'] = $salesperson_code;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code Customer Code - The client application customer reference code.  Note: This field is case sensitive. To have exemption certificates apply, this value should  be the same as the one passed to create a customer.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        if ((mb_strlen($customer_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_code when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($customer_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_usage_type
     *
     * @return string
     */
    public function getCustomerUsageType()
    {
        return $this->container['customer_usage_type'];
    }

    /**
     * Sets customer_usage_type
     *
     * @param string $customer_usage_type DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  Customer Usage Type - The client application customer or usage type.
     *
     * @return $this
     */
    public function setCustomerUsageType($customer_usage_type)
    {
        if (!is_null($customer_usage_type) && (mb_strlen($customer_usage_type) > 25)) {
            throw new \InvalidArgumentException('invalid length for $customer_usage_type when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($customer_usage_type) && (mb_strlen($customer_usage_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_usage_type when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_usage_type'] = $customer_usage_type;

        return $this;
    }

    /**
     * Gets entity_use_code
     *
     * @return string
     */
    public function getEntityUseCode()
    {
        return $this->container['entity_use_code'];
    }

    /**
     * Sets entity_use_code
     *
     * @param string $entity_use_code Entity Use Code - The client application customer or usage type.  For a list of  available usage types, use [ListEntityUseCodes](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListEntityUseCodes/) API.
     *
     * @return $this
     */
    public function setEntityUseCode($entity_use_code)
    {
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['entity_use_code'] = $entity_use_code;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount Discount - The discount amount to apply to the document.  This value will be applied only to lines  that have the `discounted` flag set to true.  If no lines have `discounted` set to true, this discount  cannot be applied.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets purchase_order_no
     *
     * @return string
     */
    public function getPurchaseOrderNo()
    {
        return $this->container['purchase_order_no'];
    }

    /**
     * Sets purchase_order_no
     *
     * @param string $purchase_order_no Purchase Order Number for this document.                This is required for single use exemption certificates to match the order and invoice with the certificate.
     *
     * @return $this
     */
    public function setPurchaseOrderNo($purchase_order_no)
    {
        if (!is_null($purchase_order_no) && (mb_strlen($purchase_order_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_no when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($purchase_order_no) && (mb_strlen($purchase_order_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_no when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['purchase_order_no'] = $purchase_order_no;

        return $this;
    }

    /**
     * Gets exemption_no
     *
     * @return string
     */
    public function getExemptionNo()
    {
        return $this->container['exemption_no'];
    }

    /**
     * Sets exemption_no
     *
     * @param string $exemption_no Exemption Number for this document.                If you specify an exemption number for this document, this document will be considered exempt, and you  may be asked to provide proof of this exemption certificate in the event that you are asked by an auditor  to verify your exemptions.  Note: This is same as 'exemptNo' in TransactionModel.
     *
     * @return $this
     */
    public function setExemptionNo($exemption_no)
    {
        if (!is_null($exemption_no) && (mb_strlen($exemption_no) > 25)) {
            throw new \InvalidArgumentException('invalid length for $exemption_no when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($exemption_no) && (mb_strlen($exemption_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $exemption_no when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['exemption_no'] = $exemption_no;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Together\Taxes\Model\AddressesModel
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Together\Taxes\Model\AddressesModel $addresses Default addresses for all lines in this document.                These addresses are the default values that will be used for any lines that do not have their own  address information.  If you specify addresses for a line, then no default addresses will be loaded  for that line.
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Together\Taxes\Model\TransactionParameterModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Together\Taxes\Model\TransactionParameterModel[] $parameters Special parameters for this transaction.                To get a full list of available parameters, please use the [ListParameters](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListParameters/) endpoint.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets reference_code
     *
     * @return string
     */
    public function getReferenceCode()
    {
        return $this->container['reference_code'];
    }

    /**
     * Sets reference_code
     *
     * @param string $reference_code Customer-provided Reference Code with information about this transaction.                This field could be used to reference the original document for a return invoice, or for any other  reference purpose.
     *
     * @return $this
     */
    public function setReferenceCode($reference_code)
    {
        if (!is_null($reference_code) && (mb_strlen($reference_code) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $reference_code when calling CreateTransactionModel., must be smaller than or equal to 1024.');
        }
        if (!is_null($reference_code) && (mb_strlen($reference_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reference_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['reference_code'] = $reference_code;

        return $this;
    }

    /**
     * Gets reporting_location_code
     *
     * @return string
     */
    public function getReportingLocationCode()
    {
        return $this->container['reporting_location_code'];
    }

    /**
     * Sets reporting_location_code
     *
     * @param string $reporting_location_code Sets the sale location code (Outlet ID) for reporting this document to the tax authority.                This value is used by Avalara Managed Returns to group documents together by reporting locations  for tax authorities that require location-based reporting.
     *
     * @return $this
     */
    public function setReportingLocationCode($reporting_location_code)
    {
        if (!is_null($reporting_location_code) && (mb_strlen($reporting_location_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reporting_location_code when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($reporting_location_code) && (mb_strlen($reporting_location_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reporting_location_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['reporting_location_code'] = $reporting_location_code;

        return $this;
    }

    /**
     * Gets commit
     *
     * @return bool
     */
    public function getCommit()
    {
        return $this->container['commit'];
    }

    /**
     * Sets commit
     *
     * @param bool $commit Causes the document to be committed if true.  This option is only applicable for invoice document  types, not orders.
     *
     * @return $this
     */
    public function setCommit($commit)
    {
        $this->container['commit'] = $commit;

        return $this;
    }

    /**
     * Gets batch_code
     *
     * @return string
     */
    public function getBatchCode()
    {
        return $this->container['batch_code'];
    }

    /**
     * Sets batch_code
     *
     * @param string $batch_code BatchCode for batch operations.
     *
     * @return $this
     */
    public function setBatchCode($batch_code)
    {
        if (!is_null($batch_code) && (mb_strlen($batch_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $batch_code when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($batch_code) && (mb_strlen($batch_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $batch_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['batch_code'] = $batch_code;

        return $this;
    }

    /**
     * Gets tax_override
     *
     * @return \Together\Taxes\Model\TaxOverrideModel
     */
    public function getTaxOverride()
    {
        return $this->container['tax_override'];
    }

    /**
     * Sets tax_override
     *
     * @param \Together\Taxes\Model\TaxOverrideModel $tax_override Specifies a tax override for the entire document
     *
     * @return $this
     */
    public function setTaxOverride($tax_override)
    {
        $this->container['tax_override'] = $tax_override;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The three-character ISO 4217 currency code for this transaction.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if (!is_null($currency_code) && (mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CreateTransactionModel., must be smaller than or equal to 3.');
        }
        if (!is_null($currency_code) && (mb_strlen($currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets service_mode
     *
     * @return string
     */
    public function getServiceMode()
    {
        return $this->container['service_mode'];
    }

    /**
     * Sets service_mode
     *
     * @param string $service_mode Specifies whether the tax calculation is handled Local, Remote, or Automatic (default).  This only  applies when using an AvaLocal server.
     *
     * @return $this
     */
    public function setServiceMode($service_mode)
    {
        $allowedValues = $this->getServiceModeAllowableValues();
        if (!is_null($service_mode) && !in_array($service_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_mode'] = $service_mode;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return double
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param double $exchange_rate Currency exchange rate from this transaction to the company base currency.                This only needs to be set if the transaction currency is different than the company base currency.  It defaults to 1.0.
     *
     * @return $this
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets exchange_rate_effective_date
     *
     * @return \DateTime
     */
    public function getExchangeRateEffectiveDate()
    {
        return $this->container['exchange_rate_effective_date'];
    }

    /**
     * Sets exchange_rate_effective_date
     *
     * @param \DateTime $exchange_rate_effective_date Effective date of the exchange rate.
     *
     * @return $this
     */
    public function setExchangeRateEffectiveDate($exchange_rate_effective_date)
    {
        $this->container['exchange_rate_effective_date'] = $exchange_rate_effective_date;

        return $this;
    }

    /**
     * Gets pos_lane_code
     *
     * @return string
     */
    public function getPosLaneCode()
    {
        return $this->container['pos_lane_code'];
    }

    /**
     * Sets pos_lane_code
     *
     * @param string $pos_lane_code Sets the Point of Sale Lane Code sent by the User for this document.
     *
     * @return $this
     */
    public function setPosLaneCode($pos_lane_code)
    {
        if (!is_null($pos_lane_code) && (mb_strlen($pos_lane_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $pos_lane_code when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($pos_lane_code) && (mb_strlen($pos_lane_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pos_lane_code when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['pos_lane_code'] = $pos_lane_code;

        return $this;
    }

    /**
     * Gets business_identification_no
     *
     * @return string
     */
    public function getBusinessIdentificationNo()
    {
        return $this->container['business_identification_no'];
    }

    /**
     * Sets business_identification_no
     *
     * @param string $business_identification_no VAT business identification number for the customer for this transaction.  This number will be used for all lines  in the transaction, except for those lines where you have defined a different business identification number.                If you specify a VAT business identification number for the customer in this transaction and you have also set up  a business identification number for your company during company setup, this transaction will be treated as a  business-to-business transaction for VAT purposes and it will be calculated according to VAT tax rules.
     *
     * @return $this
     */
    public function setBusinessIdentificationNo($business_identification_no)
    {
        if (!is_null($business_identification_no) && (mb_strlen($business_identification_no) > 25)) {
            throw new \InvalidArgumentException('invalid length for $business_identification_no when calling CreateTransactionModel., must be smaller than or equal to 25.');
        }
        if (!is_null($business_identification_no) && (mb_strlen($business_identification_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_identification_no when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['business_identification_no'] = $business_identification_no;

        return $this;
    }

    /**
     * Gets is_seller_importer_of_record
     *
     * @return bool
     */
    public function getIsSellerImporterOfRecord()
    {
        return $this->container['is_seller_importer_of_record'];
    }

    /**
     * Sets is_seller_importer_of_record
     *
     * @param bool $is_seller_importer_of_record Specifies if the transaction should have value-added and cross-border taxes calculated with the seller as the importer of record.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.                This value may also be set at the Nexus level.  See `NexusModel` for more information.
     *
     * @return $this
     */
    public function setIsSellerImporterOfRecord($is_seller_importer_of_record)
    {
        $this->container['is_seller_importer_of_record'] = $is_seller_importer_of_record;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description User-supplied description for this transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateTransactionModel., must be smaller than or equal to 2048.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email User-supplied email address relevant for this transaction.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CreateTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($email) && (mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CreateTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets debug_level
     *
     * @return string
     */
    public function getDebugLevel()
    {
        return $this->container['debug_level'];
    }

    /**
     * Sets debug_level
     *
     * @param string $debug_level If the user wishes to request additional debug information from this transaction, specify a level higher than `normal`.
     *
     * @return $this
     */
    public function setDebugLevel($debug_level)
    {
        $allowedValues = $this->getDebugLevelAllowableValues();
        if (!is_null($debug_level) && !in_array($debug_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'debug_level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['debug_level'] = $debug_level;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


