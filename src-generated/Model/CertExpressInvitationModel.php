<?php
/**
 * CertExpressInvitationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CertExpressInvitationModel Class Doc Comment
 *
 * @category Class
 * @description Represents an invitation for a customer to use CertExpress to self-report their own certificates.  This invitation is delivered by your choice of method, or you can present a hyperlink to the user  directly in your connector.  Your customer will be redirected to https://app.certexpress.com/ where  they can follow a step-by-step guide to enter information about their exemption certificates.  The  certificates entered will be recorded and automatically linked to their customer record.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertExpressInvitationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertExpressInvitationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'recipient' => 'string',
        'customer_code' => 'string',
        'customer' => '\Swagger\Client\Model\CustomerModel',
        'cover_letter' => '\Swagger\Client\Model\CoverLetterModel',
        'email_status' => 'string',
        'cover_letters_only' => 'bool',
        'exposure_zones' => 'int[]',
        'exempt_reasons' => 'int[]',
        'delivery_method' => 'string',
        'message' => 'string',
        'date' => '\DateTime',
        'request_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'recipient' => null,
        'customer_code' => null,
        'customer' => null,
        'cover_letter' => null,
        'email_status' => null,
        'cover_letters_only' => null,
        'exposure_zones' => 'int32',
        'exempt_reasons' => 'int32',
        'delivery_method' => null,
        'message' => null,
        'date' => 'date-time',
        'request_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'recipient' => 'recipient',
        'customer_code' => 'customerCode',
        'customer' => 'customer',
        'cover_letter' => 'coverLetter',
        'email_status' => 'emailStatus',
        'cover_letters_only' => 'coverLettersOnly',
        'exposure_zones' => 'exposureZones',
        'exempt_reasons' => 'exemptReasons',
        'delivery_method' => 'deliveryMethod',
        'message' => 'message',
        'date' => 'date',
        'request_link' => 'requestLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'recipient' => 'setRecipient',
        'customer_code' => 'setCustomerCode',
        'customer' => 'setCustomer',
        'cover_letter' => 'setCoverLetter',
        'email_status' => 'setEmailStatus',
        'cover_letters_only' => 'setCoverLettersOnly',
        'exposure_zones' => 'setExposureZones',
        'exempt_reasons' => 'setExemptReasons',
        'delivery_method' => 'setDeliveryMethod',
        'message' => 'setMessage',
        'date' => 'setDate',
        'request_link' => 'setRequestLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'recipient' => 'getRecipient',
        'customer_code' => 'getCustomerCode',
        'customer' => 'getCustomer',
        'cover_letter' => 'getCoverLetter',
        'email_status' => 'getEmailStatus',
        'cover_letters_only' => 'getCoverLettersOnly',
        'exposure_zones' => 'getExposureZones',
        'exempt_reasons' => 'getExemptReasons',
        'delivery_method' => 'getDeliveryMethod',
        'message' => 'getMessage',
        'date' => 'getDate',
        'request_link' => 'getRequestLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_METHOD_EMAIL = 'Email';
    const DELIVERY_METHOD_FAX = 'Fax';
    const DELIVERY_METHOD_DOWNLOAD = 'Download';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_EMAIL,
            self::DELIVERY_METHOD_FAX,
            self::DELIVERY_METHOD_DOWNLOAD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['cover_letter'] = isset($data['cover_letter']) ? $data['cover_letter'] : null;
        $this->container['email_status'] = isset($data['email_status']) ? $data['email_status'] : null;
        $this->container['cover_letters_only'] = isset($data['cover_letters_only']) ? $data['cover_letters_only'] : null;
        $this->container['exposure_zones'] = isset($data['exposure_zones']) ? $data['exposure_zones'] : null;
        $this->container['exempt_reasons'] = isset($data['exempt_reasons']) ? $data['exempt_reasons'] : null;
        $this->container['delivery_method'] = isset($data['delivery_method']) ? $data['delivery_method'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['request_link'] = isset($data['request_link']) ? $data['request_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id A unique ID number representing this CertExpress invitation.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the AvaTax company that sent this invitation.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient The email address to which this invitation was sent.  If this invitation was presented as a weblink, this value will be null.
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code The unique code of the customer that received this invitation.  Note: This field is case sensitive. To have exemption certificates apply, this value should  be the same as the one passed to create a customer.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Swagger\Client\Model\CustomerModel
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Swagger\Client\Model\CustomerModel $customer The customer who received this invitation.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets cover_letter
     *
     * @return \Swagger\Client\Model\CoverLetterModel
     */
    public function getCoverLetter()
    {
        return $this->container['cover_letter'];
    }

    /**
     * Sets cover_letter
     *
     * @param \Swagger\Client\Model\CoverLetterModel $cover_letter The attached cover letter object to this request.
     *
     * @return $this
     */
    public function setCoverLetter($cover_letter)
    {
        $this->container['cover_letter'] = $cover_letter;

        return $this;
    }

    /**
     * Gets email_status
     *
     * @return string
     */
    public function getEmailStatus()
    {
        return $this->container['email_status'];
    }

    /**
     * Sets email_status
     *
     * @param string $email_status The status of the emails associated with this invitation.  If this invitation was sent via email,  this value will change to `Sent` when the email message has been sent.
     *
     * @return $this
     */
    public function setEmailStatus($email_status)
    {
        $this->container['email_status'] = $email_status;

        return $this;
    }

    /**
     * Gets cover_letters_only
     *
     * @return bool
     */
    public function getCoverLettersOnly()
    {
        return $this->container['cover_letters_only'];
    }

    /**
     * Sets cover_letters_only
     *
     * @param bool $cover_letters_only True if this invitation contained a cover letter only.
     *
     * @return $this
     */
    public function setCoverLettersOnly($cover_letters_only)
    {
        $this->container['cover_letters_only'] = $cover_letters_only;

        return $this;
    }

    /**
     * Gets exposure_zones
     *
     * @return int[]
     */
    public function getExposureZones()
    {
        return $this->container['exposure_zones'];
    }

    /**
     * Sets exposure_zones
     *
     * @param int[] $exposure_zones When an invitation is sent, it contains a list of exposure zones for which the customer is invited to upload  their exemption certificates.  This list contains the ID numbers of the exposure zones identified.                For a list of exposure zones, please call `ListCertificateExposureZones`.
     *
     * @return $this
     */
    public function setExposureZones($exposure_zones)
    {
        $this->container['exposure_zones'] = $exposure_zones;

        return $this;
    }

    /**
     * Gets exempt_reasons
     *
     * @return int[]
     */
    public function getExemptReasons()
    {
        return $this->container['exempt_reasons'];
    }

    /**
     * Sets exempt_reasons
     *
     * @param int[] $exempt_reasons The list of exemption reasons identified by this CertExpress invitation.                For a list of reason codes, please call `ListCertificateExemptReasons`.
     *
     * @return $this
     */
    public function setExemptReasons($exempt_reasons)
    {
        $this->container['exempt_reasons'] = $exempt_reasons;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method Indicates the method that was used to deliver this CertExpress invitation.
     *
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($delivery_method) && !in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The custom message delivered with this invitation.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date of the invitation.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets request_link
     *
     * @return string
     */
    public function getRequestLink()
    {
        return $this->container['request_link'];
    }

    /**
     * Sets request_link
     *
     * @param string $request_link The web link (URL) that a customer can click on or visit to begin using this CertExpress invitation.                This value is only usable if the status of this invitation is `Ready` and the request was created with type `Download`.  NOTE: This link usually takes a few minutes to be available.
     *
     * @return $this
     */
    public function setRequestLink($request_link)
    {
        $this->container['request_link'] = $request_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


