<?php
/**
 * LocationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * LocationModel Class Doc Comment
 *
 * @category Class
 * @description A location where this company does business.  Some jurisdictions may require you to list all locations where your company does business.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LocationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'location_code' => 'string',
        'description' => 'string',
        'address_type_id' => 'string',
        'address_category_id' => 'string',
        'line1' => 'string',
        'line2' => 'string',
        'line3' => 'string',
        'city' => 'string',
        'county' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'is_default' => 'bool',
        'is_registered' => 'bool',
        'dba_name' => 'string',
        'outlet_name' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'last_transaction_date' => '\DateTime',
        'registered_date' => '\DateTime',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'settings' => '\Together\Taxes\Model\LocationSettingModel[]',
        'parameters' => '\Together\Taxes\Model\LocationParameterModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'location_code' => null,
        'description' => null,
        'address_type_id' => null,
        'address_category_id' => null,
        'line1' => null,
        'line2' => null,
        'line3' => null,
        'city' => null,
        'county' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null,
        'is_default' => null,
        'is_registered' => null,
        'dba_name' => null,
        'outlet_name' => null,
        'effective_date' => 'date',
        'end_date' => 'date',
        'last_transaction_date' => 'date-time',
        'registered_date' => 'date-time',
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'settings' => null,
        'parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'location_code' => 'locationCode',
        'description' => 'description',
        'address_type_id' => 'addressTypeId',
        'address_category_id' => 'addressCategoryId',
        'line1' => 'line1',
        'line2' => 'line2',
        'line3' => 'line3',
        'city' => 'city',
        'county' => 'county',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'is_default' => 'isDefault',
        'is_registered' => 'isRegistered',
        'dba_name' => 'dbaName',
        'outlet_name' => 'outletName',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'last_transaction_date' => 'lastTransactionDate',
        'registered_date' => 'registeredDate',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'settings' => 'settings',
        'parameters' => 'parameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'location_code' => 'setLocationCode',
        'description' => 'setDescription',
        'address_type_id' => 'setAddressTypeId',
        'address_category_id' => 'setAddressCategoryId',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'line3' => 'setLine3',
        'city' => 'setCity',
        'county' => 'setCounty',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'is_default' => 'setIsDefault',
        'is_registered' => 'setIsRegistered',
        'dba_name' => 'setDbaName',
        'outlet_name' => 'setOutletName',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'last_transaction_date' => 'setLastTransactionDate',
        'registered_date' => 'setRegisteredDate',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'settings' => 'setSettings',
        'parameters' => 'setParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'location_code' => 'getLocationCode',
        'description' => 'getDescription',
        'address_type_id' => 'getAddressTypeId',
        'address_category_id' => 'getAddressCategoryId',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'line3' => 'getLine3',
        'city' => 'getCity',
        'county' => 'getCounty',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'is_default' => 'getIsDefault',
        'is_registered' => 'getIsRegistered',
        'dba_name' => 'getDbaName',
        'outlet_name' => 'getOutletName',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'last_transaction_date' => 'getLastTransactionDate',
        'registered_date' => 'getRegisteredDate',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'settings' => 'getSettings',
        'parameters' => 'getParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDRESS_TYPE_ID_LOCATION = 'Location';
    const ADDRESS_TYPE_ID_SALESPERSON = 'Salesperson';
    const ADDRESS_TYPE_ID_MARKETPLACE = 'Marketplace';
    const ADDRESS_CATEGORY_ID_STOREFRONT = 'Storefront';
    const ADDRESS_CATEGORY_ID_MAIN_OFFICE = 'MainOffice';
    const ADDRESS_CATEGORY_ID_WAREHOUSE = 'Warehouse';
    const ADDRESS_CATEGORY_ID_SALESPERSON = 'Salesperson';
    const ADDRESS_CATEGORY_ID_OTHER = 'Other';
    const ADDRESS_CATEGORY_ID_SELLER_REMITS_TAX = 'SellerRemitsTax';
    const ADDRESS_CATEGORY_ID_MARKETPLACE_REMITS_TAX = 'MarketplaceRemitsTax';
    const ADDRESS_CATEGORY_ID_NON_PHYSICAL = 'NonPhysical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeIdAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_ID_LOCATION,
            self::ADDRESS_TYPE_ID_SALESPERSON,
            self::ADDRESS_TYPE_ID_MARKETPLACE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressCategoryIdAllowableValues()
    {
        return [
            self::ADDRESS_CATEGORY_ID_STOREFRONT,
            self::ADDRESS_CATEGORY_ID_MAIN_OFFICE,
            self::ADDRESS_CATEGORY_ID_WAREHOUSE,
            self::ADDRESS_CATEGORY_ID_SALESPERSON,
            self::ADDRESS_CATEGORY_ID_OTHER,
            self::ADDRESS_CATEGORY_ID_SELLER_REMITS_TAX,
            self::ADDRESS_CATEGORY_ID_MARKETPLACE_REMITS_TAX,
            self::ADDRESS_CATEGORY_ID_NON_PHYSICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['address_type_id'] = isset($data['address_type_id']) ? $data['address_type_id'] : null;
        $this->container['address_category_id'] = isset($data['address_category_id']) ? $data['address_category_id'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['line3'] = isset($data['line3']) ? $data['line3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['is_registered'] = isset($data['is_registered']) ? $data['is_registered'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['outlet_name'] = isset($data['outlet_name']) ? $data['outlet_name'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['last_transaction_date'] = isset($data['last_transaction_date']) ? $data['last_transaction_date'] : null;
        $this->container['registered_date'] = isset($data['registered_date']) ? $data['registered_date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['location_code'] === null) {
            $invalidProperties[] = "'location_code' can't be null";
        }
        if ((mb_strlen($this->container['location_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'location_code', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['location_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'location_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['address_type_id'] === null) {
            $invalidProperties[] = "'address_type_id' can't be null";
        }
        $allowedValues = $this->getAddressTypeIdAllowableValues();
        if (!is_null($this->container['address_type_id']) && !in_array($this->container['address_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['address_category_id'] === null) {
            $invalidProperties[] = "'address_category_id' can't be null";
        }
        $allowedValues = $this->getAddressCategoryIdAllowableValues();
        if (!is_null($this->container['address_category_id']) && !in_array($this->container['address_category_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_category_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['line1'] === null) {
            $invalidProperties[] = "'line1' can't be null";
        }
        if ((mb_strlen($this->container['line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line3']) && (mb_strlen($this->container['line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line3']) && (mb_strlen($this->container['line3']) < 0)) {
            $invalidProperties[] = "invalid value for 'line3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 50)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) < 0)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ((mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if (!is_null($this->container['dba_name']) && (mb_strlen($this->container['dba_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'dba_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['dba_name']) && (mb_strlen($this->container['dba_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'dba_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outlet_name']) && (mb_strlen($this->container['outlet_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'outlet_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['outlet_name']) && (mb_strlen($this->container['outlet_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'outlet_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this location.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company that operates at this location.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code A code that identifies this location.  Must be unique within your company.
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        if ((mb_strlen($location_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $location_code when calling LocationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($location_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $location_code when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A friendly name for this location.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling LocationModel., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets address_type_id
     *
     * @return string
     */
    public function getAddressTypeId()
    {
        return $this->container['address_type_id'];
    }

    /**
     * Sets address_type_id
     *
     * @param string $address_type_id Indicates whether this location is a physical place of business or a temporary salesperson location.
     *
     * @return $this
     */
    public function setAddressTypeId($address_type_id)
    {
        $allowedValues = $this->getAddressTypeIdAllowableValues();
        if (!in_array($address_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_type_id'] = $address_type_id;

        return $this;
    }

    /**
     * Gets address_category_id
     *
     * @return string
     */
    public function getAddressCategoryId()
    {
        return $this->container['address_category_id'];
    }

    /**
     * Sets address_category_id
     *
     * @param string $address_category_id Indicates the type of place of business represented by this location.
     *
     * @return $this
     */
    public function setAddressCategoryId($address_category_id)
    {
        $allowedValues = $this->getAddressCategoryIdAllowableValues();
        if (!in_array($address_category_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_category_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_category_id'] = $address_category_id;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 The first line of the physical address of this location.
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        if ((mb_strlen($line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling LocationModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 The second line of the physical address of this location.
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        if (!is_null($line2) && (mb_strlen($line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling LocationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line2) && (mb_strlen($line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets line3
     *
     * @return string
     */
    public function getLine3()
    {
        return $this->container['line3'];
    }

    /**
     * Sets line3
     *
     * @param string $line3 The third line of the physical address of this location.
     *
     * @return $this
     */
    public function setLine3($line3)
    {
        if (!is_null($line3) && (mb_strlen($line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line3 when calling LocationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line3) && (mb_strlen($line3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line3 when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['line3'] = $line3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the physical address of this location.
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling LocationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county The county name of the physical address of this location.  Not required.
     *
     * @return $this
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (mb_strlen($county) > 50)) {
            throw new \InvalidArgumentException('invalid length for $county when calling LocationModel., must be smaller than or equal to 50.');
        }
        if (!is_null($county) && (mb_strlen($county) < 0)) {
            throw new \InvalidArgumentException('invalid length for $county when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country of the physical address of this location.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code The postal code or zip code of the physical address of this location.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling LocationModel., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country of the physical address of this location.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default Set this flag to true to indicate that this is the default location for this company.
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_registered
     *
     * @return bool
     */
    public function getIsRegistered()
    {
        return $this->container['is_registered'];
    }

    /**
     * Sets is_registered
     *
     * @param bool $is_registered Set this flag to true to indicate that this location has been registered with a tax authority.
     *
     * @return $this
     */
    public function setIsRegistered($is_registered)
    {
        $this->container['is_registered'] = $is_registered;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name If this location has a different business name from its legal entity name, specify the \"Doing Business As\" name for this location.
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        if (!is_null($dba_name) && (mb_strlen($dba_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $dba_name when calling LocationModel., must be smaller than or equal to 100.');
        }
        if (!is_null($dba_name) && (mb_strlen($dba_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $dba_name when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets outlet_name
     *
     * @return string
     */
    public function getOutletName()
    {
        return $this->container['outlet_name'];
    }

    /**
     * Sets outlet_name
     *
     * @param string $outlet_name A friendly name for this location.
     *
     * @return $this
     */
    public function setOutletName($outlet_name)
    {
        if (!is_null($outlet_name) && (mb_strlen($outlet_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $outlet_name when calling LocationModel., must be smaller than or equal to 100.');
        }
        if (!is_null($outlet_name) && (mb_strlen($outlet_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $outlet_name when calling LocationModel., must be bigger than or equal to 0.');
        }

        $this->container['outlet_name'] = $outlet_name;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date when this location was opened for business, or null if not known.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date If this place of business has closed, the date when this location closed business.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets last_transaction_date
     *
     * @return \DateTime
     */
    public function getLastTransactionDate()
    {
        return $this->container['last_transaction_date'];
    }

    /**
     * Sets last_transaction_date
     *
     * @param \DateTime $last_transaction_date The most recent date when a transaction was processed for this location.  Set by AvaTax.
     *
     * @return $this
     */
    public function setLastTransactionDate($last_transaction_date)
    {
        $this->container['last_transaction_date'] = $last_transaction_date;

        return $this;
    }

    /**
     * Gets registered_date
     *
     * @return \DateTime
     */
    public function getRegisteredDate()
    {
        return $this->container['registered_date'];
    }

    /**
     * Sets registered_date
     *
     * @param \DateTime $registered_date The date when this location was registered with a tax authority.  Not required.
     *
     * @return $this
     */
    public function setRegisteredDate($registered_date)
    {
        $this->container['registered_date'] = $registered_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Together\Taxes\Model\LocationSettingModel[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Together\Taxes\Model\LocationSettingModel[] $settings Extra information required by certain jurisdictions for filing.  For a list of settings recognized by Avalara, query the endpoint \"/api/v2/definitions/locationquestions\".  To determine the list of settings required for this location, query the endpoint \"/api/v2/companies/(id)/locations/(id)/validate\".
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Together\Taxes\Model\LocationParameterModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Together\Taxes\Model\LocationParameterModel[] $parameters List of location parameters.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


