<?php
/**
 * FirmClientLinkageOutputModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FirmClientLinkageOutputModel Class Doc Comment
 *
 * @category Class
 * @description Account Linkage output model
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FirmClientLinkageOutputModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FirmClientLinkageOutputModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'firm_account_id' => 'int',
        'firm_account_name' => 'string',
        'client_account_id' => 'int',
        'client_account_name' => 'string',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'status' => 'string',
        'is_deleted' => 'bool',
        'firm_contact_name' => 'string',
        'firm_contact_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'firm_account_id' => 'int32',
        'firm_account_name' => null,
        'client_account_id' => 'int32',
        'client_account_name' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'status' => null,
        'is_deleted' => null,
        'firm_contact_name' => null,
        'firm_contact_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'firm_account_id' => 'firmAccountId',
        'firm_account_name' => 'firmAccountName',
        'client_account_id' => 'clientAccountId',
        'client_account_name' => 'clientAccountName',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'status' => 'status',
        'is_deleted' => 'isDeleted',
        'firm_contact_name' => 'firmContactName',
        'firm_contact_email' => 'firmContactEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'firm_account_id' => 'setFirmAccountId',
        'firm_account_name' => 'setFirmAccountName',
        'client_account_id' => 'setClientAccountId',
        'client_account_name' => 'setClientAccountName',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'status' => 'setStatus',
        'is_deleted' => 'setIsDeleted',
        'firm_contact_name' => 'setFirmContactName',
        'firm_contact_email' => 'setFirmContactEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'firm_account_id' => 'getFirmAccountId',
        'firm_account_name' => 'getFirmAccountName',
        'client_account_id' => 'getClientAccountId',
        'client_account_name' => 'getClientAccountName',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'status' => 'getStatus',
        'is_deleted' => 'getIsDeleted',
        'firm_contact_name' => 'getFirmContactName',
        'firm_contact_email' => 'getFirmContactEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_REQUESTED = 'Requested';
    const STATUS_APPROVED = 'Approved';
    const STATUS_REJECTED = 'Rejected';
    const STATUS_REVOKED = 'Revoked';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_REQUESTED,
            self::STATUS_APPROVED,
            self::STATUS_REJECTED,
            self::STATUS_REVOKED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['firm_account_id'] = isset($data['firm_account_id']) ? $data['firm_account_id'] : null;
        $this->container['firm_account_name'] = isset($data['firm_account_name']) ? $data['firm_account_name'] : null;
        $this->container['client_account_id'] = isset($data['client_account_id']) ? $data['client_account_id'] : null;
        $this->container['client_account_name'] = isset($data['client_account_name']) ? $data['client_account_name'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : null;
        $this->container['firm_contact_name'] = isset($data['firm_contact_name']) ? $data['firm_contact_name'] : null;
        $this->container['firm_contact_email'] = isset($data['firm_contact_email']) ? $data['firm_contact_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of firm-client linkage.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets firm_account_id
     *
     * @return int
     */
    public function getFirmAccountId()
    {
        return $this->container['firm_account_id'];
    }

    /**
     * Sets firm_account_id
     *
     * @param int $firm_account_id Firm Account to be linked with the firm
     *
     * @return $this
     */
    public function setFirmAccountId($firm_account_id)
    {
        $this->container['firm_account_id'] = $firm_account_id;

        return $this;
    }

    /**
     * Gets firm_account_name
     *
     * @return string
     */
    public function getFirmAccountName()
    {
        return $this->container['firm_account_name'];
    }

    /**
     * Sets firm_account_name
     *
     * @param string $firm_account_name FIrm Account name
     *
     * @return $this
     */
    public function setFirmAccountName($firm_account_name)
    {
        $this->container['firm_account_name'] = $firm_account_name;

        return $this;
    }

    /**
     * Gets client_account_id
     *
     * @return int
     */
    public function getClientAccountId()
    {
        return $this->container['client_account_id'];
    }

    /**
     * Sets client_account_id
     *
     * @param int $client_account_id Client Account to be linked with the firm
     *
     * @return $this
     */
    public function setClientAccountId($client_account_id)
    {
        $this->container['client_account_id'] = $client_account_id;

        return $this;
    }

    /**
     * Gets client_account_name
     *
     * @return string
     */
    public function getClientAccountName()
    {
        return $this->container['client_account_name'];
    }

    /**
     * Sets client_account_name
     *
     * @param string $client_account_name Client Account name
     *
     * @return $this
     */
    public function setClientAccountName($client_account_name)
    {
        $this->container['client_account_name'] = $client_account_name;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Created date of the linkage
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id User who created the linkage
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Modified date of the linkage
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id User who modified the linkage
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the account linkage. The following are the available statuses  * Requested - When a linkage is requested  * Approved - When the linkage is approved  * Rejected - When the linkage is rejected  * Revoked - When the linkage is revoked.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool $is_deleted This is set to 1 if the linkage is deleted.
     *
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets firm_contact_name
     *
     * @return string
     */
    public function getFirmContactName()
    {
        return $this->container['firm_contact_name'];
    }

    /**
     * Sets firm_contact_name
     *
     * @param string $firm_contact_name Name of the firm's point of contact person for the client
     *
     * @return $this
     */
    public function setFirmContactName($firm_contact_name)
    {
        $this->container['firm_contact_name'] = $firm_contact_name;

        return $this;
    }

    /**
     * Gets firm_contact_email
     *
     * @return string
     */
    public function getFirmContactEmail()
    {
        return $this->container['firm_contact_email'];
    }

    /**
     * Sets firm_contact_email
     *
     * @param string $firm_contact_email Email of the firm's point of contact person for the client
     *
     * @return $this
     */
    public function setFirmContactEmail($firm_contact_email)
    {
        $this->container['firm_contact_email'] = $firm_contact_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


