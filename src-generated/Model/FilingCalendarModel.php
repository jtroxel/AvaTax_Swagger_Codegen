<?php
/**
 * FilingCalendarModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FilingCalendarModel Class Doc Comment
 *
 * @category Class
 * @description Represents a commitment to file a tax return on a recurring basis.  Only used if you subscribe to Avalara Returns.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FilingCalendarModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FilingCalendarModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'return_name' => 'string',
        'form_country' => 'string',
        'form_region' => 'string',
        'tax_form_code' => 'string',
        'fiscal_year_start_month' => 'int',
        'location_code' => 'string',
        'outlet_type_id' => 'string',
        'payment_currency' => 'string',
        'filing_frequency_id' => 'string',
        'months' => 'int',
        'state_registration_id' => 'string',
        'local_registration_id' => 'string',
        'employer_identification_number' => 'string',
        'line1' => 'string',
        'line2' => 'string',
        'city' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'mailing_address_line1' => 'string',
        'mailing_address_line2' => 'string',
        'mailing_address_city' => 'string',
        'mailing_address_region' => 'string',
        'mailing_address_postal_code' => 'string',
        'mailing_address_country' => 'string',
        'phone' => 'string',
        'customer_filing_instructions' => 'string',
        'legal_entity_name' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'filing_type_id' => 'string',
        'e_file_username' => 'string',
        'e_file_password' => 'string',
        'prepay_percentage' => 'int',
        'pre_payment_required' => 'bool',
        'fixed_prepayment_amount' => 'double',
        'tax_type_id' => 'string',
        'internal_notes' => 'string',
        'al_sign_on' => 'string',
        'al_access_code' => 'string',
        'me_business_code' => 'string',
        'ia_ben' => 'string',
        'ct_reg' => 'string',
        'other1_name' => 'string',
        'other1_value' => 'string',
        'other2_name' => 'string',
        'other2_value' => 'string',
        'other3_name' => 'string',
        'other3_value' => 'string',
        'tax_authority_id' => 'int',
        'tax_authority_name' => 'string',
        'tax_authority_type' => 'string',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'bulk_account_id' => 'string',
        'site_code' => 'string',
        'bulk_account_validation_status' => 'string',
        'settings' => '\Swagger\Client\Model\CompanyReturnSettingModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'company_id' => 'int32',
        'return_name' => null,
        'form_country' => null,
        'form_region' => null,
        'tax_form_code' => null,
        'fiscal_year_start_month' => 'int32',
        'location_code' => null,
        'outlet_type_id' => null,
        'payment_currency' => null,
        'filing_frequency_id' => null,
        'months' => 'int16',
        'state_registration_id' => null,
        'local_registration_id' => null,
        'employer_identification_number' => null,
        'line1' => null,
        'line2' => null,
        'city' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null,
        'mailing_address_line1' => null,
        'mailing_address_line2' => null,
        'mailing_address_city' => null,
        'mailing_address_region' => null,
        'mailing_address_postal_code' => null,
        'mailing_address_country' => null,
        'phone' => null,
        'customer_filing_instructions' => null,
        'legal_entity_name' => null,
        'effective_date' => 'date',
        'end_date' => 'date',
        'filing_type_id' => null,
        'e_file_username' => null,
        'e_file_password' => null,
        'prepay_percentage' => 'int32',
        'pre_payment_required' => null,
        'fixed_prepayment_amount' => 'double',
        'tax_type_id' => null,
        'internal_notes' => null,
        'al_sign_on' => null,
        'al_access_code' => null,
        'me_business_code' => null,
        'ia_ben' => null,
        'ct_reg' => null,
        'other1_name' => null,
        'other1_value' => null,
        'other2_name' => null,
        'other2_value' => null,
        'other3_name' => null,
        'other3_value' => null,
        'tax_authority_id' => 'int32',
        'tax_authority_name' => null,
        'tax_authority_type' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'bulk_account_id' => null,
        'site_code' => null,
        'bulk_account_validation_status' => null,
        'settings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'return_name' => 'returnName',
        'form_country' => 'formCountry',
        'form_region' => 'formRegion',
        'tax_form_code' => 'taxFormCode',
        'fiscal_year_start_month' => 'fiscalYearStartMonth',
        'location_code' => 'locationCode',
        'outlet_type_id' => 'outletTypeId',
        'payment_currency' => 'paymentCurrency',
        'filing_frequency_id' => 'filingFrequencyId',
        'months' => 'months',
        'state_registration_id' => 'stateRegistrationId',
        'local_registration_id' => 'localRegistrationId',
        'employer_identification_number' => 'employerIdentificationNumber',
        'line1' => 'line1',
        'line2' => 'line2',
        'city' => 'city',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'mailing_address_line1' => 'mailingAddressLine1',
        'mailing_address_line2' => 'mailingAddressLine2',
        'mailing_address_city' => 'mailingAddressCity',
        'mailing_address_region' => 'mailingAddressRegion',
        'mailing_address_postal_code' => 'mailingAddressPostalCode',
        'mailing_address_country' => 'mailingAddressCountry',
        'phone' => 'phone',
        'customer_filing_instructions' => 'customerFilingInstructions',
        'legal_entity_name' => 'legalEntityName',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'filing_type_id' => 'filingTypeId',
        'e_file_username' => 'eFileUsername',
        'e_file_password' => 'eFilePassword',
        'prepay_percentage' => 'prepayPercentage',
        'pre_payment_required' => 'prePaymentRequired',
        'fixed_prepayment_amount' => 'fixedPrepaymentAmount',
        'tax_type_id' => 'taxTypeId',
        'internal_notes' => 'internalNotes',
        'al_sign_on' => 'alSignOn',
        'al_access_code' => 'alAccessCode',
        'me_business_code' => 'meBusinessCode',
        'ia_ben' => 'iaBen',
        'ct_reg' => 'ctReg',
        'other1_name' => 'other1Name',
        'other1_value' => 'other1Value',
        'other2_name' => 'other2Name',
        'other2_value' => 'other2Value',
        'other3_name' => 'other3Name',
        'other3_value' => 'other3Value',
        'tax_authority_id' => 'taxAuthorityId',
        'tax_authority_name' => 'taxAuthorityName',
        'tax_authority_type' => 'taxAuthorityType',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'bulk_account_id' => 'bulkAccountId',
        'site_code' => 'siteCode',
        'bulk_account_validation_status' => 'bulkAccountValidationStatus',
        'settings' => 'settings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'return_name' => 'setReturnName',
        'form_country' => 'setFormCountry',
        'form_region' => 'setFormRegion',
        'tax_form_code' => 'setTaxFormCode',
        'fiscal_year_start_month' => 'setFiscalYearStartMonth',
        'location_code' => 'setLocationCode',
        'outlet_type_id' => 'setOutletTypeId',
        'payment_currency' => 'setPaymentCurrency',
        'filing_frequency_id' => 'setFilingFrequencyId',
        'months' => 'setMonths',
        'state_registration_id' => 'setStateRegistrationId',
        'local_registration_id' => 'setLocalRegistrationId',
        'employer_identification_number' => 'setEmployerIdentificationNumber',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'city' => 'setCity',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'mailing_address_line1' => 'setMailingAddressLine1',
        'mailing_address_line2' => 'setMailingAddressLine2',
        'mailing_address_city' => 'setMailingAddressCity',
        'mailing_address_region' => 'setMailingAddressRegion',
        'mailing_address_postal_code' => 'setMailingAddressPostalCode',
        'mailing_address_country' => 'setMailingAddressCountry',
        'phone' => 'setPhone',
        'customer_filing_instructions' => 'setCustomerFilingInstructions',
        'legal_entity_name' => 'setLegalEntityName',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'filing_type_id' => 'setFilingTypeId',
        'e_file_username' => 'setEFileUsername',
        'e_file_password' => 'setEFilePassword',
        'prepay_percentage' => 'setPrepayPercentage',
        'pre_payment_required' => 'setPrePaymentRequired',
        'fixed_prepayment_amount' => 'setFixedPrepaymentAmount',
        'tax_type_id' => 'setTaxTypeId',
        'internal_notes' => 'setInternalNotes',
        'al_sign_on' => 'setAlSignOn',
        'al_access_code' => 'setAlAccessCode',
        'me_business_code' => 'setMeBusinessCode',
        'ia_ben' => 'setIaBen',
        'ct_reg' => 'setCtReg',
        'other1_name' => 'setOther1Name',
        'other1_value' => 'setOther1Value',
        'other2_name' => 'setOther2Name',
        'other2_value' => 'setOther2Value',
        'other3_name' => 'setOther3Name',
        'other3_value' => 'setOther3Value',
        'tax_authority_id' => 'setTaxAuthorityId',
        'tax_authority_name' => 'setTaxAuthorityName',
        'tax_authority_type' => 'setTaxAuthorityType',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'bulk_account_id' => 'setBulkAccountId',
        'site_code' => 'setSiteCode',
        'bulk_account_validation_status' => 'setBulkAccountValidationStatus',
        'settings' => 'setSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'return_name' => 'getReturnName',
        'form_country' => 'getFormCountry',
        'form_region' => 'getFormRegion',
        'tax_form_code' => 'getTaxFormCode',
        'fiscal_year_start_month' => 'getFiscalYearStartMonth',
        'location_code' => 'getLocationCode',
        'outlet_type_id' => 'getOutletTypeId',
        'payment_currency' => 'getPaymentCurrency',
        'filing_frequency_id' => 'getFilingFrequencyId',
        'months' => 'getMonths',
        'state_registration_id' => 'getStateRegistrationId',
        'local_registration_id' => 'getLocalRegistrationId',
        'employer_identification_number' => 'getEmployerIdentificationNumber',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'city' => 'getCity',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'mailing_address_line1' => 'getMailingAddressLine1',
        'mailing_address_line2' => 'getMailingAddressLine2',
        'mailing_address_city' => 'getMailingAddressCity',
        'mailing_address_region' => 'getMailingAddressRegion',
        'mailing_address_postal_code' => 'getMailingAddressPostalCode',
        'mailing_address_country' => 'getMailingAddressCountry',
        'phone' => 'getPhone',
        'customer_filing_instructions' => 'getCustomerFilingInstructions',
        'legal_entity_name' => 'getLegalEntityName',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'filing_type_id' => 'getFilingTypeId',
        'e_file_username' => 'getEFileUsername',
        'e_file_password' => 'getEFilePassword',
        'prepay_percentage' => 'getPrepayPercentage',
        'pre_payment_required' => 'getPrePaymentRequired',
        'fixed_prepayment_amount' => 'getFixedPrepaymentAmount',
        'tax_type_id' => 'getTaxTypeId',
        'internal_notes' => 'getInternalNotes',
        'al_sign_on' => 'getAlSignOn',
        'al_access_code' => 'getAlAccessCode',
        'me_business_code' => 'getMeBusinessCode',
        'ia_ben' => 'getIaBen',
        'ct_reg' => 'getCtReg',
        'other1_name' => 'getOther1Name',
        'other1_value' => 'getOther1Value',
        'other2_name' => 'getOther2Name',
        'other2_value' => 'getOther2Value',
        'other3_name' => 'getOther3Name',
        'other3_value' => 'getOther3Value',
        'tax_authority_id' => 'getTaxAuthorityId',
        'tax_authority_name' => 'getTaxAuthorityName',
        'tax_authority_type' => 'getTaxAuthorityType',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'bulk_account_id' => 'getBulkAccountId',
        'site_code' => 'getSiteCode',
        'bulk_account_validation_status' => 'getBulkAccountValidationStatus',
        'settings' => 'getSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OUTLET_TYPE_ID_NONE = 'None';
    const OUTLET_TYPE_ID_SCHEDULE = 'Schedule';
    const OUTLET_TYPE_ID_DUPLICATE = 'Duplicate';
    const OUTLET_TYPE_ID_CONSOLIDATED = 'Consolidated';
    const FILING_FREQUENCY_ID_MONTHLY = 'Monthly';
    const FILING_FREQUENCY_ID_QUARTERLY = 'Quarterly';
    const FILING_FREQUENCY_ID_SEMI_ANNUALLY = 'SemiAnnually';
    const FILING_FREQUENCY_ID_ANNUALLY = 'Annually';
    const FILING_FREQUENCY_ID_BIMONTHLY = 'Bimonthly';
    const FILING_FREQUENCY_ID_OCCASIONAL = 'Occasional';
    const FILING_FREQUENCY_ID_INVERSE_QUARTERLY = 'InverseQuarterly';
    const FILING_FREQUENCY_ID_WEEKLY = 'Weekly';
    const FILING_TYPE_ID_PAPER_RETURN = 'PaperReturn';
    const FILING_TYPE_ID_ELECTRONIC_RETURN = 'ElectronicReturn';
    const FILING_TYPE_ID_SER = 'SER';
    const FILING_TYPE_ID_EFT_PAPER = 'EFTPaper';
    const FILING_TYPE_ID_PHONE_PAPER = 'PhonePaper';
    const FILING_TYPE_ID_SIGNATURE_READY = 'SignatureReady';
    const FILING_TYPE_ID_EFILE_CHECK = 'EfileCheck';
    const TAX_TYPE_ID_E = 'E';
    const TAX_TYPE_ID_LODGING = 'Lodging';
    const TAX_TYPE_ID_BOTTLE = 'Bottle';
    const TAX_TYPE_ID_RENT_TO_OWN = 'RentToOwn';
    const TAX_TYPE_ID_ALL = 'All';
    const TAX_TYPE_ID_BOTH_SALES_AND_USE_TAX = 'BothSalesAndUseTax';
    const TAX_TYPE_ID_CONSUMER_USE_TAX = 'ConsumerUseTax';
    const TAX_TYPE_ID_CONSUMERS_USE_AND_SELLERS_USE_TAX = 'ConsumersUseAndSellersUseTax';
    const TAX_TYPE_ID_CONSUMER_USE_AND_SALES_TAX = 'ConsumerUseAndSalesTax';
    const TAX_TYPE_ID_FEE = 'Fee';
    const TAX_TYPE_ID_VAT_INPUT_TAX = 'VATInputTax';
    const TAX_TYPE_ID_LIGHT_BULBS = 'LightBulbs';
    const TAX_TYPE_ID_MEALS = 'Meals';
    const TAX_TYPE_ID_VAT_NONRECOVERABLE_INPUT_TAX = 'VATNonrecoverableInputTax';
    const TAX_TYPE_ID_VAT_OUTPUT_TAX = 'VATOutputTax';
    const TAX_TYPE_ID_RENTAL = 'Rental';
    const TAX_TYPE_ID_SALES_TAX = 'SalesTax';
    const TAX_TYPE_ID_USE_TAX = 'UseTax';
    const TAX_TYPE_ID_E_WASTE = 'EWaste';
    const TAX_TYPE_ID_BATTERIES = 'Batteries';
    const BULK_ACCOUNT_VALIDATION_STATUS__NEW = 'New';
    const BULK_ACCOUNT_VALIDATION_STATUS_ADDED = 'Added';
    const BULK_ACCOUNT_VALIDATION_STATUS_FAILED = 'Failed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutletTypeIdAllowableValues()
    {
        return [
            self::OUTLET_TYPE_ID_NONE,
            self::OUTLET_TYPE_ID_SCHEDULE,
            self::OUTLET_TYPE_ID_DUPLICATE,
            self::OUTLET_TYPE_ID_CONSOLIDATED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingFrequencyIdAllowableValues()
    {
        return [
            self::FILING_FREQUENCY_ID_MONTHLY,
            self::FILING_FREQUENCY_ID_QUARTERLY,
            self::FILING_FREQUENCY_ID_SEMI_ANNUALLY,
            self::FILING_FREQUENCY_ID_ANNUALLY,
            self::FILING_FREQUENCY_ID_BIMONTHLY,
            self::FILING_FREQUENCY_ID_OCCASIONAL,
            self::FILING_FREQUENCY_ID_INVERSE_QUARTERLY,
            self::FILING_FREQUENCY_ID_WEEKLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingTypeIdAllowableValues()
    {
        return [
            self::FILING_TYPE_ID_PAPER_RETURN,
            self::FILING_TYPE_ID_ELECTRONIC_RETURN,
            self::FILING_TYPE_ID_SER,
            self::FILING_TYPE_ID_EFT_PAPER,
            self::FILING_TYPE_ID_PHONE_PAPER,
            self::FILING_TYPE_ID_SIGNATURE_READY,
            self::FILING_TYPE_ID_EFILE_CHECK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxTypeIdAllowableValues()
    {
        return [
            self::TAX_TYPE_ID_E,
            self::TAX_TYPE_ID_LODGING,
            self::TAX_TYPE_ID_BOTTLE,
            self::TAX_TYPE_ID_RENT_TO_OWN,
            self::TAX_TYPE_ID_ALL,
            self::TAX_TYPE_ID_BOTH_SALES_AND_USE_TAX,
            self::TAX_TYPE_ID_CONSUMER_USE_TAX,
            self::TAX_TYPE_ID_CONSUMERS_USE_AND_SELLERS_USE_TAX,
            self::TAX_TYPE_ID_CONSUMER_USE_AND_SALES_TAX,
            self::TAX_TYPE_ID_FEE,
            self::TAX_TYPE_ID_VAT_INPUT_TAX,
            self::TAX_TYPE_ID_LIGHT_BULBS,
            self::TAX_TYPE_ID_MEALS,
            self::TAX_TYPE_ID_VAT_NONRECOVERABLE_INPUT_TAX,
            self::TAX_TYPE_ID_VAT_OUTPUT_TAX,
            self::TAX_TYPE_ID_RENTAL,
            self::TAX_TYPE_ID_SALES_TAX,
            self::TAX_TYPE_ID_USE_TAX,
            self::TAX_TYPE_ID_E_WASTE,
            self::TAX_TYPE_ID_BATTERIES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBulkAccountValidationStatusAllowableValues()
    {
        return [
            self::BULK_ACCOUNT_VALIDATION_STATUS__NEW,
            self::BULK_ACCOUNT_VALIDATION_STATUS_ADDED,
            self::BULK_ACCOUNT_VALIDATION_STATUS_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['return_name'] = isset($data['return_name']) ? $data['return_name'] : null;
        $this->container['form_country'] = isset($data['form_country']) ? $data['form_country'] : null;
        $this->container['form_region'] = isset($data['form_region']) ? $data['form_region'] : null;
        $this->container['tax_form_code'] = isset($data['tax_form_code']) ? $data['tax_form_code'] : null;
        $this->container['fiscal_year_start_month'] = isset($data['fiscal_year_start_month']) ? $data['fiscal_year_start_month'] : null;
        $this->container['location_code'] = isset($data['location_code']) ? $data['location_code'] : null;
        $this->container['outlet_type_id'] = isset($data['outlet_type_id']) ? $data['outlet_type_id'] : null;
        $this->container['payment_currency'] = isset($data['payment_currency']) ? $data['payment_currency'] : null;
        $this->container['filing_frequency_id'] = isset($data['filing_frequency_id']) ? $data['filing_frequency_id'] : null;
        $this->container['months'] = isset($data['months']) ? $data['months'] : null;
        $this->container['state_registration_id'] = isset($data['state_registration_id']) ? $data['state_registration_id'] : null;
        $this->container['local_registration_id'] = isset($data['local_registration_id']) ? $data['local_registration_id'] : null;
        $this->container['employer_identification_number'] = isset($data['employer_identification_number']) ? $data['employer_identification_number'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['mailing_address_line1'] = isset($data['mailing_address_line1']) ? $data['mailing_address_line1'] : null;
        $this->container['mailing_address_line2'] = isset($data['mailing_address_line2']) ? $data['mailing_address_line2'] : null;
        $this->container['mailing_address_city'] = isset($data['mailing_address_city']) ? $data['mailing_address_city'] : null;
        $this->container['mailing_address_region'] = isset($data['mailing_address_region']) ? $data['mailing_address_region'] : null;
        $this->container['mailing_address_postal_code'] = isset($data['mailing_address_postal_code']) ? $data['mailing_address_postal_code'] : null;
        $this->container['mailing_address_country'] = isset($data['mailing_address_country']) ? $data['mailing_address_country'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['customer_filing_instructions'] = isset($data['customer_filing_instructions']) ? $data['customer_filing_instructions'] : null;
        $this->container['legal_entity_name'] = isset($data['legal_entity_name']) ? $data['legal_entity_name'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['filing_type_id'] = isset($data['filing_type_id']) ? $data['filing_type_id'] : null;
        $this->container['e_file_username'] = isset($data['e_file_username']) ? $data['e_file_username'] : null;
        $this->container['e_file_password'] = isset($data['e_file_password']) ? $data['e_file_password'] : null;
        $this->container['prepay_percentage'] = isset($data['prepay_percentage']) ? $data['prepay_percentage'] : null;
        $this->container['pre_payment_required'] = isset($data['pre_payment_required']) ? $data['pre_payment_required'] : null;
        $this->container['fixed_prepayment_amount'] = isset($data['fixed_prepayment_amount']) ? $data['fixed_prepayment_amount'] : null;
        $this->container['tax_type_id'] = isset($data['tax_type_id']) ? $data['tax_type_id'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['al_sign_on'] = isset($data['al_sign_on']) ? $data['al_sign_on'] : null;
        $this->container['al_access_code'] = isset($data['al_access_code']) ? $data['al_access_code'] : null;
        $this->container['me_business_code'] = isset($data['me_business_code']) ? $data['me_business_code'] : null;
        $this->container['ia_ben'] = isset($data['ia_ben']) ? $data['ia_ben'] : null;
        $this->container['ct_reg'] = isset($data['ct_reg']) ? $data['ct_reg'] : null;
        $this->container['other1_name'] = isset($data['other1_name']) ? $data['other1_name'] : null;
        $this->container['other1_value'] = isset($data['other1_value']) ? $data['other1_value'] : null;
        $this->container['other2_name'] = isset($data['other2_name']) ? $data['other2_name'] : null;
        $this->container['other2_value'] = isset($data['other2_value']) ? $data['other2_value'] : null;
        $this->container['other3_name'] = isset($data['other3_name']) ? $data['other3_name'] : null;
        $this->container['other3_value'] = isset($data['other3_value']) ? $data['other3_value'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['tax_authority_name'] = isset($data['tax_authority_name']) ? $data['tax_authority_name'] : null;
        $this->container['tax_authority_type'] = isset($data['tax_authority_type']) ? $data['tax_authority_type'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['bulk_account_id'] = isset($data['bulk_account_id']) ? $data['bulk_account_id'] : null;
        $this->container['site_code'] = isset($data['site_code']) ? $data['site_code'] : null;
        $this->container['bulk_account_validation_status'] = isset($data['bulk_account_validation_status']) ? $data['bulk_account_validation_status'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (!is_null($this->container['return_name']) && (mb_strlen($this->container['return_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'return_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['return_name']) && (mb_strlen($this->container['return_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'return_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['location_code']) && (mb_strlen($this->container['location_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'location_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['location_code']) && (mb_strlen($this->container['location_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'location_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getOutletTypeIdAllowableValues();
        if (!is_null($this->container['outlet_type_id']) && !in_array($this->container['outlet_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'outlet_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['payment_currency']) && (mb_strlen($this->container['payment_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'payment_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['payment_currency']) && (mb_strlen($this->container['payment_currency']) < 0)) {
            $invalidProperties[] = "invalid value for 'payment_currency', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['filing_frequency_id'] === null) {
            $invalidProperties[] = "'filing_frequency_id' can't be null";
        }
        $allowedValues = $this->getFilingFrequencyIdAllowableValues();
        if (!is_null($this->container['filing_frequency_id']) && !in_array($this->container['filing_frequency_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_frequency_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['state_registration_id']) && (mb_strlen($this->container['state_registration_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'state_registration_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state_registration_id']) && (mb_strlen($this->container['state_registration_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'state_registration_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['local_registration_id']) && (mb_strlen($this->container['local_registration_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'local_registration_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['local_registration_id']) && (mb_strlen($this->container['local_registration_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'local_registration_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['employer_identification_number']) && (mb_strlen($this->container['employer_identification_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'employer_identification_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['employer_identification_number']) && (mb_strlen($this->container['employer_identification_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'employer_identification_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line1']) && (mb_strlen($this->container['line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line1']) && (mb_strlen($this->container['line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['line2']) && (mb_strlen($this->container['line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) < 0)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 0)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mailing_address_line1']) && (mb_strlen($this->container['mailing_address_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'mailing_address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mailing_address_line1']) && (mb_strlen($this->container['mailing_address_line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'mailing_address_line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mailing_address_line2']) && (mb_strlen($this->container['mailing_address_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'mailing_address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mailing_address_line2']) && (mb_strlen($this->container['mailing_address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'mailing_address_line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mailing_address_city']) && (mb_strlen($this->container['mailing_address_city']) > 50)) {
            $invalidProperties[] = "invalid value for 'mailing_address_city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mailing_address_city']) && (mb_strlen($this->container['mailing_address_city']) < 0)) {
            $invalidProperties[] = "invalid value for 'mailing_address_city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mailing_address_postal_code']) && (mb_strlen($this->container['mailing_address_postal_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'mailing_address_postal_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['mailing_address_postal_code']) && (mb_strlen($this->container['mailing_address_postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'mailing_address_postal_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_filing_instructions']) && (mb_strlen($this->container['customer_filing_instructions']) > 1000)) {
            $invalidProperties[] = "invalid value for 'customer_filing_instructions', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['customer_filing_instructions']) && (mb_strlen($this->container['customer_filing_instructions']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_filing_instructions', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['legal_entity_name']) && (mb_strlen($this->container['legal_entity_name']) > 75)) {
            $invalidProperties[] = "invalid value for 'legal_entity_name', the character length must be smaller than or equal to 75.";
        }

        if (!is_null($this->container['legal_entity_name']) && (mb_strlen($this->container['legal_entity_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'legal_entity_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['effective_date'] === null) {
            $invalidProperties[] = "'effective_date' can't be null";
        }
        $allowedValues = $this->getFilingTypeIdAllowableValues();
        if (!is_null($this->container['filing_type_id']) && !in_array($this->container['filing_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['e_file_username']) && (mb_strlen($this->container['e_file_username']) > 254)) {
            $invalidProperties[] = "invalid value for 'e_file_username', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['e_file_username']) && (mb_strlen($this->container['e_file_username']) < 0)) {
            $invalidProperties[] = "invalid value for 'e_file_username', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['e_file_password']) && (mb_strlen($this->container['e_file_password']) > 40)) {
            $invalidProperties[] = "invalid value for 'e_file_password', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['e_file_password']) && (mb_strlen($this->container['e_file_password']) < 0)) {
            $invalidProperties[] = "invalid value for 'e_file_password', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['tax_type_id'] === null) {
            $invalidProperties[] = "'tax_type_id' can't be null";
        }
        $allowedValues = $this->getTaxTypeIdAllowableValues();
        if (!is_null($this->container['tax_type_id']) && !in_array($this->container['tax_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['internal_notes']) && (mb_strlen($this->container['internal_notes']) > 1000)) {
            $invalidProperties[] = "invalid value for 'internal_notes', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['internal_notes']) && (mb_strlen($this->container['internal_notes']) < 0)) {
            $invalidProperties[] = "invalid value for 'internal_notes', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['al_sign_on']) && (mb_strlen($this->container['al_sign_on']) > 25)) {
            $invalidProperties[] = "invalid value for 'al_sign_on', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['al_sign_on']) && (mb_strlen($this->container['al_sign_on']) < 0)) {
            $invalidProperties[] = "invalid value for 'al_sign_on', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['al_access_code']) && (mb_strlen($this->container['al_access_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'al_access_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['al_access_code']) && (mb_strlen($this->container['al_access_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'al_access_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['me_business_code']) && (mb_strlen($this->container['me_business_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'me_business_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['me_business_code']) && (mb_strlen($this->container['me_business_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'me_business_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ia_ben']) && (mb_strlen($this->container['ia_ben']) > 50)) {
            $invalidProperties[] = "invalid value for 'ia_ben', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ia_ben']) && (mb_strlen($this->container['ia_ben']) < 0)) {
            $invalidProperties[] = "invalid value for 'ia_ben', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ct_reg']) && (mb_strlen($this->container['ct_reg']) > 50)) {
            $invalidProperties[] = "invalid value for 'ct_reg', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ct_reg']) && (mb_strlen($this->container['ct_reg']) < 0)) {
            $invalidProperties[] = "invalid value for 'ct_reg', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other1_name']) && (mb_strlen($this->container['other1_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'other1_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other1_name']) && (mb_strlen($this->container['other1_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'other1_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other1_value']) && (mb_strlen($this->container['other1_value']) > 50)) {
            $invalidProperties[] = "invalid value for 'other1_value', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other1_value']) && (mb_strlen($this->container['other1_value']) < 0)) {
            $invalidProperties[] = "invalid value for 'other1_value', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other2_name']) && (mb_strlen($this->container['other2_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'other2_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other2_name']) && (mb_strlen($this->container['other2_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'other2_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other2_value']) && (mb_strlen($this->container['other2_value']) > 50)) {
            $invalidProperties[] = "invalid value for 'other2_value', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other2_value']) && (mb_strlen($this->container['other2_value']) < 0)) {
            $invalidProperties[] = "invalid value for 'other2_value', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other3_name']) && (mb_strlen($this->container['other3_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'other3_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other3_name']) && (mb_strlen($this->container['other3_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'other3_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['other3_value']) && (mb_strlen($this->container['other3_value']) > 50)) {
            $invalidProperties[] = "invalid value for 'other3_value', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['other3_value']) && (mb_strlen($this->container['other3_value']) < 0)) {
            $invalidProperties[] = "invalid value for 'other3_value', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getBulkAccountValidationStatusAllowableValues();
        if (!is_null($this->container['bulk_account_validation_status']) && !in_array($this->container['bulk_account_validation_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bulk_account_validation_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this filing calendar.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company to which this filing calendar belongs.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets return_name
     *
     * @return string
     */
    public function getReturnName()
    {
        return $this->container['return_name'];
    }

    /**
     * Sets return_name
     *
     * @param string $return_name DEPRECATED - Date: 9/13/2018, Version: 18.10, Message: Please use `taxFormCode` instead.  The legacy return name of the tax form to file.
     *
     * @return $this
     */
    public function setReturnName($return_name)
    {
        if (!is_null($return_name) && (mb_strlen($return_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $return_name when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($return_name) && (mb_strlen($return_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $return_name when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['return_name'] = $return_name;

        return $this;
    }

    /**
     * Gets form_country
     *
     * @return string
     */
    public function getFormCountry()
    {
        return $this->container['form_country'];
    }

    /**
     * Sets form_country
     *
     * @param string $form_country Name or ISO 3166 code identifying the country that issued the tax form for this filing calendar.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setFormCountry($form_country)
    {
        $this->container['form_country'] = $form_country;

        return $this;
    }

    /**
     * Gets form_region
     *
     * @return string
     */
    public function getFormRegion()
    {
        return $this->container['form_region'];
    }

    /**
     * Sets form_region
     *
     * @param string $form_region Name or ISO 3166 code identifying the region that issued the tax form for this filing calendar.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setFormRegion($form_region)
    {
        $this->container['form_region'] = $form_region;

        return $this;
    }

    /**
     * Gets tax_form_code
     *
     * @return string
     */
    public function getTaxFormCode()
    {
        return $this->container['tax_form_code'];
    }

    /**
     * Sets tax_form_code
     *
     * @param string $tax_form_code The Avalara standard tax form code of the tax form for this filing calendar.  The first two characters of the tax form code  are the ISO 3166 country code of the country that issued this form.
     *
     * @return $this
     */
    public function setTaxFormCode($tax_form_code)
    {
        $this->container['tax_form_code'] = $tax_form_code;

        return $this;
    }

    /**
     * Gets fiscal_year_start_month
     *
     * @return int
     */
    public function getFiscalYearStartMonth()
    {
        return $this->container['fiscal_year_start_month'];
    }

    /**
     * Sets fiscal_year_start_month
     *
     * @param int $fiscal_year_start_month The start period of a fiscal year for this form/company
     *
     * @return $this
     */
    public function setFiscalYearStartMonth($fiscal_year_start_month)
    {
        $this->container['fiscal_year_start_month'] = $fiscal_year_start_month;

        return $this;
    }

    /**
     * Gets location_code
     *
     * @return string
     */
    public function getLocationCode()
    {
        return $this->container['location_code'];
    }

    /**
     * Sets location_code
     *
     * @param string $location_code If this calendar is for a location-specific tax return, specify the location code here.  To file for all locations, leave this value NULL.
     *
     * @return $this
     */
    public function setLocationCode($location_code)
    {
        if (!is_null($location_code) && (mb_strlen($location_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $location_code when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($location_code) && (mb_strlen($location_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $location_code when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['location_code'] = $location_code;

        return $this;
    }

    /**
     * Gets outlet_type_id
     *
     * @return string
     */
    public function getOutletTypeId()
    {
        return $this->container['outlet_type_id'];
    }

    /**
     * Sets outlet_type_id
     *
     * @param string $outlet_type_id If this calendar is for a location-specific tax return, specify the location-specific behavior here.
     *
     * @return $this
     */
    public function setOutletTypeId($outlet_type_id)
    {
        $allowedValues = $this->getOutletTypeIdAllowableValues();
        if (!is_null($outlet_type_id) && !in_array($outlet_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outlet_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outlet_type_id'] = $outlet_type_id;

        return $this;
    }

    /**
     * Gets payment_currency
     *
     * @return string
     */
    public function getPaymentCurrency()
    {
        return $this->container['payment_currency'];
    }

    /**
     * Sets payment_currency
     *
     * @param string $payment_currency Specify the ISO 4217 currency code for the currency to remit for this tax return.  For all tax returns in the United States, specify \"USD\".
     *
     * @return $this
     */
    public function setPaymentCurrency($payment_currency)
    {
        if (!is_null($payment_currency) && (mb_strlen($payment_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $payment_currency when calling FilingCalendarModel., must be smaller than or equal to 3.');
        }
        if (!is_null($payment_currency) && (mb_strlen($payment_currency) < 0)) {
            throw new \InvalidArgumentException('invalid length for $payment_currency when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['payment_currency'] = $payment_currency;

        return $this;
    }

    /**
     * Gets filing_frequency_id
     *
     * @return string
     */
    public function getFilingFrequencyId()
    {
        return $this->container['filing_frequency_id'];
    }

    /**
     * Sets filing_frequency_id
     *
     * @param string $filing_frequency_id The frequency on which this tax form is filed.
     *
     * @return $this
     */
    public function setFilingFrequencyId($filing_frequency_id)
    {
        $allowedValues = $this->getFilingFrequencyIdAllowableValues();
        if (!in_array($filing_frequency_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_frequency_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_frequency_id'] = $filing_frequency_id;

        return $this;
    }

    /**
     * Gets months
     *
     * @return int
     */
    public function getMonths()
    {
        return $this->container['months'];
    }

    /**
     * Sets months
     *
     * @param int $months A 16-bit bitmap containing a 1 for each month when the return should be filed.
     *
     * @return $this
     */
    public function setMonths($months)
    {
        $this->container['months'] = $months;

        return $this;
    }

    /**
     * Gets state_registration_id
     *
     * @return string
     */
    public function getStateRegistrationId()
    {
        return $this->container['state_registration_id'];
    }

    /**
     * Sets state_registration_id
     *
     * @param string $state_registration_id Tax Registration ID for this Region - in the U.S., this is for your state.
     *
     * @return $this
     */
    public function setStateRegistrationId($state_registration_id)
    {
        if (!is_null($state_registration_id) && (mb_strlen($state_registration_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state_registration_id when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($state_registration_id) && (mb_strlen($state_registration_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state_registration_id when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['state_registration_id'] = $state_registration_id;

        return $this;
    }

    /**
     * Gets local_registration_id
     *
     * @return string
     */
    public function getLocalRegistrationId()
    {
        return $this->container['local_registration_id'];
    }

    /**
     * Sets local_registration_id
     *
     * @param string $local_registration_id Tax Registration ID for the local jurisdiction, if any.
     *
     * @return $this
     */
    public function setLocalRegistrationId($local_registration_id)
    {
        if (!is_null($local_registration_id) && (mb_strlen($local_registration_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $local_registration_id when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($local_registration_id) && (mb_strlen($local_registration_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $local_registration_id when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['local_registration_id'] = $local_registration_id;

        return $this;
    }

    /**
     * Gets employer_identification_number
     *
     * @return string
     */
    public function getEmployerIdentificationNumber()
    {
        return $this->container['employer_identification_number'];
    }

    /**
     * Sets employer_identification_number
     *
     * @param string $employer_identification_number The Employer Identification Number or Taxpayer Identification Number that is to be used when filing this return.
     *
     * @return $this
     */
    public function setEmployerIdentificationNumber($employer_identification_number)
    {
        if (!is_null($employer_identification_number) && (mb_strlen($employer_identification_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $employer_identification_number when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($employer_identification_number) && (mb_strlen($employer_identification_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $employer_identification_number when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['employer_identification_number'] = $employer_identification_number;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The first line of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        if (!is_null($line1) && (mb_strlen($line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line1) && (mb_strlen($line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line1 when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The second line of the mailing address that will be used when filling out this tax return.  Please note that some tax forms do not support multiple address lines.
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        if (!is_null($line2) && (mb_strlen($line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($line2) && (mb_strlen($line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $line2 when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The city name of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The state, region, or province of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        if (!is_null($region) && (mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling FilingCalendarModel., must be smaller than or equal to 3.');
        }
        if (!is_null($region) && (mb_strlen($region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $region when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The postal code or zip code of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling FilingCalendarModel., must be smaller than or equal to 25.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country DEPRECATED - Date: 9/1/2017, Version: 17.9, Message: Field will be no longer be available after the 17.9 release.  The two character ISO-3166 country code of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling FilingCalendarModel., must be smaller than or equal to 2.');
        }
        if (!is_null($country) && (mb_strlen($country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets mailing_address_line1
     *
     * @return string
     */
    public function getMailingAddressLine1()
    {
        return $this->container['mailing_address_line1'];
    }

    /**
     * Sets mailing_address_line1
     *
     * @param string $mailing_address_line1 The first line of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setMailingAddressLine1($mailing_address_line1)
    {
        if (!is_null($mailing_address_line1) && (mb_strlen($mailing_address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_line1 when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($mailing_address_line1) && (mb_strlen($mailing_address_line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_line1 when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['mailing_address_line1'] = $mailing_address_line1;

        return $this;
    }

    /**
     * Gets mailing_address_line2
     *
     * @return string
     */
    public function getMailingAddressLine2()
    {
        return $this->container['mailing_address_line2'];
    }

    /**
     * Sets mailing_address_line2
     *
     * @param string $mailing_address_line2 The second line of the mailing address that will be used when filling out this tax return.  Please note that some tax forms do not support multiple address lines.
     *
     * @return $this
     */
    public function setMailingAddressLine2($mailing_address_line2)
    {
        if (!is_null($mailing_address_line2) && (mb_strlen($mailing_address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_line2 when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($mailing_address_line2) && (mb_strlen($mailing_address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_line2 when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['mailing_address_line2'] = $mailing_address_line2;

        return $this;
    }

    /**
     * Gets mailing_address_city
     *
     * @return string
     */
    public function getMailingAddressCity()
    {
        return $this->container['mailing_address_city'];
    }

    /**
     * Sets mailing_address_city
     *
     * @param string $mailing_address_city The city name of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setMailingAddressCity($mailing_address_city)
    {
        if (!is_null($mailing_address_city) && (mb_strlen($mailing_address_city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_city when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($mailing_address_city) && (mb_strlen($mailing_address_city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_city when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['mailing_address_city'] = $mailing_address_city;

        return $this;
    }

    /**
     * Gets mailing_address_region
     *
     * @return string
     */
    public function getMailingAddressRegion()
    {
        return $this->container['mailing_address_region'];
    }

    /**
     * Sets mailing_address_region
     *
     * @param string $mailing_address_region Name or ISO 3166 code identifying the region of the mailing address that will be used when filling out this tax return.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setMailingAddressRegion($mailing_address_region)
    {
        $this->container['mailing_address_region'] = $mailing_address_region;

        return $this;
    }

    /**
     * Gets mailing_address_postal_code
     *
     * @return string
     */
    public function getMailingAddressPostalCode()
    {
        return $this->container['mailing_address_postal_code'];
    }

    /**
     * Sets mailing_address_postal_code
     *
     * @param string $mailing_address_postal_code The postal code or zip code of the mailing address that will be used when filling out this tax return.
     *
     * @return $this
     */
    public function setMailingAddressPostalCode($mailing_address_postal_code)
    {
        if (!is_null($mailing_address_postal_code) && (mb_strlen($mailing_address_postal_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_postal_code when calling FilingCalendarModel., must be smaller than or equal to 25.');
        }
        if (!is_null($mailing_address_postal_code) && (mb_strlen($mailing_address_postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mailing_address_postal_code when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['mailing_address_postal_code'] = $mailing_address_postal_code;

        return $this;
    }

    /**
     * Gets mailing_address_country
     *
     * @return string
     */
    public function getMailingAddressCountry()
    {
        return $this->container['mailing_address_country'];
    }

    /**
     * Sets mailing_address_country
     *
     * @param string $mailing_address_country Name or ISO 3166 code identifying the country of the mailing address that will be used when filling out this tax return.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setMailingAddressCountry($mailing_address_country)
    {
        $this->container['mailing_address_country'] = $mailing_address_country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The phone number to be used when filing this return.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets customer_filing_instructions
     *
     * @return string
     */
    public function getCustomerFilingInstructions()
    {
        return $this->container['customer_filing_instructions'];
    }

    /**
     * Sets customer_filing_instructions
     *
     * @param string $customer_filing_instructions Special filing instructions to be used when filing this return.  Please note that requesting special filing instructions may incur additional costs.
     *
     * @return $this
     */
    public function setCustomerFilingInstructions($customer_filing_instructions)
    {
        if (!is_null($customer_filing_instructions) && (mb_strlen($customer_filing_instructions) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $customer_filing_instructions when calling FilingCalendarModel., must be smaller than or equal to 1000.');
        }
        if (!is_null($customer_filing_instructions) && (mb_strlen($customer_filing_instructions) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_filing_instructions when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_filing_instructions'] = $customer_filing_instructions;

        return $this;
    }

    /**
     * Gets legal_entity_name
     *
     * @return string
     */
    public function getLegalEntityName()
    {
        return $this->container['legal_entity_name'];
    }

    /**
     * Sets legal_entity_name
     *
     * @param string $legal_entity_name The legal entity name to be used when filing this return.
     *
     * @return $this
     */
    public function setLegalEntityName($legal_entity_name)
    {
        if (!is_null($legal_entity_name) && (mb_strlen($legal_entity_name) > 75)) {
            throw new \InvalidArgumentException('invalid length for $legal_entity_name when calling FilingCalendarModel., must be smaller than or equal to 75.');
        }
        if (!is_null($legal_entity_name) && (mb_strlen($legal_entity_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $legal_entity_name when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['legal_entity_name'] = $legal_entity_name;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The earliest date for the tax period when this return should be filed.  This date specifies the earliest date for tax transactions that should be reported on this filing calendar.  Please note that tax is usually filed one month in arrears: for example, tax for January transactions is typically filed during the month of February.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The last date for the tax period when this return should be filed.  This date specifies the last date for tax transactions that should be reported on this filing calendar.  Please note that tax is usually filed one month in arrears: for example, tax for January transactions is typically filed during the month of February.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets filing_type_id
     *
     * @return string
     */
    public function getFilingTypeId()
    {
        return $this->container['filing_type_id'];
    }

    /**
     * Sets filing_type_id
     *
     * @param string $filing_type_id The method to be used when filing this return.
     *
     * @return $this
     */
    public function setFilingTypeId($filing_type_id)
    {
        $allowedValues = $this->getFilingTypeIdAllowableValues();
        if (!is_null($filing_type_id) && !in_array($filing_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_type_id'] = $filing_type_id;

        return $this;
    }

    /**
     * Gets e_file_username
     *
     * @return string
     */
    public function getEFileUsername()
    {
        return $this->container['e_file_username'];
    }

    /**
     * Sets e_file_username
     *
     * @param string $e_file_username If you file electronically, this is the username you use to log in to the tax authority's website.
     *
     * @return $this
     */
    public function setEFileUsername($e_file_username)
    {
        if (!is_null($e_file_username) && (mb_strlen($e_file_username) > 254)) {
            throw new \InvalidArgumentException('invalid length for $e_file_username when calling FilingCalendarModel., must be smaller than or equal to 254.');
        }
        if (!is_null($e_file_username) && (mb_strlen($e_file_username) < 0)) {
            throw new \InvalidArgumentException('invalid length for $e_file_username when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['e_file_username'] = $e_file_username;

        return $this;
    }

    /**
     * Gets e_file_password
     *
     * @return string
     */
    public function getEFilePassword()
    {
        return $this->container['e_file_password'];
    }

    /**
     * Sets e_file_password
     *
     * @param string $e_file_password If you file electronically, this is the password or pass code you use to log in to the tax authority's website.
     *
     * @return $this
     */
    public function setEFilePassword($e_file_password)
    {
        if (!is_null($e_file_password) && (mb_strlen($e_file_password) > 40)) {
            throw new \InvalidArgumentException('invalid length for $e_file_password when calling FilingCalendarModel., must be smaller than or equal to 40.');
        }
        if (!is_null($e_file_password) && (mb_strlen($e_file_password) < 0)) {
            throw new \InvalidArgumentException('invalid length for $e_file_password when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['e_file_password'] = $e_file_password;

        return $this;
    }

    /**
     * Gets prepay_percentage
     *
     * @return int
     */
    public function getPrepayPercentage()
    {
        return $this->container['prepay_percentage'];
    }

    /**
     * Sets prepay_percentage
     *
     * @param int $prepay_percentage If you are required to prepay a percentage of taxes for future periods, please specify the percentage in whole numbers;  for example, the value 90 would indicate 90%.
     *
     * @return $this
     */
    public function setPrepayPercentage($prepay_percentage)
    {
        $this->container['prepay_percentage'] = $prepay_percentage;

        return $this;
    }

    /**
     * Gets pre_payment_required
     *
     * @return bool
     */
    public function getPrePaymentRequired()
    {
        return $this->container['pre_payment_required'];
    }

    /**
     * Sets pre_payment_required
     *
     * @param bool $pre_payment_required Determines if a prepayment is required for this filing calendar
     *
     * @return $this
     */
    public function setPrePaymentRequired($pre_payment_required)
    {
        $this->container['pre_payment_required'] = $pre_payment_required;

        return $this;
    }

    /**
     * Gets fixed_prepayment_amount
     *
     * @return double
     */
    public function getFixedPrepaymentAmount()
    {
        return $this->container['fixed_prepayment_amount'];
    }

    /**
     * Sets fixed_prepayment_amount
     *
     * @param double $fixed_prepayment_amount If your company is required to make a prepayment that is designated by a fixed amount each period, please specify the amount here.
     *
     * @return $this
     */
    public function setFixedPrepaymentAmount($fixed_prepayment_amount)
    {
        $this->container['fixed_prepayment_amount'] = $fixed_prepayment_amount;

        return $this;
    }

    /**
     * Gets tax_type_id
     *
     * @return string
     */
    public function getTaxTypeId()
    {
        return $this->container['tax_type_id'];
    }

    /**
     * Sets tax_type_id
     *
     * @param string $tax_type_id The type of tax to report on this return.
     *
     * @return $this
     */
    public function setTaxTypeId($tax_type_id)
    {
        $allowedValues = $this->getTaxTypeIdAllowableValues();
        if (!in_array($tax_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_type_id'] = $tax_type_id;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string $internal_notes Internal filing notes.
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        if (!is_null($internal_notes) && (mb_strlen($internal_notes) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling FilingCalendarModel., must be smaller than or equal to 1000.');
        }
        if (!is_null($internal_notes) && (mb_strlen($internal_notes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets al_sign_on
     *
     * @return string
     */
    public function getAlSignOn()
    {
        return $this->container['al_sign_on'];
    }

    /**
     * Sets al_sign_on
     *
     * @param string $al_sign_on Custom filing information field for Alabama.
     *
     * @return $this
     */
    public function setAlSignOn($al_sign_on)
    {
        if (!is_null($al_sign_on) && (mb_strlen($al_sign_on) > 25)) {
            throw new \InvalidArgumentException('invalid length for $al_sign_on when calling FilingCalendarModel., must be smaller than or equal to 25.');
        }
        if (!is_null($al_sign_on) && (mb_strlen($al_sign_on) < 0)) {
            throw new \InvalidArgumentException('invalid length for $al_sign_on when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['al_sign_on'] = $al_sign_on;

        return $this;
    }

    /**
     * Gets al_access_code
     *
     * @return string
     */
    public function getAlAccessCode()
    {
        return $this->container['al_access_code'];
    }

    /**
     * Sets al_access_code
     *
     * @param string $al_access_code Custom filing information field for Alabama.
     *
     * @return $this
     */
    public function setAlAccessCode($al_access_code)
    {
        if (!is_null($al_access_code) && (mb_strlen($al_access_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $al_access_code when calling FilingCalendarModel., must be smaller than or equal to 25.');
        }
        if (!is_null($al_access_code) && (mb_strlen($al_access_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $al_access_code when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['al_access_code'] = $al_access_code;

        return $this;
    }

    /**
     * Gets me_business_code
     *
     * @return string
     */
    public function getMeBusinessCode()
    {
        return $this->container['me_business_code'];
    }

    /**
     * Sets me_business_code
     *
     * @param string $me_business_code Custom filing information field for Maine.
     *
     * @return $this
     */
    public function setMeBusinessCode($me_business_code)
    {
        if (!is_null($me_business_code) && (mb_strlen($me_business_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $me_business_code when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($me_business_code) && (mb_strlen($me_business_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $me_business_code when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['me_business_code'] = $me_business_code;

        return $this;
    }

    /**
     * Gets ia_ben
     *
     * @return string
     */
    public function getIaBen()
    {
        return $this->container['ia_ben'];
    }

    /**
     * Sets ia_ben
     *
     * @param string $ia_ben Custom filing information field for Iowa.
     *
     * @return $this
     */
    public function setIaBen($ia_ben)
    {
        if (!is_null($ia_ben) && (mb_strlen($ia_ben) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ia_ben when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($ia_ben) && (mb_strlen($ia_ben) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ia_ben when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['ia_ben'] = $ia_ben;

        return $this;
    }

    /**
     * Gets ct_reg
     *
     * @return string
     */
    public function getCtReg()
    {
        return $this->container['ct_reg'];
    }

    /**
     * Sets ct_reg
     *
     * @param string $ct_reg Custom filing information field for Connecticut.
     *
     * @return $this
     */
    public function setCtReg($ct_reg)
    {
        if (!is_null($ct_reg) && (mb_strlen($ct_reg) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ct_reg when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($ct_reg) && (mb_strlen($ct_reg) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ct_reg when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['ct_reg'] = $ct_reg;

        return $this;
    }

    /**
     * Gets other1_name
     *
     * @return string
     */
    public function getOther1Name()
    {
        return $this->container['other1_name'];
    }

    /**
     * Sets other1_name
     *
     * @param string $other1_name Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther1Name($other1_name)
    {
        if (!is_null($other1_name) && (mb_strlen($other1_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other1_name when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other1_name) && (mb_strlen($other1_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other1_name when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other1_name'] = $other1_name;

        return $this;
    }

    /**
     * Gets other1_value
     *
     * @return string
     */
    public function getOther1Value()
    {
        return $this->container['other1_value'];
    }

    /**
     * Sets other1_value
     *
     * @param string $other1_value Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther1Value($other1_value)
    {
        if (!is_null($other1_value) && (mb_strlen($other1_value) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other1_value when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other1_value) && (mb_strlen($other1_value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other1_value when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other1_value'] = $other1_value;

        return $this;
    }

    /**
     * Gets other2_name
     *
     * @return string
     */
    public function getOther2Name()
    {
        return $this->container['other2_name'];
    }

    /**
     * Sets other2_name
     *
     * @param string $other2_name Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther2Name($other2_name)
    {
        if (!is_null($other2_name) && (mb_strlen($other2_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other2_name when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other2_name) && (mb_strlen($other2_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other2_name when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other2_name'] = $other2_name;

        return $this;
    }

    /**
     * Gets other2_value
     *
     * @return string
     */
    public function getOther2Value()
    {
        return $this->container['other2_value'];
    }

    /**
     * Sets other2_value
     *
     * @param string $other2_value Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther2Value($other2_value)
    {
        if (!is_null($other2_value) && (mb_strlen($other2_value) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other2_value when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other2_value) && (mb_strlen($other2_value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other2_value when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other2_value'] = $other2_value;

        return $this;
    }

    /**
     * Gets other3_name
     *
     * @return string
     */
    public function getOther3Name()
    {
        return $this->container['other3_name'];
    }

    /**
     * Sets other3_name
     *
     * @param string $other3_name Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther3Name($other3_name)
    {
        if (!is_null($other3_name) && (mb_strlen($other3_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other3_name when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other3_name) && (mb_strlen($other3_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other3_name when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other3_name'] = $other3_name;

        return $this;
    }

    /**
     * Gets other3_value
     *
     * @return string
     */
    public function getOther3Value()
    {
        return $this->container['other3_value'];
    }

    /**
     * Sets other3_value
     *
     * @param string $other3_value Custom filing information field.  Leave blank.
     *
     * @return $this
     */
    public function setOther3Value($other3_value)
    {
        if (!is_null($other3_value) && (mb_strlen($other3_value) > 50)) {
            throw new \InvalidArgumentException('invalid length for $other3_value when calling FilingCalendarModel., must be smaller than or equal to 50.');
        }
        if (!is_null($other3_value) && (mb_strlen($other3_value) < 0)) {
            throw new \InvalidArgumentException('invalid length for $other3_value when calling FilingCalendarModel., must be bigger than or equal to 0.');
        }

        $this->container['other3_value'] = $other3_value;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id The unique ID of the tax authority of this return.
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets tax_authority_name
     *
     * @return string
     */
    public function getTaxAuthorityName()
    {
        return $this->container['tax_authority_name'];
    }

    /**
     * Sets tax_authority_name
     *
     * @param string $tax_authority_name The name of the tax authority of this return.
     *
     * @return $this
     */
    public function setTaxAuthorityName($tax_authority_name)
    {
        $this->container['tax_authority_name'] = $tax_authority_name;

        return $this;
    }

    /**
     * Gets tax_authority_type
     *
     * @return string
     */
    public function getTaxAuthorityType()
    {
        return $this->container['tax_authority_type'];
    }

    /**
     * Sets tax_authority_type
     *
     * @param string $tax_authority_type The type description of the tax authority of this return.
     *
     * @return $this
     */
    public function setTaxAuthorityType($tax_authority_type)
    {
        $this->container['tax_authority_type'] = $tax_authority_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets bulk_account_id
     *
     * @return string
     */
    public function getBulkAccountId()
    {
        return $this->container['bulk_account_id'];
    }

    /**
     * Sets bulk_account_id
     *
     * @param string $bulk_account_id User name of bulk account.
     *
     * @return $this
     */
    public function setBulkAccountId($bulk_account_id)
    {
        $this->container['bulk_account_id'] = $bulk_account_id;

        return $this;
    }

    /**
     * Gets site_code
     *
     * @return string
     */
    public function getSiteCode()
    {
        return $this->container['site_code'];
    }

    /**
     * Sets site_code
     *
     * @param string $site_code The bulk account site code.
     *
     * @return $this
     */
    public function setSiteCode($site_code)
    {
        $this->container['site_code'] = $site_code;

        return $this;
    }

    /**
     * Gets bulk_account_validation_status
     *
     * @return string
     */
    public function getBulkAccountValidationStatus()
    {
        return $this->container['bulk_account_validation_status'];
    }

    /**
     * Sets bulk_account_validation_status
     *
     * @param string $bulk_account_validation_status The status of the bulk account's validation.
     *
     * @return $this
     */
    public function setBulkAccountValidationStatus($bulk_account_validation_status)
    {
        $allowedValues = $this->getBulkAccountValidationStatusAllowableValues();
        if (!is_null($bulk_account_validation_status) && !in_array($bulk_account_validation_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bulk_account_validation_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bulk_account_validation_status'] = $bulk_account_validation_status;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Swagger\Client\Model\CompanyReturnSettingModel[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Swagger\Client\Model\CompanyReturnSettingModel[] $settings CompanyReturn settings for complext filing calendar
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


