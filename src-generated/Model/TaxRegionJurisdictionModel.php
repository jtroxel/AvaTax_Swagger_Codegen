<?php
/**
 * TaxRegionJurisdictionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * TaxRegionJurisdictionModel Class Doc Comment
 *
 * @category Class
 * @description The tax region jurisdiction model.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxRegionJurisdictionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxRegionJurisdictionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jurisdiction_id' => 'int',
        'tax_region_id' => 'int',
        'jurisdiction_level_id' => 'int',
        'rock_name' => 'string',
        'report_level' => 'int',
        'state_assigned_code' => 'string',
        'tax_authority_id' => 'int',
        'signature_code' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jurisdiction_id' => 'int32',
        'tax_region_id' => 'int32',
        'jurisdiction_level_id' => 'int32',
        'rock_name' => null,
        'report_level' => 'int32',
        'state_assigned_code' => null,
        'tax_authority_id' => 'int32',
        'signature_code' => null,
        'effective_date' => 'date',
        'end_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jurisdiction_id' => 'jurisdictionId',
        'tax_region_id' => 'taxRegionId',
        'jurisdiction_level_id' => 'jurisdictionLevelId',
        'rock_name' => 'rockName',
        'report_level' => 'reportLevel',
        'state_assigned_code' => 'stateAssignedCode',
        'tax_authority_id' => 'taxAuthorityId',
        'signature_code' => 'signatureCode',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jurisdiction_id' => 'setJurisdictionId',
        'tax_region_id' => 'setTaxRegionId',
        'jurisdiction_level_id' => 'setJurisdictionLevelId',
        'rock_name' => 'setRockName',
        'report_level' => 'setReportLevel',
        'state_assigned_code' => 'setStateAssignedCode',
        'tax_authority_id' => 'setTaxAuthorityId',
        'signature_code' => 'setSignatureCode',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jurisdiction_id' => 'getJurisdictionId',
        'tax_region_id' => 'getTaxRegionId',
        'jurisdiction_level_id' => 'getJurisdictionLevelId',
        'rock_name' => 'getRockName',
        'report_level' => 'getReportLevel',
        'state_assigned_code' => 'getStateAssignedCode',
        'tax_authority_id' => 'getTaxAuthorityId',
        'signature_code' => 'getSignatureCode',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jurisdiction_id'] = isset($data['jurisdiction_id']) ? $data['jurisdiction_id'] : null;
        $this->container['tax_region_id'] = isset($data['tax_region_id']) ? $data['tax_region_id'] : null;
        $this->container['jurisdiction_level_id'] = isset($data['jurisdiction_level_id']) ? $data['jurisdiction_level_id'] : null;
        $this->container['rock_name'] = isset($data['rock_name']) ? $data['rock_name'] : null;
        $this->container['report_level'] = isset($data['report_level']) ? $data['report_level'] : null;
        $this->container['state_assigned_code'] = isset($data['state_assigned_code']) ? $data['state_assigned_code'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['signature_code'] = isset($data['signature_code']) ? $data['signature_code'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jurisdiction_id
     *
     * @return int
     */
    public function getJurisdictionId()
    {
        return $this->container['jurisdiction_id'];
    }

    /**
     * Sets jurisdiction_id
     *
     * @param int $jurisdiction_id The id of the jurisdiction.
     *
     * @return $this
     */
    public function setJurisdictionId($jurisdiction_id)
    {
        $this->container['jurisdiction_id'] = $jurisdiction_id;

        return $this;
    }

    /**
     * Gets tax_region_id
     *
     * @return int
     */
    public function getTaxRegionId()
    {
        return $this->container['tax_region_id'];
    }

    /**
     * Sets tax_region_id
     *
     * @param int $tax_region_id The id of the tax region.
     *
     * @return $this
     */
    public function setTaxRegionId($tax_region_id)
    {
        $this->container['tax_region_id'] = $tax_region_id;

        return $this;
    }

    /**
     * Gets jurisdiction_level_id
     *
     * @return int
     */
    public function getJurisdictionLevelId()
    {
        return $this->container['jurisdiction_level_id'];
    }

    /**
     * Sets jurisdiction_level_id
     *
     * @param int $jurisdiction_level_id The id of the jurisdiction level.
     *
     * @return $this
     */
    public function setJurisdictionLevelId($jurisdiction_level_id)
    {
        $this->container['jurisdiction_level_id'] = $jurisdiction_level_id;

        return $this;
    }

    /**
     * Gets rock_name
     *
     * @return string
     */
    public function getRockName()
    {
        return $this->container['rock_name'];
    }

    /**
     * Sets rock_name
     *
     * @param string $rock_name The rock name.
     *
     * @return $this
     */
    public function setRockName($rock_name)
    {
        $this->container['rock_name'] = $rock_name;

        return $this;
    }

    /**
     * Gets report_level
     *
     * @return int
     */
    public function getReportLevel()
    {
        return $this->container['report_level'];
    }

    /**
     * Sets report_level
     *
     * @param int $report_level The report level.
     *
     * @return $this
     */
    public function setReportLevel($report_level)
    {
        $this->container['report_level'] = $report_level;

        return $this;
    }

    /**
     * Gets state_assigned_code
     *
     * @return string
     */
    public function getStateAssignedCode()
    {
        return $this->container['state_assigned_code'];
    }

    /**
     * Sets state_assigned_code
     *
     * @param string $state_assigned_code The state assigned code.
     *
     * @return $this
     */
    public function setStateAssignedCode($state_assigned_code)
    {
        $this->container['state_assigned_code'] = $state_assigned_code;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id The id of the tax authority.
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets signature_code
     *
     * @return string
     */
    public function getSignatureCode()
    {
        return $this->container['signature_code'];
    }

    /**
     * Sets signature_code
     *
     * @param string $signature_code The signature code.
     *
     * @return $this
     */
    public function setSignatureCode($signature_code)
    {
        $this->container['signature_code'] = $signature_code;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date in which this tax region jurisdiction starts to take effect.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The date in which this tax region jurisdiction stops to take effect.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


