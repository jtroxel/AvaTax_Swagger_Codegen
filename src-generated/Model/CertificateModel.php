<?php
/**
 * CertificateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CertificateModel Class Doc Comment
 *
 * @category Class
 * @description A certificate is a document stored in either AvaTax Exemptions or CertCapture.  The certificate document  can contain information about a customer&#39;s eligibility for exemption from sales or use taxes based on  criteria you specify when you store the certificate.  To view or manage your certificates directly, please  log onto the administrative website for the product you purchased.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertificateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'signed_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'filename' => 'string',
        'document_exists' => 'bool',
        'valid' => 'bool',
        'verified' => 'bool',
        'exempt_percentage' => 'double',
        'is_single_certificate' => 'bool',
        'exemption_number' => 'string',
        'validated_exemption_reason' => '\Together\Taxes\Model\ExemptionReasonModel',
        'exemption_reason' => '\Together\Taxes\Model\ExemptionReasonModel',
        'status' => 'string',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'page_count' => 'int',
        'customers' => '\Together\Taxes\Model\CustomerModel[]',
        'po_numbers' => '\Together\Taxes\Model\PoNumberModel[]',
        'exposure_zone' => '\Together\Taxes\Model\ExposureZoneModel',
        'attributes' => '\Together\Taxes\Model\CertificateAttributeModel[]',
        'ecms_id' => 'int',
        'ecms_status' => 'string',
        'pdf' => 'string',
        'pages' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'signed_date' => 'date',
        'expiration_date' => 'date',
        'filename' => null,
        'document_exists' => null,
        'valid' => null,
        'verified' => null,
        'exempt_percentage' => 'double',
        'is_single_certificate' => null,
        'exemption_number' => null,
        'validated_exemption_reason' => null,
        'exemption_reason' => null,
        'status' => null,
        'created_date' => 'date-time',
        'modified_date' => 'date',
        'page_count' => 'int32',
        'customers' => null,
        'po_numbers' => null,
        'exposure_zone' => null,
        'attributes' => null,
        'ecms_id' => 'int32',
        'ecms_status' => null,
        'pdf' => null,
        'pages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'signed_date' => 'signedDate',
        'expiration_date' => 'expirationDate',
        'filename' => 'filename',
        'document_exists' => 'documentExists',
        'valid' => 'valid',
        'verified' => 'verified',
        'exempt_percentage' => 'exemptPercentage',
        'is_single_certificate' => 'isSingleCertificate',
        'exemption_number' => 'exemptionNumber',
        'validated_exemption_reason' => 'validatedExemptionReason',
        'exemption_reason' => 'exemptionReason',
        'status' => 'status',
        'created_date' => 'createdDate',
        'modified_date' => 'modifiedDate',
        'page_count' => 'pageCount',
        'customers' => 'customers',
        'po_numbers' => 'poNumbers',
        'exposure_zone' => 'exposureZone',
        'attributes' => 'attributes',
        'ecms_id' => 'ecmsId',
        'ecms_status' => 'ecmsStatus',
        'pdf' => 'pdf',
        'pages' => 'pages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'signed_date' => 'setSignedDate',
        'expiration_date' => 'setExpirationDate',
        'filename' => 'setFilename',
        'document_exists' => 'setDocumentExists',
        'valid' => 'setValid',
        'verified' => 'setVerified',
        'exempt_percentage' => 'setExemptPercentage',
        'is_single_certificate' => 'setIsSingleCertificate',
        'exemption_number' => 'setExemptionNumber',
        'validated_exemption_reason' => 'setValidatedExemptionReason',
        'exemption_reason' => 'setExemptionReason',
        'status' => 'setStatus',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate',
        'page_count' => 'setPageCount',
        'customers' => 'setCustomers',
        'po_numbers' => 'setPoNumbers',
        'exposure_zone' => 'setExposureZone',
        'attributes' => 'setAttributes',
        'ecms_id' => 'setEcmsId',
        'ecms_status' => 'setEcmsStatus',
        'pdf' => 'setPdf',
        'pages' => 'setPages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'signed_date' => 'getSignedDate',
        'expiration_date' => 'getExpirationDate',
        'filename' => 'getFilename',
        'document_exists' => 'getDocumentExists',
        'valid' => 'getValid',
        'verified' => 'getVerified',
        'exempt_percentage' => 'getExemptPercentage',
        'is_single_certificate' => 'getIsSingleCertificate',
        'exemption_number' => 'getExemptionNumber',
        'validated_exemption_reason' => 'getValidatedExemptionReason',
        'exemption_reason' => 'getExemptionReason',
        'status' => 'getStatus',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate',
        'page_count' => 'getPageCount',
        'customers' => 'getCustomers',
        'po_numbers' => 'getPoNumbers',
        'exposure_zone' => 'getExposureZone',
        'attributes' => 'getAttributes',
        'ecms_id' => 'getEcmsId',
        'ecms_status' => 'getEcmsStatus',
        'pdf' => 'getPdf',
        'pages' => 'getPages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['signed_date'] = isset($data['signed_date']) ? $data['signed_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['document_exists'] = isset($data['document_exists']) ? $data['document_exists'] : null;
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
        $this->container['exempt_percentage'] = isset($data['exempt_percentage']) ? $data['exempt_percentage'] : null;
        $this->container['is_single_certificate'] = isset($data['is_single_certificate']) ? $data['is_single_certificate'] : null;
        $this->container['exemption_number'] = isset($data['exemption_number']) ? $data['exemption_number'] : null;
        $this->container['validated_exemption_reason'] = isset($data['validated_exemption_reason']) ? $data['validated_exemption_reason'] : null;
        $this->container['exemption_reason'] = isset($data['exemption_reason']) ? $data['exemption_reason'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['customers'] = isset($data['customers']) ? $data['customers'] : null;
        $this->container['po_numbers'] = isset($data['po_numbers']) ? $data['po_numbers'] : null;
        $this->container['exposure_zone'] = isset($data['exposure_zone']) ? $data['exposure_zone'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['ecms_id'] = isset($data['ecms_id']) ? $data['ecms_id'] : null;
        $this->container['ecms_status'] = isset($data['ecms_status']) ? $data['ecms_status'] : null;
        $this->container['pdf'] = isset($data['pdf']) ? $data['pdf'] : null;
        $this->container['pages'] = isset($data['pages']) ? $data['pages'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['signed_date'] === null) {
            $invalidProperties[] = "'signed_date' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        if ($this->container['exemption_reason'] === null) {
            $invalidProperties[] = "'exemption_reason' can't be null";
        }
        if ($this->container['exposure_zone'] === null) {
            $invalidProperties[] = "'exposure_zone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID number of this certificate.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the AvaTax company that recorded this certificate.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets signed_date
     *
     * @return \DateTime
     */
    public function getSignedDate()
    {
        return $this->container['signed_date'];
    }

    /**
     * Sets signed_date
     *
     * @param \DateTime $signed_date The date when this certificate was signed.
     *
     * @return $this
     */
    public function setSignedDate($signed_date)
    {
        $this->container['signed_date'] = $signed_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date Expiration date when this certificate will no longer be valid.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename File name for the image of this certificate.                When creating a certificate, if you do not upload a PDF or JPG image, you must specify the filename  of the certificate as it is tracked in your repository.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets document_exists
     *
     * @return bool
     */
    public function getDocumentExists()
    {
        return $this->container['document_exists'];
    }

    /**
     * Sets document_exists
     *
     * @param bool $document_exists This value is true if there exists scanned PDF copy of this certificate or the PDF version of the form that the customer filled via the CertCapture wizard on S3 bucket.
     *
     * @return $this
     */
    public function setDocumentExists($document_exists)
    {
        $this->container['document_exists'] = $document_exists;

        return $this;
    }

    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid True if this certificate is marked as valid.  A valid certificate can be considered for exemption purposes.  When a certificate is marked invalid, it will no longer be considered when calculating exemption for  a customer.
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified This value is true if the certificate has gone through the certificate validation process.  For more information on the certificate validation process, please see the Avalara Help Center.
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }

    /**
     * Gets exempt_percentage
     *
     * @return double
     */
    public function getExemptPercentage()
    {
        return $this->container['exempt_percentage'];
    }

    /**
     * Sets exempt_percentage
     *
     * @param double $exempt_percentage If this certificate provides exemption from transactional taxes, what percentage of the transaction  is considered exempt?                For a fully exempt certificate, this percentage should be 100.
     *
     * @return $this
     */
    public function setExemptPercentage($exempt_percentage)
    {
        $this->container['exempt_percentage'] = $exempt_percentage;

        return $this;
    }

    /**
     * Gets is_single_certificate
     *
     * @return bool
     */
    public function getIsSingleCertificate()
    {
        return $this->container['is_single_certificate'];
    }

    /**
     * Sets is_single_certificate
     *
     * @param bool $is_single_certificate This value is true if this certificate is a single (or standalone) certificate.  This value is set  during the audit stage of the certificate validation process.
     *
     * @return $this
     */
    public function setIsSingleCertificate($is_single_certificate)
    {
        $this->container['is_single_certificate'] = $is_single_certificate;

        return $this;
    }

    /**
     * Gets exemption_number
     *
     * @return string
     */
    public function getExemptionNumber()
    {
        return $this->container['exemption_number'];
    }

    /**
     * Sets exemption_number
     *
     * @param string $exemption_number Indicates the tax number passed in for the certificate.
     *
     * @return $this
     */
    public function setExemptionNumber($exemption_number)
    {
        $this->container['exemption_number'] = $exemption_number;

        return $this;
    }

    /**
     * Gets validated_exemption_reason
     *
     * @return \Together\Taxes\Model\ExemptionReasonModel
     */
    public function getValidatedExemptionReason()
    {
        return $this->container['validated_exemption_reason'];
    }

    /**
     * Sets validated_exemption_reason
     *
     * @param \Together\Taxes\Model\ExemptionReasonModel $validated_exemption_reason The exemption reason that CertCapture audit/internal logic identifies for created certificate.
     *
     * @return $this
     */
    public function setValidatedExemptionReason($validated_exemption_reason)
    {
        $this->container['validated_exemption_reason'] = $validated_exemption_reason;

        return $this;
    }

    /**
     * Gets exemption_reason
     *
     * @return \Together\Taxes\Model\ExemptionReasonModel
     */
    public function getExemptionReason()
    {
        return $this->container['exemption_reason'];
    }

    /**
     * Sets exemption_reason
     *
     * @param \Together\Taxes\Model\ExemptionReasonModel $exemption_reason The exemption reason associated with this certificate.  For example, the reason code for exemption  for purposes of resale is `RESALE`.                For a list of exemption reasons, call `ListCertificateExemptReasons`.
     *
     * @return $this
     */
    public function setExemptionReason($exemption_reason)
    {
        $this->container['exemption_reason'] = $exemption_reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the certificate
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date/time when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int $page_count Number of pages contained within this certificate.
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets customers
     *
     * @return \Together\Taxes\Model\CustomerModel[]
     */
    public function getCustomers()
    {
        return $this->container['customers'];
    }

    /**
     * Sets customers
     *
     * @param \Together\Taxes\Model\CustomerModel[] $customers A list of customers to which this certificate applies.  You can fetch this data by specifying  `$include=customers` when calling a certificate fetch API.
     *
     * @return $this
     */
    public function setCustomers($customers)
    {
        $this->container['customers'] = $customers;

        return $this;
    }

    /**
     * Gets po_numbers
     *
     * @return \Together\Taxes\Model\PoNumberModel[]
     */
    public function getPoNumbers()
    {
        return $this->container['po_numbers'];
    }

    /**
     * Sets po_numbers
     *
     * @param \Together\Taxes\Model\PoNumberModel[] $po_numbers A list of purchase order numbers that are valid for use with this certificate.                If this certificate is applicable for all purchase order numbers, this field will be empty.                You can fetch this data by specifying `$include=po_numbers` when calling a certificate fetch API.
     *
     * @return $this
     */
    public function setPoNumbers($po_numbers)
    {
        $this->container['po_numbers'] = $po_numbers;

        return $this;
    }

    /**
     * Gets exposure_zone
     *
     * @return \Together\Taxes\Model\ExposureZoneModel
     */
    public function getExposureZone()
    {
        return $this->container['exposure_zone'];
    }

    /**
     * Sets exposure_zone
     *
     * @param \Together\Taxes\Model\ExposureZoneModel $exposure_zone The exposure zone where this certificate is valid.
     *
     * @return $this
     */
    public function setExposureZone($exposure_zone)
    {
        $this->container['exposure_zone'] = $exposure_zone;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Together\Taxes\Model\CertificateAttributeModel[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Together\Taxes\Model\CertificateAttributeModel[] $attributes A list of certificate attributes that apply to this certificate.                You can fetch this data by specifying `$include=attributes` when calling a certificate fetch API.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets ecms_id
     *
     * @return int
     */
    public function getEcmsId()
    {
        return $this->container['ecms_id'];
    }

    /**
     * Sets ecms_id
     *
     * @param int $ecms_id The unique ID number of current AvaTax Exemption Certificate that refers this certificate.
     *
     * @return $this
     */
    public function setEcmsId($ecms_id)
    {
        $this->container['ecms_id'] = $ecms_id;

        return $this;
    }

    /**
     * Gets ecms_status
     *
     * @return string
     */
    public function getEcmsStatus()
    {
        return $this->container['ecms_status'];
    }

    /**
     * Sets ecms_status
     *
     * @param string $ecms_status The status of current AvaTax Exemption Certificate  that refers to this certificate.
     *
     * @return $this
     */
    public function setEcmsStatus($ecms_status)
    {
        $this->container['ecms_status'] = $ecms_status;

        return $this;
    }

    /**
     * Gets pdf
     *
     * @return string
     */
    public function getPdf()
    {
        return $this->container['pdf'];
    }

    /**
     * Sets pdf
     *
     * @param string $pdf This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a PDF image in Base64 URLEncoded format.  PDFs are automatically parsed into individual page JPG images and can be retrieved back  later as either the original PDF or the individual pages.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.
     *
     * @return $this
     */
    public function setPdf($pdf)
    {
        $this->container['pdf'] = $pdf;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return string[]
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param string[] $pages This field is available for input only.  To retrieve the image after creation, use the  `DownloadCertificateImage` API.                When creating a certificate, you may optionally provide a list of JPG images, one per page, in  Base64 URLEncoded format.  These JPG images are automatically combined into a single downloadable  PDF and can be retrieved back later as either the original JPG images or the combined PDF.                To create a certificate, you must provide one of the following fields: either a `filename`, a `pdf` file,  or an array of JPG `pages`.  The API will return an error if you omit these fields or if you attempt to  put values in more than one of them.
     *
     * @return $this
     */
    public function setPages($pages)
    {
        $this->container['pages'] = $pages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


