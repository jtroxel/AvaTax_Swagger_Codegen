<?php
/**
 * ComplianceJurisdictionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ComplianceJurisdictionModel Class Doc Comment
 *
 * @category Class
 * @description Model for distinct jurisdictions.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplianceJurisdictionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplianceJurisdictionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_region_id' => 'int',
        'state_assigned_code' => 'string',
        'jurisdiction_type_id' => 'string',
        'name' => 'string',
        'county' => 'string',
        'city' => 'string',
        'region' => 'string',
        'country' => 'string',
        'tax_region_name' => 'string',
        'tax_authority_id' => 'int',
        'rates' => '\Swagger\Client\Model\ComplianceAggregatedTaxRateModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_region_id' => 'int32',
        'state_assigned_code' => null,
        'jurisdiction_type_id' => null,
        'name' => null,
        'county' => null,
        'city' => null,
        'region' => null,
        'country' => null,
        'tax_region_name' => null,
        'tax_authority_id' => 'int32',
        'rates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_region_id' => 'taxRegionId',
        'state_assigned_code' => 'stateAssignedCode',
        'jurisdiction_type_id' => 'jurisdictionTypeId',
        'name' => 'name',
        'county' => 'county',
        'city' => 'city',
        'region' => 'region',
        'country' => 'country',
        'tax_region_name' => 'taxRegionName',
        'tax_authority_id' => 'taxAuthorityId',
        'rates' => 'rates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_region_id' => 'setTaxRegionId',
        'state_assigned_code' => 'setStateAssignedCode',
        'jurisdiction_type_id' => 'setJurisdictionTypeId',
        'name' => 'setName',
        'county' => 'setCounty',
        'city' => 'setCity',
        'region' => 'setRegion',
        'country' => 'setCountry',
        'tax_region_name' => 'setTaxRegionName',
        'tax_authority_id' => 'setTaxAuthorityId',
        'rates' => 'setRates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_region_id' => 'getTaxRegionId',
        'state_assigned_code' => 'getStateAssignedCode',
        'jurisdiction_type_id' => 'getJurisdictionTypeId',
        'name' => 'getName',
        'county' => 'getCounty',
        'city' => 'getCity',
        'region' => 'getRegion',
        'country' => 'getCountry',
        'tax_region_name' => 'getTaxRegionName',
        'tax_authority_id' => 'getTaxAuthorityId',
        'rates' => 'getRates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_region_id'] = isset($data['tax_region_id']) ? $data['tax_region_id'] : null;
        $this->container['state_assigned_code'] = isset($data['state_assigned_code']) ? $data['state_assigned_code'] : null;
        $this->container['jurisdiction_type_id'] = isset($data['jurisdiction_type_id']) ? $data['jurisdiction_type_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['tax_region_name'] = isset($data['tax_region_name']) ? $data['tax_region_name'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['rates'] = isset($data['rates']) ? $data['rates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_region_id
     *
     * @return int
     */
    public function getTaxRegionId()
    {
        return $this->container['tax_region_id'];
    }

    /**
     * Sets tax_region_id
     *
     * @param int $tax_region_id The id of the tax region.
     *
     * @return $this
     */
    public function setTaxRegionId($tax_region_id)
    {
        $this->container['tax_region_id'] = $tax_region_id;

        return $this;
    }

    /**
     * Gets state_assigned_code
     *
     * @return string
     */
    public function getStateAssignedCode()
    {
        return $this->container['state_assigned_code'];
    }

    /**
     * Sets state_assigned_code
     *
     * @param string $state_assigned_code The state assigned code for the jurisdiction.
     *
     * @return $this
     */
    public function setStateAssignedCode($state_assigned_code)
    {
        $this->container['state_assigned_code'] = $state_assigned_code;

        return $this;
    }

    /**
     * Gets jurisdiction_type_id
     *
     * @return string
     */
    public function getJurisdictionTypeId()
    {
        return $this->container['jurisdiction_type_id'];
    }

    /**
     * Sets jurisdiction_type_id
     *
     * @param string $jurisdiction_type_id The type of the jurisdiction, indicating whether it is a country, state/region, city, for example.
     *
     * @return $this
     */
    public function setJurisdictionTypeId($jurisdiction_type_id)
    {
        $this->container['jurisdiction_type_id'] = $jurisdiction_type_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the jurisdiction.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county The name of the county.
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The name of the city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country of this jurisdiction.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets tax_region_name
     *
     * @return string
     */
    public function getTaxRegionName()
    {
        return $this->container['tax_region_name'];
    }

    /**
     * Sets tax_region_name
     *
     * @param string $tax_region_name The name of the tax region.
     *
     * @return $this
     */
    public function setTaxRegionName($tax_region_name)
    {
        $this->container['tax_region_name'] = $tax_region_name;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id The id of the tax authority.
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return \Swagger\Client\Model\ComplianceAggregatedTaxRateModel[]
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param \Swagger\Client\Model\ComplianceAggregatedTaxRateModel[] $rates Optional: A list of rates for this jurisdiction. To fetch this list, add the query string `?$include=TaxRates` to your URL.
     *
     * @return $this
     */
    public function setRates($rates)
    {
        $this->container['rates'] = $rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


