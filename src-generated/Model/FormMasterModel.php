<?php
/**
 * FormMasterModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FormMasterModel Class Doc Comment
 *
 * @category Class
 * @description Represents information about a tax form known to Avalara
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FormMasterModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FormMasterModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'form_type_id' => 'int',
        'tax_form_code' => 'string',
        'legacy_return_name' => 'string',
        'tax_form_name' => 'string',
        'description' => 'string',
        'is_effective' => 'bool',
        'country' => 'string',
        'region' => 'string',
        'authority_name' => 'string',
        'short_code' => 'string',
        'due_day' => 'int',
        'delinquent_day' => 'int',
        'fiscal_year_start_month' => 'int',
        'has_multi_frequencies' => 'bool',
        'is_poa_required' => 'bool',
        'is_registration_required' => 'bool',
        'has_multi_registration_methods' => 'bool',
        'has_schedules' => 'bool',
        'has_multi_filing_methods' => 'bool',
        'has_multi_pay_methods' => 'bool',
        'is_eft_required' => 'bool',
        'is_file_pay_method_linked' => 'bool',
        'mailing_received_rule_id' => 'int',
        'proof_of_mailing_id' => 'int',
        'is_neg_amount_allowed' => 'bool',
        'allow_negative_overall_tax' => 'bool',
        'is_netting_required' => 'bool',
        'rounding_method_id' => 'int',
        'vendor_discount_annual_max' => 'double',
        'versions_require_authority_approval' => 'bool',
        'outlet_reporting_method_id' => 'int',
        'has_reporting_codes' => 'bool',
        'has_prepayments' => 'bool',
        'gross_includes_interstate_sales' => 'bool',
        'gross_includes_tax' => 'string',
        'has_efile_fee' => 'bool',
        'has_epay_fee' => 'bool',
        'has_dependencies' => 'bool',
        'required_efile_trigger' => 'string',
        'required_eft_trigger' => 'string',
        'vendor_discount_efile' => 'bool',
        'vendor_discount_paper' => 'bool',
        'peer_reviewed' => 'string',
        'peer_reviewed_id' => 'string',
        'peer_reviewed_date' => 'string',
        'created_user_id' => 'int',
        'created_date' => '\DateTime',
        'modified_user_id' => 'int',
        'modified_date' => '\DateTime',
        'dor_address_mail_to' => 'string',
        'dor_address1' => 'string',
        'dor_address2' => 'string',
        'dor_address_city' => 'string',
        'dor_address_region' => 'string',
        'dor_address_postal_code' => 'string',
        'dor_address_country' => 'string',
        'zero_address_mail_to' => 'string',
        'zero_address1' => 'string',
        'zero_address2' => 'string',
        'zero_address_city' => 'string',
        'zero_address_region' => 'string',
        'zero_address_postal_code' => 'string',
        'zero_address_country' => 'string',
        'amended_address_mail_to' => 'string',
        'amended_address1' => 'string',
        'amended_address2' => 'string',
        'amended_address_city' => 'string',
        'amended_address_region' => 'string',
        'amended_address_postal_code' => 'string',
        'amended_address_country' => 'string',
        'online_back_filing' => 'bool',
        'online_amended_returns' => 'bool',
        'prepayment_frequency' => 'string',
        'outlet_location_identifiers_required' => 'bool',
        'listing_sort_order' => 'string',
        'dor_website' => 'string',
        'file_for_all_outlets' => 'bool',
        'paper_forms_do_not_have_discounts' => 'bool',
        'stack_aggregation' => 'bool',
        'rounding_precision' => 'string',
        'inconsistency_tolerance' => 'string',
        'eff_date' => '\DateTime',
        'end_date' => '\DateTime',
        'visible_to_customers' => 'bool',
        'requires_outlet_setup' => 'bool',
        'ach_credit_allowed' => 'bool',
        'report_level' => 'string',
        'post_office_validated' => 'bool',
        'stack_aggregation_option' => 'string',
        'sst_behavior' => 'string',
        'non_sst_behavior' => 'string',
        'dor_phone_number' => 'string',
        'average_check_clear_days' => 'string',
        'filter_zero_rated_line_details' => 'bool',
        'allows_bulk_filing_accounts' => 'bool',
        'bulk_account_instruction_link' => 'string',
        'registration_id_format' => 'string',
        'threshold_trigger' => 'string',
        'transaction_sorting_option' => 'string',
        'content_review_frequency_id' => 'int',
        'alias_for_form_master_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'form_type_id' => 'int32',
        'tax_form_code' => null,
        'legacy_return_name' => null,
        'tax_form_name' => null,
        'description' => null,
        'is_effective' => null,
        'country' => null,
        'region' => null,
        'authority_name' => null,
        'short_code' => null,
        'due_day' => 'int32',
        'delinquent_day' => 'int32',
        'fiscal_year_start_month' => 'int32',
        'has_multi_frequencies' => null,
        'is_poa_required' => null,
        'is_registration_required' => null,
        'has_multi_registration_methods' => null,
        'has_schedules' => null,
        'has_multi_filing_methods' => null,
        'has_multi_pay_methods' => null,
        'is_eft_required' => null,
        'is_file_pay_method_linked' => null,
        'mailing_received_rule_id' => 'int32',
        'proof_of_mailing_id' => 'int32',
        'is_neg_amount_allowed' => null,
        'allow_negative_overall_tax' => null,
        'is_netting_required' => null,
        'rounding_method_id' => 'int32',
        'vendor_discount_annual_max' => 'double',
        'versions_require_authority_approval' => null,
        'outlet_reporting_method_id' => 'int32',
        'has_reporting_codes' => null,
        'has_prepayments' => null,
        'gross_includes_interstate_sales' => null,
        'gross_includes_tax' => null,
        'has_efile_fee' => null,
        'has_epay_fee' => null,
        'has_dependencies' => null,
        'required_efile_trigger' => null,
        'required_eft_trigger' => null,
        'vendor_discount_efile' => null,
        'vendor_discount_paper' => null,
        'peer_reviewed' => null,
        'peer_reviewed_id' => null,
        'peer_reviewed_date' => null,
        'created_user_id' => 'int32',
        'created_date' => 'date-time',
        'modified_user_id' => 'int32',
        'modified_date' => 'date-time',
        'dor_address_mail_to' => null,
        'dor_address1' => null,
        'dor_address2' => null,
        'dor_address_city' => null,
        'dor_address_region' => null,
        'dor_address_postal_code' => null,
        'dor_address_country' => null,
        'zero_address_mail_to' => null,
        'zero_address1' => null,
        'zero_address2' => null,
        'zero_address_city' => null,
        'zero_address_region' => null,
        'zero_address_postal_code' => null,
        'zero_address_country' => null,
        'amended_address_mail_to' => null,
        'amended_address1' => null,
        'amended_address2' => null,
        'amended_address_city' => null,
        'amended_address_region' => null,
        'amended_address_postal_code' => null,
        'amended_address_country' => null,
        'online_back_filing' => null,
        'online_amended_returns' => null,
        'prepayment_frequency' => null,
        'outlet_location_identifiers_required' => null,
        'listing_sort_order' => null,
        'dor_website' => null,
        'file_for_all_outlets' => null,
        'paper_forms_do_not_have_discounts' => null,
        'stack_aggregation' => null,
        'rounding_precision' => null,
        'inconsistency_tolerance' => null,
        'eff_date' => 'date-time',
        'end_date' => 'date-time',
        'visible_to_customers' => null,
        'requires_outlet_setup' => null,
        'ach_credit_allowed' => null,
        'report_level' => null,
        'post_office_validated' => null,
        'stack_aggregation_option' => null,
        'sst_behavior' => null,
        'non_sst_behavior' => null,
        'dor_phone_number' => null,
        'average_check_clear_days' => null,
        'filter_zero_rated_line_details' => null,
        'allows_bulk_filing_accounts' => null,
        'bulk_account_instruction_link' => null,
        'registration_id_format' => null,
        'threshold_trigger' => null,
        'transaction_sorting_option' => null,
        'content_review_frequency_id' => 'int32',
        'alias_for_form_master_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'form_type_id' => 'formTypeId',
        'tax_form_code' => 'taxFormCode',
        'legacy_return_name' => 'legacyReturnName',
        'tax_form_name' => 'taxFormName',
        'description' => 'description',
        'is_effective' => 'isEffective',
        'country' => 'country',
        'region' => 'region',
        'authority_name' => 'authorityName',
        'short_code' => 'shortCode',
        'due_day' => 'dueDay',
        'delinquent_day' => 'delinquentDay',
        'fiscal_year_start_month' => 'fiscalYearStartMonth',
        'has_multi_frequencies' => 'hasMultiFrequencies',
        'is_poa_required' => 'isPOARequired',
        'is_registration_required' => 'isRegistrationRequired',
        'has_multi_registration_methods' => 'hasMultiRegistrationMethods',
        'has_schedules' => 'hasSchedules',
        'has_multi_filing_methods' => 'hasMultiFilingMethods',
        'has_multi_pay_methods' => 'hasMultiPayMethods',
        'is_eft_required' => 'isEFTRequired',
        'is_file_pay_method_linked' => 'isFilePayMethodLinked',
        'mailing_received_rule_id' => 'mailingReceivedRuleId',
        'proof_of_mailing_id' => 'proofOfMailingId',
        'is_neg_amount_allowed' => 'isNegAmountAllowed',
        'allow_negative_overall_tax' => 'allowNegativeOverallTax',
        'is_netting_required' => 'isNettingRequired',
        'rounding_method_id' => 'roundingMethodId',
        'vendor_discount_annual_max' => 'vendorDiscountAnnualMax',
        'versions_require_authority_approval' => 'versionsRequireAuthorityApproval',
        'outlet_reporting_method_id' => 'outletReportingMethodId',
        'has_reporting_codes' => 'hasReportingCodes',
        'has_prepayments' => 'hasPrepayments',
        'gross_includes_interstate_sales' => 'grossIncludesInterstateSales',
        'gross_includes_tax' => 'grossIncludesTax',
        'has_efile_fee' => 'hasEfileFee',
        'has_epay_fee' => 'hasEpayFee',
        'has_dependencies' => 'hasDependencies',
        'required_efile_trigger' => 'requiredEfileTrigger',
        'required_eft_trigger' => 'requiredEftTrigger',
        'vendor_discount_efile' => 'vendorDiscountEfile',
        'vendor_discount_paper' => 'vendorDiscountPaper',
        'peer_reviewed' => 'peerReviewed',
        'peer_reviewed_id' => 'peerReviewedId',
        'peer_reviewed_date' => 'peerReviewedDate',
        'created_user_id' => 'createdUserId',
        'created_date' => 'createdDate',
        'modified_user_id' => 'modifiedUserId',
        'modified_date' => 'modifiedDate',
        'dor_address_mail_to' => 'dorAddressMailTo',
        'dor_address1' => 'dorAddress1',
        'dor_address2' => 'dorAddress2',
        'dor_address_city' => 'dorAddressCity',
        'dor_address_region' => 'dorAddressRegion',
        'dor_address_postal_code' => 'dorAddressPostalCode',
        'dor_address_country' => 'dorAddressCountry',
        'zero_address_mail_to' => 'zeroAddressMailTo',
        'zero_address1' => 'zeroAddress1',
        'zero_address2' => 'zeroAddress2',
        'zero_address_city' => 'zeroAddressCity',
        'zero_address_region' => 'zeroAddressRegion',
        'zero_address_postal_code' => 'zeroAddressPostalCode',
        'zero_address_country' => 'zeroAddressCountry',
        'amended_address_mail_to' => 'amendedAddressMailTo',
        'amended_address1' => 'amendedAddress1',
        'amended_address2' => 'amendedAddress2',
        'amended_address_city' => 'amendedAddressCity',
        'amended_address_region' => 'amendedAddressRegion',
        'amended_address_postal_code' => 'amendedAddressPostalCode',
        'amended_address_country' => 'amendedAddressCountry',
        'online_back_filing' => 'onlineBackFiling',
        'online_amended_returns' => 'onlineAmendedReturns',
        'prepayment_frequency' => 'prepaymentFrequency',
        'outlet_location_identifiers_required' => 'outletLocationIdentifiersRequired',
        'listing_sort_order' => 'listingSortOrder',
        'dor_website' => 'dorWebsite',
        'file_for_all_outlets' => 'fileForAllOutlets',
        'paper_forms_do_not_have_discounts' => 'paperFormsDoNotHaveDiscounts',
        'stack_aggregation' => 'stackAggregation',
        'rounding_precision' => 'roundingPrecision',
        'inconsistency_tolerance' => 'inconsistencyTolerance',
        'eff_date' => 'effDate',
        'end_date' => 'endDate',
        'visible_to_customers' => 'visibleToCustomers',
        'requires_outlet_setup' => 'requiresOutletSetup',
        'ach_credit_allowed' => 'achCreditAllowed',
        'report_level' => 'reportLevel',
        'post_office_validated' => 'postOfficeValidated',
        'stack_aggregation_option' => 'stackAggregationOption',
        'sst_behavior' => 'sstBehavior',
        'non_sst_behavior' => 'nonSstBehavior',
        'dor_phone_number' => 'dorPhoneNumber',
        'average_check_clear_days' => 'averageCheckClearDays',
        'filter_zero_rated_line_details' => 'filterZeroRatedLineDetails',
        'allows_bulk_filing_accounts' => 'allowsBulkFilingAccounts',
        'bulk_account_instruction_link' => 'bulkAccountInstructionLink',
        'registration_id_format' => 'registrationIdFormat',
        'threshold_trigger' => 'thresholdTrigger',
        'transaction_sorting_option' => 'transactionSortingOption',
        'content_review_frequency_id' => 'contentReviewFrequencyId',
        'alias_for_form_master_id' => 'aliasForFormMasterId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'form_type_id' => 'setFormTypeId',
        'tax_form_code' => 'setTaxFormCode',
        'legacy_return_name' => 'setLegacyReturnName',
        'tax_form_name' => 'setTaxFormName',
        'description' => 'setDescription',
        'is_effective' => 'setIsEffective',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'authority_name' => 'setAuthorityName',
        'short_code' => 'setShortCode',
        'due_day' => 'setDueDay',
        'delinquent_day' => 'setDelinquentDay',
        'fiscal_year_start_month' => 'setFiscalYearStartMonth',
        'has_multi_frequencies' => 'setHasMultiFrequencies',
        'is_poa_required' => 'setIsPoaRequired',
        'is_registration_required' => 'setIsRegistrationRequired',
        'has_multi_registration_methods' => 'setHasMultiRegistrationMethods',
        'has_schedules' => 'setHasSchedules',
        'has_multi_filing_methods' => 'setHasMultiFilingMethods',
        'has_multi_pay_methods' => 'setHasMultiPayMethods',
        'is_eft_required' => 'setIsEftRequired',
        'is_file_pay_method_linked' => 'setIsFilePayMethodLinked',
        'mailing_received_rule_id' => 'setMailingReceivedRuleId',
        'proof_of_mailing_id' => 'setProofOfMailingId',
        'is_neg_amount_allowed' => 'setIsNegAmountAllowed',
        'allow_negative_overall_tax' => 'setAllowNegativeOverallTax',
        'is_netting_required' => 'setIsNettingRequired',
        'rounding_method_id' => 'setRoundingMethodId',
        'vendor_discount_annual_max' => 'setVendorDiscountAnnualMax',
        'versions_require_authority_approval' => 'setVersionsRequireAuthorityApproval',
        'outlet_reporting_method_id' => 'setOutletReportingMethodId',
        'has_reporting_codes' => 'setHasReportingCodes',
        'has_prepayments' => 'setHasPrepayments',
        'gross_includes_interstate_sales' => 'setGrossIncludesInterstateSales',
        'gross_includes_tax' => 'setGrossIncludesTax',
        'has_efile_fee' => 'setHasEfileFee',
        'has_epay_fee' => 'setHasEpayFee',
        'has_dependencies' => 'setHasDependencies',
        'required_efile_trigger' => 'setRequiredEfileTrigger',
        'required_eft_trigger' => 'setRequiredEftTrigger',
        'vendor_discount_efile' => 'setVendorDiscountEfile',
        'vendor_discount_paper' => 'setVendorDiscountPaper',
        'peer_reviewed' => 'setPeerReviewed',
        'peer_reviewed_id' => 'setPeerReviewedId',
        'peer_reviewed_date' => 'setPeerReviewedDate',
        'created_user_id' => 'setCreatedUserId',
        'created_date' => 'setCreatedDate',
        'modified_user_id' => 'setModifiedUserId',
        'modified_date' => 'setModifiedDate',
        'dor_address_mail_to' => 'setDorAddressMailTo',
        'dor_address1' => 'setDorAddress1',
        'dor_address2' => 'setDorAddress2',
        'dor_address_city' => 'setDorAddressCity',
        'dor_address_region' => 'setDorAddressRegion',
        'dor_address_postal_code' => 'setDorAddressPostalCode',
        'dor_address_country' => 'setDorAddressCountry',
        'zero_address_mail_to' => 'setZeroAddressMailTo',
        'zero_address1' => 'setZeroAddress1',
        'zero_address2' => 'setZeroAddress2',
        'zero_address_city' => 'setZeroAddressCity',
        'zero_address_region' => 'setZeroAddressRegion',
        'zero_address_postal_code' => 'setZeroAddressPostalCode',
        'zero_address_country' => 'setZeroAddressCountry',
        'amended_address_mail_to' => 'setAmendedAddressMailTo',
        'amended_address1' => 'setAmendedAddress1',
        'amended_address2' => 'setAmendedAddress2',
        'amended_address_city' => 'setAmendedAddressCity',
        'amended_address_region' => 'setAmendedAddressRegion',
        'amended_address_postal_code' => 'setAmendedAddressPostalCode',
        'amended_address_country' => 'setAmendedAddressCountry',
        'online_back_filing' => 'setOnlineBackFiling',
        'online_amended_returns' => 'setOnlineAmendedReturns',
        'prepayment_frequency' => 'setPrepaymentFrequency',
        'outlet_location_identifiers_required' => 'setOutletLocationIdentifiersRequired',
        'listing_sort_order' => 'setListingSortOrder',
        'dor_website' => 'setDorWebsite',
        'file_for_all_outlets' => 'setFileForAllOutlets',
        'paper_forms_do_not_have_discounts' => 'setPaperFormsDoNotHaveDiscounts',
        'stack_aggregation' => 'setStackAggregation',
        'rounding_precision' => 'setRoundingPrecision',
        'inconsistency_tolerance' => 'setInconsistencyTolerance',
        'eff_date' => 'setEffDate',
        'end_date' => 'setEndDate',
        'visible_to_customers' => 'setVisibleToCustomers',
        'requires_outlet_setup' => 'setRequiresOutletSetup',
        'ach_credit_allowed' => 'setAchCreditAllowed',
        'report_level' => 'setReportLevel',
        'post_office_validated' => 'setPostOfficeValidated',
        'stack_aggregation_option' => 'setStackAggregationOption',
        'sst_behavior' => 'setSstBehavior',
        'non_sst_behavior' => 'setNonSstBehavior',
        'dor_phone_number' => 'setDorPhoneNumber',
        'average_check_clear_days' => 'setAverageCheckClearDays',
        'filter_zero_rated_line_details' => 'setFilterZeroRatedLineDetails',
        'allows_bulk_filing_accounts' => 'setAllowsBulkFilingAccounts',
        'bulk_account_instruction_link' => 'setBulkAccountInstructionLink',
        'registration_id_format' => 'setRegistrationIdFormat',
        'threshold_trigger' => 'setThresholdTrigger',
        'transaction_sorting_option' => 'setTransactionSortingOption',
        'content_review_frequency_id' => 'setContentReviewFrequencyId',
        'alias_for_form_master_id' => 'setAliasForFormMasterId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'form_type_id' => 'getFormTypeId',
        'tax_form_code' => 'getTaxFormCode',
        'legacy_return_name' => 'getLegacyReturnName',
        'tax_form_name' => 'getTaxFormName',
        'description' => 'getDescription',
        'is_effective' => 'getIsEffective',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'authority_name' => 'getAuthorityName',
        'short_code' => 'getShortCode',
        'due_day' => 'getDueDay',
        'delinquent_day' => 'getDelinquentDay',
        'fiscal_year_start_month' => 'getFiscalYearStartMonth',
        'has_multi_frequencies' => 'getHasMultiFrequencies',
        'is_poa_required' => 'getIsPoaRequired',
        'is_registration_required' => 'getIsRegistrationRequired',
        'has_multi_registration_methods' => 'getHasMultiRegistrationMethods',
        'has_schedules' => 'getHasSchedules',
        'has_multi_filing_methods' => 'getHasMultiFilingMethods',
        'has_multi_pay_methods' => 'getHasMultiPayMethods',
        'is_eft_required' => 'getIsEftRequired',
        'is_file_pay_method_linked' => 'getIsFilePayMethodLinked',
        'mailing_received_rule_id' => 'getMailingReceivedRuleId',
        'proof_of_mailing_id' => 'getProofOfMailingId',
        'is_neg_amount_allowed' => 'getIsNegAmountAllowed',
        'allow_negative_overall_tax' => 'getAllowNegativeOverallTax',
        'is_netting_required' => 'getIsNettingRequired',
        'rounding_method_id' => 'getRoundingMethodId',
        'vendor_discount_annual_max' => 'getVendorDiscountAnnualMax',
        'versions_require_authority_approval' => 'getVersionsRequireAuthorityApproval',
        'outlet_reporting_method_id' => 'getOutletReportingMethodId',
        'has_reporting_codes' => 'getHasReportingCodes',
        'has_prepayments' => 'getHasPrepayments',
        'gross_includes_interstate_sales' => 'getGrossIncludesInterstateSales',
        'gross_includes_tax' => 'getGrossIncludesTax',
        'has_efile_fee' => 'getHasEfileFee',
        'has_epay_fee' => 'getHasEpayFee',
        'has_dependencies' => 'getHasDependencies',
        'required_efile_trigger' => 'getRequiredEfileTrigger',
        'required_eft_trigger' => 'getRequiredEftTrigger',
        'vendor_discount_efile' => 'getVendorDiscountEfile',
        'vendor_discount_paper' => 'getVendorDiscountPaper',
        'peer_reviewed' => 'getPeerReviewed',
        'peer_reviewed_id' => 'getPeerReviewedId',
        'peer_reviewed_date' => 'getPeerReviewedDate',
        'created_user_id' => 'getCreatedUserId',
        'created_date' => 'getCreatedDate',
        'modified_user_id' => 'getModifiedUserId',
        'modified_date' => 'getModifiedDate',
        'dor_address_mail_to' => 'getDorAddressMailTo',
        'dor_address1' => 'getDorAddress1',
        'dor_address2' => 'getDorAddress2',
        'dor_address_city' => 'getDorAddressCity',
        'dor_address_region' => 'getDorAddressRegion',
        'dor_address_postal_code' => 'getDorAddressPostalCode',
        'dor_address_country' => 'getDorAddressCountry',
        'zero_address_mail_to' => 'getZeroAddressMailTo',
        'zero_address1' => 'getZeroAddress1',
        'zero_address2' => 'getZeroAddress2',
        'zero_address_city' => 'getZeroAddressCity',
        'zero_address_region' => 'getZeroAddressRegion',
        'zero_address_postal_code' => 'getZeroAddressPostalCode',
        'zero_address_country' => 'getZeroAddressCountry',
        'amended_address_mail_to' => 'getAmendedAddressMailTo',
        'amended_address1' => 'getAmendedAddress1',
        'amended_address2' => 'getAmendedAddress2',
        'amended_address_city' => 'getAmendedAddressCity',
        'amended_address_region' => 'getAmendedAddressRegion',
        'amended_address_postal_code' => 'getAmendedAddressPostalCode',
        'amended_address_country' => 'getAmendedAddressCountry',
        'online_back_filing' => 'getOnlineBackFiling',
        'online_amended_returns' => 'getOnlineAmendedReturns',
        'prepayment_frequency' => 'getPrepaymentFrequency',
        'outlet_location_identifiers_required' => 'getOutletLocationIdentifiersRequired',
        'listing_sort_order' => 'getListingSortOrder',
        'dor_website' => 'getDorWebsite',
        'file_for_all_outlets' => 'getFileForAllOutlets',
        'paper_forms_do_not_have_discounts' => 'getPaperFormsDoNotHaveDiscounts',
        'stack_aggregation' => 'getStackAggregation',
        'rounding_precision' => 'getRoundingPrecision',
        'inconsistency_tolerance' => 'getInconsistencyTolerance',
        'eff_date' => 'getEffDate',
        'end_date' => 'getEndDate',
        'visible_to_customers' => 'getVisibleToCustomers',
        'requires_outlet_setup' => 'getRequiresOutletSetup',
        'ach_credit_allowed' => 'getAchCreditAllowed',
        'report_level' => 'getReportLevel',
        'post_office_validated' => 'getPostOfficeValidated',
        'stack_aggregation_option' => 'getStackAggregationOption',
        'sst_behavior' => 'getSstBehavior',
        'non_sst_behavior' => 'getNonSstBehavior',
        'dor_phone_number' => 'getDorPhoneNumber',
        'average_check_clear_days' => 'getAverageCheckClearDays',
        'filter_zero_rated_line_details' => 'getFilterZeroRatedLineDetails',
        'allows_bulk_filing_accounts' => 'getAllowsBulkFilingAccounts',
        'bulk_account_instruction_link' => 'getBulkAccountInstructionLink',
        'registration_id_format' => 'getRegistrationIdFormat',
        'threshold_trigger' => 'getThresholdTrigger',
        'transaction_sorting_option' => 'getTransactionSortingOption',
        'content_review_frequency_id' => 'getContentReviewFrequencyId',
        'alias_for_form_master_id' => 'getAliasForFormMasterId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['form_type_id'] = isset($data['form_type_id']) ? $data['form_type_id'] : null;
        $this->container['tax_form_code'] = isset($data['tax_form_code']) ? $data['tax_form_code'] : null;
        $this->container['legacy_return_name'] = isset($data['legacy_return_name']) ? $data['legacy_return_name'] : null;
        $this->container['tax_form_name'] = isset($data['tax_form_name']) ? $data['tax_form_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_effective'] = isset($data['is_effective']) ? $data['is_effective'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['authority_name'] = isset($data['authority_name']) ? $data['authority_name'] : null;
        $this->container['short_code'] = isset($data['short_code']) ? $data['short_code'] : null;
        $this->container['due_day'] = isset($data['due_day']) ? $data['due_day'] : null;
        $this->container['delinquent_day'] = isset($data['delinquent_day']) ? $data['delinquent_day'] : null;
        $this->container['fiscal_year_start_month'] = isset($data['fiscal_year_start_month']) ? $data['fiscal_year_start_month'] : null;
        $this->container['has_multi_frequencies'] = isset($data['has_multi_frequencies']) ? $data['has_multi_frequencies'] : null;
        $this->container['is_poa_required'] = isset($data['is_poa_required']) ? $data['is_poa_required'] : null;
        $this->container['is_registration_required'] = isset($data['is_registration_required']) ? $data['is_registration_required'] : null;
        $this->container['has_multi_registration_methods'] = isset($data['has_multi_registration_methods']) ? $data['has_multi_registration_methods'] : null;
        $this->container['has_schedules'] = isset($data['has_schedules']) ? $data['has_schedules'] : null;
        $this->container['has_multi_filing_methods'] = isset($data['has_multi_filing_methods']) ? $data['has_multi_filing_methods'] : null;
        $this->container['has_multi_pay_methods'] = isset($data['has_multi_pay_methods']) ? $data['has_multi_pay_methods'] : null;
        $this->container['is_eft_required'] = isset($data['is_eft_required']) ? $data['is_eft_required'] : null;
        $this->container['is_file_pay_method_linked'] = isset($data['is_file_pay_method_linked']) ? $data['is_file_pay_method_linked'] : null;
        $this->container['mailing_received_rule_id'] = isset($data['mailing_received_rule_id']) ? $data['mailing_received_rule_id'] : null;
        $this->container['proof_of_mailing_id'] = isset($data['proof_of_mailing_id']) ? $data['proof_of_mailing_id'] : null;
        $this->container['is_neg_amount_allowed'] = isset($data['is_neg_amount_allowed']) ? $data['is_neg_amount_allowed'] : null;
        $this->container['allow_negative_overall_tax'] = isset($data['allow_negative_overall_tax']) ? $data['allow_negative_overall_tax'] : null;
        $this->container['is_netting_required'] = isset($data['is_netting_required']) ? $data['is_netting_required'] : null;
        $this->container['rounding_method_id'] = isset($data['rounding_method_id']) ? $data['rounding_method_id'] : null;
        $this->container['vendor_discount_annual_max'] = isset($data['vendor_discount_annual_max']) ? $data['vendor_discount_annual_max'] : null;
        $this->container['versions_require_authority_approval'] = isset($data['versions_require_authority_approval']) ? $data['versions_require_authority_approval'] : null;
        $this->container['outlet_reporting_method_id'] = isset($data['outlet_reporting_method_id']) ? $data['outlet_reporting_method_id'] : null;
        $this->container['has_reporting_codes'] = isset($data['has_reporting_codes']) ? $data['has_reporting_codes'] : null;
        $this->container['has_prepayments'] = isset($data['has_prepayments']) ? $data['has_prepayments'] : null;
        $this->container['gross_includes_interstate_sales'] = isset($data['gross_includes_interstate_sales']) ? $data['gross_includes_interstate_sales'] : null;
        $this->container['gross_includes_tax'] = isset($data['gross_includes_tax']) ? $data['gross_includes_tax'] : null;
        $this->container['has_efile_fee'] = isset($data['has_efile_fee']) ? $data['has_efile_fee'] : null;
        $this->container['has_epay_fee'] = isset($data['has_epay_fee']) ? $data['has_epay_fee'] : null;
        $this->container['has_dependencies'] = isset($data['has_dependencies']) ? $data['has_dependencies'] : null;
        $this->container['required_efile_trigger'] = isset($data['required_efile_trigger']) ? $data['required_efile_trigger'] : null;
        $this->container['required_eft_trigger'] = isset($data['required_eft_trigger']) ? $data['required_eft_trigger'] : null;
        $this->container['vendor_discount_efile'] = isset($data['vendor_discount_efile']) ? $data['vendor_discount_efile'] : null;
        $this->container['vendor_discount_paper'] = isset($data['vendor_discount_paper']) ? $data['vendor_discount_paper'] : null;
        $this->container['peer_reviewed'] = isset($data['peer_reviewed']) ? $data['peer_reviewed'] : null;
        $this->container['peer_reviewed_id'] = isset($data['peer_reviewed_id']) ? $data['peer_reviewed_id'] : null;
        $this->container['peer_reviewed_date'] = isset($data['peer_reviewed_date']) ? $data['peer_reviewed_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['dor_address_mail_to'] = isset($data['dor_address_mail_to']) ? $data['dor_address_mail_to'] : null;
        $this->container['dor_address1'] = isset($data['dor_address1']) ? $data['dor_address1'] : null;
        $this->container['dor_address2'] = isset($data['dor_address2']) ? $data['dor_address2'] : null;
        $this->container['dor_address_city'] = isset($data['dor_address_city']) ? $data['dor_address_city'] : null;
        $this->container['dor_address_region'] = isset($data['dor_address_region']) ? $data['dor_address_region'] : null;
        $this->container['dor_address_postal_code'] = isset($data['dor_address_postal_code']) ? $data['dor_address_postal_code'] : null;
        $this->container['dor_address_country'] = isset($data['dor_address_country']) ? $data['dor_address_country'] : null;
        $this->container['zero_address_mail_to'] = isset($data['zero_address_mail_to']) ? $data['zero_address_mail_to'] : null;
        $this->container['zero_address1'] = isset($data['zero_address1']) ? $data['zero_address1'] : null;
        $this->container['zero_address2'] = isset($data['zero_address2']) ? $data['zero_address2'] : null;
        $this->container['zero_address_city'] = isset($data['zero_address_city']) ? $data['zero_address_city'] : null;
        $this->container['zero_address_region'] = isset($data['zero_address_region']) ? $data['zero_address_region'] : null;
        $this->container['zero_address_postal_code'] = isset($data['zero_address_postal_code']) ? $data['zero_address_postal_code'] : null;
        $this->container['zero_address_country'] = isset($data['zero_address_country']) ? $data['zero_address_country'] : null;
        $this->container['amended_address_mail_to'] = isset($data['amended_address_mail_to']) ? $data['amended_address_mail_to'] : null;
        $this->container['amended_address1'] = isset($data['amended_address1']) ? $data['amended_address1'] : null;
        $this->container['amended_address2'] = isset($data['amended_address2']) ? $data['amended_address2'] : null;
        $this->container['amended_address_city'] = isset($data['amended_address_city']) ? $data['amended_address_city'] : null;
        $this->container['amended_address_region'] = isset($data['amended_address_region']) ? $data['amended_address_region'] : null;
        $this->container['amended_address_postal_code'] = isset($data['amended_address_postal_code']) ? $data['amended_address_postal_code'] : null;
        $this->container['amended_address_country'] = isset($data['amended_address_country']) ? $data['amended_address_country'] : null;
        $this->container['online_back_filing'] = isset($data['online_back_filing']) ? $data['online_back_filing'] : null;
        $this->container['online_amended_returns'] = isset($data['online_amended_returns']) ? $data['online_amended_returns'] : null;
        $this->container['prepayment_frequency'] = isset($data['prepayment_frequency']) ? $data['prepayment_frequency'] : null;
        $this->container['outlet_location_identifiers_required'] = isset($data['outlet_location_identifiers_required']) ? $data['outlet_location_identifiers_required'] : null;
        $this->container['listing_sort_order'] = isset($data['listing_sort_order']) ? $data['listing_sort_order'] : null;
        $this->container['dor_website'] = isset($data['dor_website']) ? $data['dor_website'] : null;
        $this->container['file_for_all_outlets'] = isset($data['file_for_all_outlets']) ? $data['file_for_all_outlets'] : null;
        $this->container['paper_forms_do_not_have_discounts'] = isset($data['paper_forms_do_not_have_discounts']) ? $data['paper_forms_do_not_have_discounts'] : null;
        $this->container['stack_aggregation'] = isset($data['stack_aggregation']) ? $data['stack_aggregation'] : null;
        $this->container['rounding_precision'] = isset($data['rounding_precision']) ? $data['rounding_precision'] : null;
        $this->container['inconsistency_tolerance'] = isset($data['inconsistency_tolerance']) ? $data['inconsistency_tolerance'] : null;
        $this->container['eff_date'] = isset($data['eff_date']) ? $data['eff_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['visible_to_customers'] = isset($data['visible_to_customers']) ? $data['visible_to_customers'] : null;
        $this->container['requires_outlet_setup'] = isset($data['requires_outlet_setup']) ? $data['requires_outlet_setup'] : null;
        $this->container['ach_credit_allowed'] = isset($data['ach_credit_allowed']) ? $data['ach_credit_allowed'] : null;
        $this->container['report_level'] = isset($data['report_level']) ? $data['report_level'] : null;
        $this->container['post_office_validated'] = isset($data['post_office_validated']) ? $data['post_office_validated'] : null;
        $this->container['stack_aggregation_option'] = isset($data['stack_aggregation_option']) ? $data['stack_aggregation_option'] : null;
        $this->container['sst_behavior'] = isset($data['sst_behavior']) ? $data['sst_behavior'] : null;
        $this->container['non_sst_behavior'] = isset($data['non_sst_behavior']) ? $data['non_sst_behavior'] : null;
        $this->container['dor_phone_number'] = isset($data['dor_phone_number']) ? $data['dor_phone_number'] : null;
        $this->container['average_check_clear_days'] = isset($data['average_check_clear_days']) ? $data['average_check_clear_days'] : null;
        $this->container['filter_zero_rated_line_details'] = isset($data['filter_zero_rated_line_details']) ? $data['filter_zero_rated_line_details'] : null;
        $this->container['allows_bulk_filing_accounts'] = isset($data['allows_bulk_filing_accounts']) ? $data['allows_bulk_filing_accounts'] : null;
        $this->container['bulk_account_instruction_link'] = isset($data['bulk_account_instruction_link']) ? $data['bulk_account_instruction_link'] : null;
        $this->container['registration_id_format'] = isset($data['registration_id_format']) ? $data['registration_id_format'] : null;
        $this->container['threshold_trigger'] = isset($data['threshold_trigger']) ? $data['threshold_trigger'] : null;
        $this->container['transaction_sorting_option'] = isset($data['transaction_sorting_option']) ? $data['transaction_sorting_option'] : null;
        $this->container['content_review_frequency_id'] = isset($data['content_review_frequency_id']) ? $data['content_review_frequency_id'] : null;
        $this->container['alias_for_form_master_id'] = isset($data['alias_for_form_master_id']) ? $data['alias_for_form_master_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID number of this form master object
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets form_type_id
     *
     * @return int
     */
    public function getFormTypeId()
    {
        return $this->container['form_type_id'];
    }

    /**
     * Sets form_type_id
     *
     * @param int $form_type_id The type of the form being submitted
     *
     * @return $this
     */
    public function setFormTypeId($form_type_id)
    {
        $this->container['form_type_id'] = $form_type_id;

        return $this;
    }

    /**
     * Gets tax_form_code
     *
     * @return string
     */
    public function getTaxFormCode()
    {
        return $this->container['tax_form_code'];
    }

    /**
     * Sets tax_form_code
     *
     * @param string $tax_form_code Unique tax form code representing this tax form
     *
     * @return $this
     */
    public function setTaxFormCode($tax_form_code)
    {
        $this->container['tax_form_code'] = $tax_form_code;

        return $this;
    }

    /**
     * Gets legacy_return_name
     *
     * @return string
     */
    public function getLegacyReturnName()
    {
        return $this->container['legacy_return_name'];
    }

    /**
     * Sets legacy_return_name
     *
     * @param string $legacy_return_name Legacy return name as known in the AvaFileForm table
     *
     * @return $this
     */
    public function setLegacyReturnName($legacy_return_name)
    {
        $this->container['legacy_return_name'] = $legacy_return_name;

        return $this;
    }

    /**
     * Gets tax_form_name
     *
     * @return string
     */
    public function getTaxFormName()
    {
        return $this->container['tax_form_name'];
    }

    /**
     * Sets tax_form_name
     *
     * @param string $tax_form_name Human readable form summary name
     *
     * @return $this
     */
    public function setTaxFormName($tax_form_name)
    {
        $this->container['tax_form_name'] = $tax_form_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of this tax form
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_effective
     *
     * @return bool
     */
    public function getIsEffective()
    {
        return $this->container['is_effective'];
    }

    /**
     * Sets is_effective
     *
     * @param bool $is_effective True if this form is available for use
     *
     * @return $this
     */
    public function setIsEffective($is_effective)
    {
        $this->container['is_effective'] = $is_effective;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country ISO 3166 code of the country that issued this tax form
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The region within which this form was issued
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets authority_name
     *
     * @return string
     */
    public function getAuthorityName()
    {
        return $this->container['authority_name'];
    }

    /**
     * Sets authority_name
     *
     * @param string $authority_name Tax authority that issued the form
     *
     * @return $this
     */
    public function setAuthorityName($authority_name)
    {
        $this->container['authority_name'] = $authority_name;

        return $this;
    }

    /**
     * Gets short_code
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['short_code'];
    }

    /**
     * Sets short_code
     *
     * @param string $short_code DEPRECATED
     *
     * @return $this
     */
    public function setShortCode($short_code)
    {
        $this->container['short_code'] = $short_code;

        return $this;
    }

    /**
     * Gets due_day
     *
     * @return int
     */
    public function getDueDay()
    {
        return $this->container['due_day'];
    }

    /**
     * Sets due_day
     *
     * @param int $due_day Day of the month when the form is due
     *
     * @return $this
     */
    public function setDueDay($due_day)
    {
        $this->container['due_day'] = $due_day;

        return $this;
    }

    /**
     * Gets delinquent_day
     *
     * @return int
     */
    public function getDelinquentDay()
    {
        return $this->container['delinquent_day'];
    }

    /**
     * Sets delinquent_day
     *
     * @param int $delinquent_day Day of the month on which the form is considered delinquent. Almost always the same as DueDay
     *
     * @return $this
     */
    public function setDelinquentDay($delinquent_day)
    {
        $this->container['delinquent_day'] = $delinquent_day;

        return $this;
    }

    /**
     * Gets fiscal_year_start_month
     *
     * @return int
     */
    public function getFiscalYearStartMonth()
    {
        return $this->container['fiscal_year_start_month'];
    }

    /**
     * Sets fiscal_year_start_month
     *
     * @param int $fiscal_year_start_month Month of the year the state considers as the first fiscal month
     *
     * @return $this
     */
    public function setFiscalYearStartMonth($fiscal_year_start_month)
    {
        $this->container['fiscal_year_start_month'] = $fiscal_year_start_month;

        return $this;
    }

    /**
     * Gets has_multi_frequencies
     *
     * @return bool
     */
    public function getHasMultiFrequencies()
    {
        return $this->container['has_multi_frequencies'];
    }

    /**
     * Sets has_multi_frequencies
     *
     * @param bool $has_multi_frequencies Can form support multi frequencies
     *
     * @return $this
     */
    public function setHasMultiFrequencies($has_multi_frequencies)
    {
        $this->container['has_multi_frequencies'] = $has_multi_frequencies;

        return $this;
    }

    /**
     * Gets is_poa_required
     *
     * @return bool
     */
    public function getIsPoaRequired()
    {
        return $this->container['is_poa_required'];
    }

    /**
     * Sets is_poa_required
     *
     * @param bool $is_poa_required Does this tax authority require a power of attorney in order to speak to Avalara
     *
     * @return $this
     */
    public function setIsPoaRequired($is_poa_required)
    {
        $this->container['is_poa_required'] = $is_poa_required;

        return $this;
    }

    /**
     * Gets is_registration_required
     *
     * @return bool
     */
    public function getIsRegistrationRequired()
    {
        return $this->container['is_registration_required'];
    }

    /**
     * Sets is_registration_required
     *
     * @param bool $is_registration_required True if this form requires that the customer register with the authority
     *
     * @return $this
     */
    public function setIsRegistrationRequired($is_registration_required)
    {
        $this->container['is_registration_required'] = $is_registration_required;

        return $this;
    }

    /**
     * Gets has_multi_registration_methods
     *
     * @return bool
     */
    public function getHasMultiRegistrationMethods()
    {
        return $this->container['has_multi_registration_methods'];
    }

    /**
     * Sets has_multi_registration_methods
     *
     * @param bool $has_multi_registration_methods Unused
     *
     * @return $this
     */
    public function setHasMultiRegistrationMethods($has_multi_registration_methods)
    {
        $this->container['has_multi_registration_methods'] = $has_multi_registration_methods;

        return $this;
    }

    /**
     * Gets has_schedules
     *
     * @return bool
     */
    public function getHasSchedules()
    {
        return $this->container['has_schedules'];
    }

    /**
     * Sets has_schedules
     *
     * @param bool $has_schedules Unused
     *
     * @return $this
     */
    public function setHasSchedules($has_schedules)
    {
        $this->container['has_schedules'] = $has_schedules;

        return $this;
    }

    /**
     * Gets has_multi_filing_methods
     *
     * @return bool
     */
    public function getHasMultiFilingMethods()
    {
        return $this->container['has_multi_filing_methods'];
    }

    /**
     * Sets has_multi_filing_methods
     *
     * @param bool $has_multi_filing_methods Unused
     *
     * @return $this
     */
    public function setHasMultiFilingMethods($has_multi_filing_methods)
    {
        $this->container['has_multi_filing_methods'] = $has_multi_filing_methods;

        return $this;
    }

    /**
     * Gets has_multi_pay_methods
     *
     * @return bool
     */
    public function getHasMultiPayMethods()
    {
        return $this->container['has_multi_pay_methods'];
    }

    /**
     * Sets has_multi_pay_methods
     *
     * @param bool $has_multi_pay_methods Unused
     *
     * @return $this
     */
    public function setHasMultiPayMethods($has_multi_pay_methods)
    {
        $this->container['has_multi_pay_methods'] = $has_multi_pay_methods;

        return $this;
    }

    /**
     * Gets is_eft_required
     *
     * @return bool
     */
    public function getIsEftRequired()
    {
        return $this->container['is_eft_required'];
    }

    /**
     * Sets is_eft_required
     *
     * @param bool $is_eft_required Unused
     *
     * @return $this
     */
    public function setIsEftRequired($is_eft_required)
    {
        $this->container['is_eft_required'] = $is_eft_required;

        return $this;
    }

    /**
     * Gets is_file_pay_method_linked
     *
     * @return bool
     */
    public function getIsFilePayMethodLinked()
    {
        return $this->container['is_file_pay_method_linked'];
    }

    /**
     * Sets is_file_pay_method_linked
     *
     * @param bool $is_file_pay_method_linked Unused
     *
     * @return $this
     */
    public function setIsFilePayMethodLinked($is_file_pay_method_linked)
    {
        $this->container['is_file_pay_method_linked'] = $is_file_pay_method_linked;

        return $this;
    }

    /**
     * Gets mailing_received_rule_id
     *
     * @return int
     */
    public function getMailingReceivedRuleId()
    {
        return $this->container['mailing_received_rule_id'];
    }

    /**
     * Sets mailing_received_rule_id
     *
     * @param int $mailing_received_rule_id Unused
     *
     * @return $this
     */
    public function setMailingReceivedRuleId($mailing_received_rule_id)
    {
        $this->container['mailing_received_rule_id'] = $mailing_received_rule_id;

        return $this;
    }

    /**
     * Gets proof_of_mailing_id
     *
     * @return int
     */
    public function getProofOfMailingId()
    {
        return $this->container['proof_of_mailing_id'];
    }

    /**
     * Sets proof_of_mailing_id
     *
     * @param int $proof_of_mailing_id Unused
     *
     * @return $this
     */
    public function setProofOfMailingId($proof_of_mailing_id)
    {
        $this->container['proof_of_mailing_id'] = $proof_of_mailing_id;

        return $this;
    }

    /**
     * Gets is_neg_amount_allowed
     *
     * @return bool
     */
    public function getIsNegAmountAllowed()
    {
        return $this->container['is_neg_amount_allowed'];
    }

    /**
     * Sets is_neg_amount_allowed
     *
     * @param bool $is_neg_amount_allowed True if you can report a negative amount in a single jurisdiction on the form
     *
     * @return $this
     */
    public function setIsNegAmountAllowed($is_neg_amount_allowed)
    {
        $this->container['is_neg_amount_allowed'] = $is_neg_amount_allowed;

        return $this;
    }

    /**
     * Gets allow_negative_overall_tax
     *
     * @return bool
     */
    public function getAllowNegativeOverallTax()
    {
        return $this->container['allow_negative_overall_tax'];
    }

    /**
     * Sets allow_negative_overall_tax
     *
     * @param bool $allow_negative_overall_tax True if the form overall can go negative
     *
     * @return $this
     */
    public function setAllowNegativeOverallTax($allow_negative_overall_tax)
    {
        $this->container['allow_negative_overall_tax'] = $allow_negative_overall_tax;

        return $this;
    }

    /**
     * Gets is_netting_required
     *
     * @return bool
     */
    public function getIsNettingRequired()
    {
        return $this->container['is_netting_required'];
    }

    /**
     * Sets is_netting_required
     *
     * @param bool $is_netting_required Unused
     *
     * @return $this
     */
    public function setIsNettingRequired($is_netting_required)
    {
        $this->container['is_netting_required'] = $is_netting_required;

        return $this;
    }

    /**
     * Gets rounding_method_id
     *
     * @return int
     */
    public function getRoundingMethodId()
    {
        return $this->container['rounding_method_id'];
    }

    /**
     * Sets rounding_method_id
     *
     * @param int $rounding_method_id Unused
     *
     * @return $this
     */
    public function setRoundingMethodId($rounding_method_id)
    {
        $this->container['rounding_method_id'] = $rounding_method_id;

        return $this;
    }

    /**
     * Gets vendor_discount_annual_max
     *
     * @return double
     */
    public function getVendorDiscountAnnualMax()
    {
        return $this->container['vendor_discount_annual_max'];
    }

    /**
     * Sets vendor_discount_annual_max
     *
     * @param double $vendor_discount_annual_max Total amount of discounts that can be received by a vendor each year
     *
     * @return $this
     */
    public function setVendorDiscountAnnualMax($vendor_discount_annual_max)
    {
        $this->container['vendor_discount_annual_max'] = $vendor_discount_annual_max;

        return $this;
    }

    /**
     * Gets versions_require_authority_approval
     *
     * @return bool
     */
    public function getVersionsRequireAuthorityApproval()
    {
        return $this->container['versions_require_authority_approval'];
    }

    /**
     * Sets versions_require_authority_approval
     *
     * @param bool $versions_require_authority_approval Unused
     *
     * @return $this
     */
    public function setVersionsRequireAuthorityApproval($versions_require_authority_approval)
    {
        $this->container['versions_require_authority_approval'] = $versions_require_authority_approval;

        return $this;
    }

    /**
     * Gets outlet_reporting_method_id
     *
     * @return int
     */
    public function getOutletReportingMethodId()
    {
        return $this->container['outlet_reporting_method_id'];
    }

    /**
     * Sets outlet_reporting_method_id
     *
     * @param int $outlet_reporting_method_id Type of outlet reporting for this form
     *
     * @return $this
     */
    public function setOutletReportingMethodId($outlet_reporting_method_id)
    {
        $this->container['outlet_reporting_method_id'] = $outlet_reporting_method_id;

        return $this;
    }

    /**
     * Gets has_reporting_codes
     *
     * @return bool
     */
    public function getHasReportingCodes()
    {
        return $this->container['has_reporting_codes'];
    }

    /**
     * Sets has_reporting_codes
     *
     * @param bool $has_reporting_codes Unused
     *
     * @return $this
     */
    public function setHasReportingCodes($has_reporting_codes)
    {
        $this->container['has_reporting_codes'] = $has_reporting_codes;

        return $this;
    }

    /**
     * Gets has_prepayments
     *
     * @return bool
     */
    public function getHasPrepayments()
    {
        return $this->container['has_prepayments'];
    }

    /**
     * Sets has_prepayments
     *
     * @param bool $has_prepayments Not sure if used
     *
     * @return $this
     */
    public function setHasPrepayments($has_prepayments)
    {
        $this->container['has_prepayments'] = $has_prepayments;

        return $this;
    }

    /**
     * Gets gross_includes_interstate_sales
     *
     * @return bool
     */
    public function getGrossIncludesInterstateSales()
    {
        return $this->container['gross_includes_interstate_sales'];
    }

    /**
     * Sets gross_includes_interstate_sales
     *
     * @param bool $gross_includes_interstate_sales Unused
     *
     * @return $this
     */
    public function setGrossIncludesInterstateSales($gross_includes_interstate_sales)
    {
        $this->container['gross_includes_interstate_sales'] = $gross_includes_interstate_sales;

        return $this;
    }

    /**
     * Gets gross_includes_tax
     *
     * @return string
     */
    public function getGrossIncludesTax()
    {
        return $this->container['gross_includes_tax'];
    }

    /**
     * Sets gross_includes_tax
     *
     * @param string $gross_includes_tax Unused
     *
     * @return $this
     */
    public function setGrossIncludesTax($gross_includes_tax)
    {
        $this->container['gross_includes_tax'] = $gross_includes_tax;

        return $this;
    }

    /**
     * Gets has_efile_fee
     *
     * @return bool
     */
    public function getHasEfileFee()
    {
        return $this->container['has_efile_fee'];
    }

    /**
     * Sets has_efile_fee
     *
     * @param bool $has_efile_fee Unused
     *
     * @return $this
     */
    public function setHasEfileFee($has_efile_fee)
    {
        $this->container['has_efile_fee'] = $has_efile_fee;

        return $this;
    }

    /**
     * Gets has_epay_fee
     *
     * @return bool
     */
    public function getHasEpayFee()
    {
        return $this->container['has_epay_fee'];
    }

    /**
     * Sets has_epay_fee
     *
     * @param bool $has_epay_fee Unused
     *
     * @return $this
     */
    public function setHasEpayFee($has_epay_fee)
    {
        $this->container['has_epay_fee'] = $has_epay_fee;

        return $this;
    }

    /**
     * Gets has_dependencies
     *
     * @return bool
     */
    public function getHasDependencies()
    {
        return $this->container['has_dependencies'];
    }

    /**
     * Sets has_dependencies
     *
     * @param bool $has_dependencies Unused
     *
     * @return $this
     */
    public function setHasDependencies($has_dependencies)
    {
        $this->container['has_dependencies'] = $has_dependencies;

        return $this;
    }

    /**
     * Gets required_efile_trigger
     *
     * @return string
     */
    public function getRequiredEfileTrigger()
    {
        return $this->container['required_efile_trigger'];
    }

    /**
     * Sets required_efile_trigger
     *
     * @param string $required_efile_trigger Unused
     *
     * @return $this
     */
    public function setRequiredEfileTrigger($required_efile_trigger)
    {
        $this->container['required_efile_trigger'] = $required_efile_trigger;

        return $this;
    }

    /**
     * Gets required_eft_trigger
     *
     * @return string
     */
    public function getRequiredEftTrigger()
    {
        return $this->container['required_eft_trigger'];
    }

    /**
     * Sets required_eft_trigger
     *
     * @param string $required_eft_trigger Unused
     *
     * @return $this
     */
    public function setRequiredEftTrigger($required_eft_trigger)
    {
        $this->container['required_eft_trigger'] = $required_eft_trigger;

        return $this;
    }

    /**
     * Gets vendor_discount_efile
     *
     * @return bool
     */
    public function getVendorDiscountEfile()
    {
        return $this->container['vendor_discount_efile'];
    }

    /**
     * Sets vendor_discount_efile
     *
     * @param bool $vendor_discount_efile Unused
     *
     * @return $this
     */
    public function setVendorDiscountEfile($vendor_discount_efile)
    {
        $this->container['vendor_discount_efile'] = $vendor_discount_efile;

        return $this;
    }

    /**
     * Gets vendor_discount_paper
     *
     * @return bool
     */
    public function getVendorDiscountPaper()
    {
        return $this->container['vendor_discount_paper'];
    }

    /**
     * Sets vendor_discount_paper
     *
     * @param bool $vendor_discount_paper Unused
     *
     * @return $this
     */
    public function setVendorDiscountPaper($vendor_discount_paper)
    {
        $this->container['vendor_discount_paper'] = $vendor_discount_paper;

        return $this;
    }

    /**
     * Gets peer_reviewed
     *
     * @return string
     */
    public function getPeerReviewed()
    {
        return $this->container['peer_reviewed'];
    }

    /**
     * Sets peer_reviewed
     *
     * @param string $peer_reviewed Unused
     *
     * @return $this
     */
    public function setPeerReviewed($peer_reviewed)
    {
        $this->container['peer_reviewed'] = $peer_reviewed;

        return $this;
    }

    /**
     * Gets peer_reviewed_id
     *
     * @return string
     */
    public function getPeerReviewedId()
    {
        return $this->container['peer_reviewed_id'];
    }

    /**
     * Sets peer_reviewed_id
     *
     * @param string $peer_reviewed_id Unused
     *
     * @return $this
     */
    public function setPeerReviewedId($peer_reviewed_id)
    {
        $this->container['peer_reviewed_id'] = $peer_reviewed_id;

        return $this;
    }

    /**
     * Gets peer_reviewed_date
     *
     * @return string
     */
    public function getPeerReviewedDate()
    {
        return $this->container['peer_reviewed_date'];
    }

    /**
     * Sets peer_reviewed_date
     *
     * @param string $peer_reviewed_date Unused
     *
     * @return $this
     */
    public function setPeerReviewedDate($peer_reviewed_date)
    {
        $this->container['peer_reviewed_date'] = $peer_reviewed_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id ID of the Avalara user who created the form
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Date when form was created
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id ID of the Avalara user who modified the form
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Date when form was modified
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets dor_address_mail_to
     *
     * @return string
     */
    public function getDorAddressMailTo()
    {
        return $this->container['dor_address_mail_to'];
    }

    /**
     * Sets dor_address_mail_to
     *
     * @param string $dor_address_mail_to Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddressMailTo($dor_address_mail_to)
    {
        $this->container['dor_address_mail_to'] = $dor_address_mail_to;

        return $this;
    }

    /**
     * Gets dor_address1
     *
     * @return string
     */
    public function getDorAddress1()
    {
        return $this->container['dor_address1'];
    }

    /**
     * Sets dor_address1
     *
     * @param string $dor_address1 Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddress1($dor_address1)
    {
        $this->container['dor_address1'] = $dor_address1;

        return $this;
    }

    /**
     * Gets dor_address2
     *
     * @return string
     */
    public function getDorAddress2()
    {
        return $this->container['dor_address2'];
    }

    /**
     * Sets dor_address2
     *
     * @param string $dor_address2 Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddress2($dor_address2)
    {
        $this->container['dor_address2'] = $dor_address2;

        return $this;
    }

    /**
     * Gets dor_address_city
     *
     * @return string
     */
    public function getDorAddressCity()
    {
        return $this->container['dor_address_city'];
    }

    /**
     * Sets dor_address_city
     *
     * @param string $dor_address_city Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddressCity($dor_address_city)
    {
        $this->container['dor_address_city'] = $dor_address_city;

        return $this;
    }

    /**
     * Gets dor_address_region
     *
     * @return string
     */
    public function getDorAddressRegion()
    {
        return $this->container['dor_address_region'];
    }

    /**
     * Sets dor_address_region
     *
     * @param string $dor_address_region Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddressRegion($dor_address_region)
    {
        $this->container['dor_address_region'] = $dor_address_region;

        return $this;
    }

    /**
     * Gets dor_address_postal_code
     *
     * @return string
     */
    public function getDorAddressPostalCode()
    {
        return $this->container['dor_address_postal_code'];
    }

    /**
     * Sets dor_address_postal_code
     *
     * @param string $dor_address_postal_code Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddressPostalCode($dor_address_postal_code)
    {
        $this->container['dor_address_postal_code'] = $dor_address_postal_code;

        return $this;
    }

    /**
     * Gets dor_address_country
     *
     * @return string
     */
    public function getDorAddressCountry()
    {
        return $this->container['dor_address_country'];
    }

    /**
     * Sets dor_address_country
     *
     * @param string $dor_address_country Mailing address of the department of revenue
     *
     * @return $this
     */
    public function setDorAddressCountry($dor_address_country)
    {
        $this->container['dor_address_country'] = $dor_address_country;

        return $this;
    }

    /**
     * Gets zero_address_mail_to
     *
     * @return string
     */
    public function getZeroAddressMailTo()
    {
        return $this->container['zero_address_mail_to'];
    }

    /**
     * Sets zero_address_mail_to
     *
     * @param string $zero_address_mail_to Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddressMailTo($zero_address_mail_to)
    {
        $this->container['zero_address_mail_to'] = $zero_address_mail_to;

        return $this;
    }

    /**
     * Gets zero_address1
     *
     * @return string
     */
    public function getZeroAddress1()
    {
        return $this->container['zero_address1'];
    }

    /**
     * Sets zero_address1
     *
     * @param string $zero_address1 Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddress1($zero_address1)
    {
        $this->container['zero_address1'] = $zero_address1;

        return $this;
    }

    /**
     * Gets zero_address2
     *
     * @return string
     */
    public function getZeroAddress2()
    {
        return $this->container['zero_address2'];
    }

    /**
     * Sets zero_address2
     *
     * @param string $zero_address2 Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddress2($zero_address2)
    {
        $this->container['zero_address2'] = $zero_address2;

        return $this;
    }

    /**
     * Gets zero_address_city
     *
     * @return string
     */
    public function getZeroAddressCity()
    {
        return $this->container['zero_address_city'];
    }

    /**
     * Sets zero_address_city
     *
     * @param string $zero_address_city Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddressCity($zero_address_city)
    {
        $this->container['zero_address_city'] = $zero_address_city;

        return $this;
    }

    /**
     * Gets zero_address_region
     *
     * @return string
     */
    public function getZeroAddressRegion()
    {
        return $this->container['zero_address_region'];
    }

    /**
     * Sets zero_address_region
     *
     * @param string $zero_address_region Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddressRegion($zero_address_region)
    {
        $this->container['zero_address_region'] = $zero_address_region;

        return $this;
    }

    /**
     * Gets zero_address_postal_code
     *
     * @return string
     */
    public function getZeroAddressPostalCode()
    {
        return $this->container['zero_address_postal_code'];
    }

    /**
     * Sets zero_address_postal_code
     *
     * @param string $zero_address_postal_code Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddressPostalCode($zero_address_postal_code)
    {
        $this->container['zero_address_postal_code'] = $zero_address_postal_code;

        return $this;
    }

    /**
     * Gets zero_address_country
     *
     * @return string
     */
    public function getZeroAddressCountry()
    {
        return $this->container['zero_address_country'];
    }

    /**
     * Sets zero_address_country
     *
     * @param string $zero_address_country Mailing address to use when a zero dollar form is filed
     *
     * @return $this
     */
    public function setZeroAddressCountry($zero_address_country)
    {
        $this->container['zero_address_country'] = $zero_address_country;

        return $this;
    }

    /**
     * Gets amended_address_mail_to
     *
     * @return string
     */
    public function getAmendedAddressMailTo()
    {
        return $this->container['amended_address_mail_to'];
    }

    /**
     * Sets amended_address_mail_to
     *
     * @param string $amended_address_mail_to Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddressMailTo($amended_address_mail_to)
    {
        $this->container['amended_address_mail_to'] = $amended_address_mail_to;

        return $this;
    }

    /**
     * Gets amended_address1
     *
     * @return string
     */
    public function getAmendedAddress1()
    {
        return $this->container['amended_address1'];
    }

    /**
     * Sets amended_address1
     *
     * @param string $amended_address1 Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddress1($amended_address1)
    {
        $this->container['amended_address1'] = $amended_address1;

        return $this;
    }

    /**
     * Gets amended_address2
     *
     * @return string
     */
    public function getAmendedAddress2()
    {
        return $this->container['amended_address2'];
    }

    /**
     * Sets amended_address2
     *
     * @param string $amended_address2 Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddress2($amended_address2)
    {
        $this->container['amended_address2'] = $amended_address2;

        return $this;
    }

    /**
     * Gets amended_address_city
     *
     * @return string
     */
    public function getAmendedAddressCity()
    {
        return $this->container['amended_address_city'];
    }

    /**
     * Sets amended_address_city
     *
     * @param string $amended_address_city Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddressCity($amended_address_city)
    {
        $this->container['amended_address_city'] = $amended_address_city;

        return $this;
    }

    /**
     * Gets amended_address_region
     *
     * @return string
     */
    public function getAmendedAddressRegion()
    {
        return $this->container['amended_address_region'];
    }

    /**
     * Sets amended_address_region
     *
     * @param string $amended_address_region Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddressRegion($amended_address_region)
    {
        $this->container['amended_address_region'] = $amended_address_region;

        return $this;
    }

    /**
     * Gets amended_address_postal_code
     *
     * @return string
     */
    public function getAmendedAddressPostalCode()
    {
        return $this->container['amended_address_postal_code'];
    }

    /**
     * Sets amended_address_postal_code
     *
     * @param string $amended_address_postal_code Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddressPostalCode($amended_address_postal_code)
    {
        $this->container['amended_address_postal_code'] = $amended_address_postal_code;

        return $this;
    }

    /**
     * Gets amended_address_country
     *
     * @return string
     */
    public function getAmendedAddressCountry()
    {
        return $this->container['amended_address_country'];
    }

    /**
     * Sets amended_address_country
     *
     * @param string $amended_address_country Mailing address to use when filing an amended return
     *
     * @return $this
     */
    public function setAmendedAddressCountry($amended_address_country)
    {
        $this->container['amended_address_country'] = $amended_address_country;

        return $this;
    }

    /**
     * Gets online_back_filing
     *
     * @return bool
     */
    public function getOnlineBackFiling()
    {
        return $this->container['online_back_filing'];
    }

    /**
     * Sets online_back_filing
     *
     * @param bool $online_back_filing Unused
     *
     * @return $this
     */
    public function setOnlineBackFiling($online_back_filing)
    {
        $this->container['online_back_filing'] = $online_back_filing;

        return $this;
    }

    /**
     * Gets online_amended_returns
     *
     * @return bool
     */
    public function getOnlineAmendedReturns()
    {
        return $this->container['online_amended_returns'];
    }

    /**
     * Sets online_amended_returns
     *
     * @param bool $online_amended_returns Unused
     *
     * @return $this
     */
    public function setOnlineAmendedReturns($online_amended_returns)
    {
        $this->container['online_amended_returns'] = $online_amended_returns;

        return $this;
    }

    /**
     * Gets prepayment_frequency
     *
     * @return string
     */
    public function getPrepaymentFrequency()
    {
        return $this->container['prepayment_frequency'];
    }

    /**
     * Sets prepayment_frequency
     *
     * @param string $prepayment_frequency --Need Further Clarification
     *
     * @return $this
     */
    public function setPrepaymentFrequency($prepayment_frequency)
    {
        $this->container['prepayment_frequency'] = $prepayment_frequency;

        return $this;
    }

    /**
     * Gets outlet_location_identifiers_required
     *
     * @return bool
     */
    public function getOutletLocationIdentifiersRequired()
    {
        return $this->container['outlet_location_identifiers_required'];
    }

    /**
     * Sets outlet_location_identifiers_required
     *
     * @param bool $outlet_location_identifiers_required Unused
     *
     * @return $this
     */
    public function setOutletLocationIdentifiersRequired($outlet_location_identifiers_required)
    {
        $this->container['outlet_location_identifiers_required'] = $outlet_location_identifiers_required;

        return $this;
    }

    /**
     * Gets listing_sort_order
     *
     * @return string
     */
    public function getListingSortOrder()
    {
        return $this->container['listing_sort_order'];
    }

    /**
     * Sets listing_sort_order
     *
     * @param string $listing_sort_order --Need Further Clarification
     *
     * @return $this
     */
    public function setListingSortOrder($listing_sort_order)
    {
        $this->container['listing_sort_order'] = $listing_sort_order;

        return $this;
    }

    /**
     * Gets dor_website
     *
     * @return string
     */
    public function getDorWebsite()
    {
        return $this->container['dor_website'];
    }

    /**
     * Sets dor_website
     *
     * @param string $dor_website Link to the state department of revenue website, if available
     *
     * @return $this
     */
    public function setDorWebsite($dor_website)
    {
        $this->container['dor_website'] = $dor_website;

        return $this;
    }

    /**
     * Gets file_for_all_outlets
     *
     * @return bool
     */
    public function getFileForAllOutlets()
    {
        return $this->container['file_for_all_outlets'];
    }

    /**
     * Sets file_for_all_outlets
     *
     * @param bool $file_for_all_outlets --Need Further Clarification
     *
     * @return $this
     */
    public function setFileForAllOutlets($file_for_all_outlets)
    {
        $this->container['file_for_all_outlets'] = $file_for_all_outlets;

        return $this;
    }

    /**
     * Gets paper_forms_do_not_have_discounts
     *
     * @return bool
     */
    public function getPaperFormsDoNotHaveDiscounts()
    {
        return $this->container['paper_forms_do_not_have_discounts'];
    }

    /**
     * Sets paper_forms_do_not_have_discounts
     *
     * @param bool $paper_forms_do_not_have_discounts --Need Further Clarification
     *
     * @return $this
     */
    public function setPaperFormsDoNotHaveDiscounts($paper_forms_do_not_have_discounts)
    {
        $this->container['paper_forms_do_not_have_discounts'] = $paper_forms_do_not_have_discounts;

        return $this;
    }

    /**
     * Gets stack_aggregation
     *
     * @return bool
     */
    public function getStackAggregation()
    {
        return $this->container['stack_aggregation'];
    }

    /**
     * Sets stack_aggregation
     *
     * @param bool $stack_aggregation Internal behavior
     *
     * @return $this
     */
    public function setStackAggregation($stack_aggregation)
    {
        $this->container['stack_aggregation'] = $stack_aggregation;

        return $this;
    }

    /**
     * Gets rounding_precision
     *
     * @return string
     */
    public function getRoundingPrecision()
    {
        return $this->container['rounding_precision'];
    }

    /**
     * Sets rounding_precision
     *
     * @param string $rounding_precision --Need Further Clarification
     *
     * @return $this
     */
    public function setRoundingPrecision($rounding_precision)
    {
        $this->container['rounding_precision'] = $rounding_precision;

        return $this;
    }

    /**
     * Gets inconsistency_tolerance
     *
     * @return string
     */
    public function getInconsistencyTolerance()
    {
        return $this->container['inconsistency_tolerance'];
    }

    /**
     * Sets inconsistency_tolerance
     *
     * @param string $inconsistency_tolerance --Need Further Clarification
     *
     * @return $this
     */
    public function setInconsistencyTolerance($inconsistency_tolerance)
    {
        $this->container['inconsistency_tolerance'] = $inconsistency_tolerance;

        return $this;
    }

    /**
     * Gets eff_date
     *
     * @return \DateTime
     */
    public function getEffDate()
    {
        return $this->container['eff_date'];
    }

    /**
     * Sets eff_date
     *
     * @param \DateTime $eff_date Date when this form became effective
     *
     * @return $this
     */
    public function setEffDate($eff_date)
    {
        $this->container['eff_date'] = $eff_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Date when this form expired
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets visible_to_customers
     *
     * @return bool
     */
    public function getVisibleToCustomers()
    {
        return $this->container['visible_to_customers'];
    }

    /**
     * Sets visible_to_customers
     *
     * @param bool $visible_to_customers True if this form can be shown to customers
     *
     * @return $this
     */
    public function setVisibleToCustomers($visible_to_customers)
    {
        $this->container['visible_to_customers'] = $visible_to_customers;

        return $this;
    }

    /**
     * Gets requires_outlet_setup
     *
     * @return bool
     */
    public function getRequiresOutletSetup()
    {
        return $this->container['requires_outlet_setup'];
    }

    /**
     * Sets requires_outlet_setup
     *
     * @param bool $requires_outlet_setup True if this form requires that you set up outlets in the state
     *
     * @return $this
     */
    public function setRequiresOutletSetup($requires_outlet_setup)
    {
        $this->container['requires_outlet_setup'] = $requires_outlet_setup;

        return $this;
    }

    /**
     * Gets ach_credit_allowed
     *
     * @return bool
     */
    public function getAchCreditAllowed()
    {
        return $this->container['ach_credit_allowed'];
    }

    /**
     * Sets ach_credit_allowed
     *
     * @param bool $ach_credit_allowed True if this state permits payment by ACH Credit
     *
     * @return $this
     */
    public function setAchCreditAllowed($ach_credit_allowed)
    {
        $this->container['ach_credit_allowed'] = $ach_credit_allowed;

        return $this;
    }

    /**
     * Gets report_level
     *
     * @return string
     */
    public function getReportLevel()
    {
        return $this->container['report_level'];
    }

    /**
     * Sets report_level
     *
     * @param string $report_level Jurisdiction level of the state
     *
     * @return $this
     */
    public function setReportLevel($report_level)
    {
        $this->container['report_level'] = $report_level;

        return $this;
    }

    /**
     * Gets post_office_validated
     *
     * @return bool
     */
    public function getPostOfficeValidated()
    {
        return $this->container['post_office_validated'];
    }

    /**
     * Sets post_office_validated
     *
     * @param bool $post_office_validated True if this form is verified filed via email
     *
     * @return $this
     */
    public function setPostOfficeValidated($post_office_validated)
    {
        $this->container['post_office_validated'] = $post_office_validated;

        return $this;
    }

    /**
     * Gets stack_aggregation_option
     *
     * @return string
     */
    public function getStackAggregationOption()
    {
        return $this->container['stack_aggregation_option'];
    }

    /**
     * Sets stack_aggregation_option
     *
     * @param string $stack_aggregation_option Internal Avalara flag
     *
     * @return $this
     */
    public function setStackAggregationOption($stack_aggregation_option)
    {
        $this->container['stack_aggregation_option'] = $stack_aggregation_option;

        return $this;
    }

    /**
     * Gets sst_behavior
     *
     * @return string
     */
    public function getSstBehavior()
    {
        return $this->container['sst_behavior'];
    }

    /**
     * Sets sst_behavior
     *
     * @param string $sst_behavior Internal Avalara flag
     *
     * @return $this
     */
    public function setSstBehavior($sst_behavior)
    {
        $this->container['sst_behavior'] = $sst_behavior;

        return $this;
    }

    /**
     * Gets non_sst_behavior
     *
     * @return string
     */
    public function getNonSstBehavior()
    {
        return $this->container['non_sst_behavior'];
    }

    /**
     * Sets non_sst_behavior
     *
     * @param string $non_sst_behavior Internal Avalara flag
     *
     * @return $this
     */
    public function setNonSstBehavior($non_sst_behavior)
    {
        $this->container['non_sst_behavior'] = $non_sst_behavior;

        return $this;
    }

    /**
     * Gets dor_phone_number
     *
     * @return string
     */
    public function getDorPhoneNumber()
    {
        return $this->container['dor_phone_number'];
    }

    /**
     * Sets dor_phone_number
     *
     * @param string $dor_phone_number Phone number of the department of revenue
     *
     * @return $this
     */
    public function setDorPhoneNumber($dor_phone_number)
    {
        $this->container['dor_phone_number'] = $dor_phone_number;

        return $this;
    }

    /**
     * Gets average_check_clear_days
     *
     * @return string
     */
    public function getAverageCheckClearDays()
    {
        return $this->container['average_check_clear_days'];
    }

    /**
     * Sets average_check_clear_days
     *
     * @param string $average_check_clear_days Unused
     *
     * @return $this
     */
    public function setAverageCheckClearDays($average_check_clear_days)
    {
        $this->container['average_check_clear_days'] = $average_check_clear_days;

        return $this;
    }

    /**
     * Gets filter_zero_rated_line_details
     *
     * @return bool
     */
    public function getFilterZeroRatedLineDetails()
    {
        return $this->container['filter_zero_rated_line_details'];
    }

    /**
     * Sets filter_zero_rated_line_details
     *
     * @param bool $filter_zero_rated_line_details Unused
     *
     * @return $this
     */
    public function setFilterZeroRatedLineDetails($filter_zero_rated_line_details)
    {
        $this->container['filter_zero_rated_line_details'] = $filter_zero_rated_line_details;

        return $this;
    }

    /**
     * Gets allows_bulk_filing_accounts
     *
     * @return bool
     */
    public function getAllowsBulkFilingAccounts()
    {
        return $this->container['allows_bulk_filing_accounts'];
    }

    /**
     * Sets allows_bulk_filing_accounts
     *
     * @param bool $allows_bulk_filing_accounts Unused
     *
     * @return $this
     */
    public function setAllowsBulkFilingAccounts($allows_bulk_filing_accounts)
    {
        $this->container['allows_bulk_filing_accounts'] = $allows_bulk_filing_accounts;

        return $this;
    }

    /**
     * Gets bulk_account_instruction_link
     *
     * @return string
     */
    public function getBulkAccountInstructionLink()
    {
        return $this->container['bulk_account_instruction_link'];
    }

    /**
     * Sets bulk_account_instruction_link
     *
     * @param string $bulk_account_instruction_link Unused
     *
     * @return $this
     */
    public function setBulkAccountInstructionLink($bulk_account_instruction_link)
    {
        $this->container['bulk_account_instruction_link'] = $bulk_account_instruction_link;

        return $this;
    }

    /**
     * Gets registration_id_format
     *
     * @return string
     */
    public function getRegistrationIdFormat()
    {
        return $this->container['registration_id_format'];
    }

    /**
     * Sets registration_id_format
     *
     * @param string $registration_id_format Unused
     *
     * @return $this
     */
    public function setRegistrationIdFormat($registration_id_format)
    {
        $this->container['registration_id_format'] = $registration_id_format;

        return $this;
    }

    /**
     * Gets threshold_trigger
     *
     * @return string
     */
    public function getThresholdTrigger()
    {
        return $this->container['threshold_trigger'];
    }

    /**
     * Sets threshold_trigger
     *
     * @param string $threshold_trigger Unused
     *
     * @return $this
     */
    public function setThresholdTrigger($threshold_trigger)
    {
        $this->container['threshold_trigger'] = $threshold_trigger;

        return $this;
    }

    /**
     * Gets transaction_sorting_option
     *
     * @return string
     */
    public function getTransactionSortingOption()
    {
        return $this->container['transaction_sorting_option'];
    }

    /**
     * Sets transaction_sorting_option
     *
     * @param string $transaction_sorting_option Unused
     *
     * @return $this
     */
    public function setTransactionSortingOption($transaction_sorting_option)
    {
        $this->container['transaction_sorting_option'] = $transaction_sorting_option;

        return $this;
    }

    /**
     * Gets content_review_frequency_id
     *
     * @return int
     */
    public function getContentReviewFrequencyId()
    {
        return $this->container['content_review_frequency_id'];
    }

    /**
     * Sets content_review_frequency_id
     *
     * @param int $content_review_frequency_id Unused
     *
     * @return $this
     */
    public function setContentReviewFrequencyId($content_review_frequency_id)
    {
        $this->container['content_review_frequency_id'] = $content_review_frequency_id;

        return $this;
    }

    /**
     * Gets alias_for_form_master_id
     *
     * @return string
     */
    public function getAliasForFormMasterId()
    {
        return $this->container['alias_for_form_master_id'];
    }

    /**
     * Sets alias_for_form_master_id
     *
     * @param string $alias_for_form_master_id Unused
     *
     * @return $this
     */
    public function setAliasForFormMasterId($alias_for_form_master_id)
    {
        $this->container['alias_for_form_master_id'] = $alias_for_form_master_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


