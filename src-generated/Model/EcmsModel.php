<?php
/**
 * EcmsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * EcmsModel Class Doc Comment
 *
 * @category Class
 * @description Exempt certificate
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcmsModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EcmsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exempt_cert_id' => 'int',
        'company_id' => 'int',
        'customer_code' => 'string',
        'customer_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'city' => 'string',
        'region' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'exempt_cert_type_id' => 'string',
        'document_ref_no' => 'string',
        'business_type_id' => 'int',
        'business_type_other_description' => 'string',
        'exempt_reason_id' => 'string',
        'exempt_reason_other_description' => 'string',
        'effective_date' => '\DateTime',
        'regions_applicable' => 'string',
        'exempt_cert_status_id' => 'string',
        'created_date' => '\DateTime',
        'last_transaction_date' => '\DateTime',
        'expiry_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'country_issued' => 'string',
        'ava_cert_id' => 'string',
        'exempt_cert_review_status_id' => 'string',
        'details' => '\Together\Taxes\Model\EcmsDetailModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exempt_cert_id' => 'int32',
        'company_id' => 'int32',
        'customer_code' => null,
        'customer_name' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'city' => null,
        'region' => null,
        'postal_code' => null,
        'country' => null,
        'exempt_cert_type_id' => null,
        'document_ref_no' => null,
        'business_type_id' => 'int32',
        'business_type_other_description' => null,
        'exempt_reason_id' => null,
        'exempt_reason_other_description' => null,
        'effective_date' => 'date-time',
        'regions_applicable' => null,
        'exempt_cert_status_id' => null,
        'created_date' => 'date-time',
        'last_transaction_date' => 'date-time',
        'expiry_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'country_issued' => null,
        'ava_cert_id' => null,
        'exempt_cert_review_status_id' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exempt_cert_id' => 'exemptCertId',
        'company_id' => 'companyId',
        'customer_code' => 'customerCode',
        'customer_name' => 'customerName',
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'city' => 'city',
        'region' => 'region',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'exempt_cert_type_id' => 'exemptCertTypeId',
        'document_ref_no' => 'documentRefNo',
        'business_type_id' => 'businessTypeId',
        'business_type_other_description' => 'businessTypeOtherDescription',
        'exempt_reason_id' => 'exemptReasonId',
        'exempt_reason_other_description' => 'exemptReasonOtherDescription',
        'effective_date' => 'effectiveDate',
        'regions_applicable' => 'regionsApplicable',
        'exempt_cert_status_id' => 'exemptCertStatusId',
        'created_date' => 'createdDate',
        'last_transaction_date' => 'lastTransactionDate',
        'expiry_date' => 'expiryDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'country_issued' => 'countryIssued',
        'ava_cert_id' => 'avaCertId',
        'exempt_cert_review_status_id' => 'exemptCertReviewStatusId',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exempt_cert_id' => 'setExemptCertId',
        'company_id' => 'setCompanyId',
        'customer_code' => 'setCustomerCode',
        'customer_name' => 'setCustomerName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'city' => 'setCity',
        'region' => 'setRegion',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'exempt_cert_type_id' => 'setExemptCertTypeId',
        'document_ref_no' => 'setDocumentRefNo',
        'business_type_id' => 'setBusinessTypeId',
        'business_type_other_description' => 'setBusinessTypeOtherDescription',
        'exempt_reason_id' => 'setExemptReasonId',
        'exempt_reason_other_description' => 'setExemptReasonOtherDescription',
        'effective_date' => 'setEffectiveDate',
        'regions_applicable' => 'setRegionsApplicable',
        'exempt_cert_status_id' => 'setExemptCertStatusId',
        'created_date' => 'setCreatedDate',
        'last_transaction_date' => 'setLastTransactionDate',
        'expiry_date' => 'setExpiryDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'country_issued' => 'setCountryIssued',
        'ava_cert_id' => 'setAvaCertId',
        'exempt_cert_review_status_id' => 'setExemptCertReviewStatusId',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exempt_cert_id' => 'getExemptCertId',
        'company_id' => 'getCompanyId',
        'customer_code' => 'getCustomerCode',
        'customer_name' => 'getCustomerName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'city' => 'getCity',
        'region' => 'getRegion',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'exempt_cert_type_id' => 'getExemptCertTypeId',
        'document_ref_no' => 'getDocumentRefNo',
        'business_type_id' => 'getBusinessTypeId',
        'business_type_other_description' => 'getBusinessTypeOtherDescription',
        'exempt_reason_id' => 'getExemptReasonId',
        'exempt_reason_other_description' => 'getExemptReasonOtherDescription',
        'effective_date' => 'getEffectiveDate',
        'regions_applicable' => 'getRegionsApplicable',
        'exempt_cert_status_id' => 'getExemptCertStatusId',
        'created_date' => 'getCreatedDate',
        'last_transaction_date' => 'getLastTransactionDate',
        'expiry_date' => 'getExpiryDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'country_issued' => 'getCountryIssued',
        'ava_cert_id' => 'getAvaCertId',
        'exempt_cert_review_status_id' => 'getExemptCertReviewStatusId',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXEMPT_CERT_TYPE_ID_BLANKET = 'Blanket';
    const EXEMPT_CERT_TYPE_ID_SINGLE_USE = 'SingleUse';
    const EXEMPT_CERT_STATUS_ID_INACTIVE = 'Inactive';
    const EXEMPT_CERT_STATUS_ID_ACTIVE = 'Active';
    const EXEMPT_CERT_STATUS_ID_EXPIRED = 'Expired';
    const EXEMPT_CERT_STATUS_ID_REVOKED = 'Revoked';
    const EXEMPT_CERT_REVIEW_STATUS_ID_PENDING = 'Pending';
    const EXEMPT_CERT_REVIEW_STATUS_ID_ACCEPTED = 'Accepted';
    const EXEMPT_CERT_REVIEW_STATUS_ID_REJECTED = 'Rejected';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptCertTypeIdAllowableValues()
    {
        return [
            self::EXEMPT_CERT_TYPE_ID_BLANKET,
            self::EXEMPT_CERT_TYPE_ID_SINGLE_USE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptCertStatusIdAllowableValues()
    {
        return [
            self::EXEMPT_CERT_STATUS_ID_INACTIVE,
            self::EXEMPT_CERT_STATUS_ID_ACTIVE,
            self::EXEMPT_CERT_STATUS_ID_EXPIRED,
            self::EXEMPT_CERT_STATUS_ID_REVOKED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExemptCertReviewStatusIdAllowableValues()
    {
        return [
            self::EXEMPT_CERT_REVIEW_STATUS_ID_PENDING,
            self::EXEMPT_CERT_REVIEW_STATUS_ID_ACCEPTED,
            self::EXEMPT_CERT_REVIEW_STATUS_ID_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exempt_cert_id'] = isset($data['exempt_cert_id']) ? $data['exempt_cert_id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['exempt_cert_type_id'] = isset($data['exempt_cert_type_id']) ? $data['exempt_cert_type_id'] : null;
        $this->container['document_ref_no'] = isset($data['document_ref_no']) ? $data['document_ref_no'] : null;
        $this->container['business_type_id'] = isset($data['business_type_id']) ? $data['business_type_id'] : null;
        $this->container['business_type_other_description'] = isset($data['business_type_other_description']) ? $data['business_type_other_description'] : null;
        $this->container['exempt_reason_id'] = isset($data['exempt_reason_id']) ? $data['exempt_reason_id'] : null;
        $this->container['exempt_reason_other_description'] = isset($data['exempt_reason_other_description']) ? $data['exempt_reason_other_description'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['regions_applicable'] = isset($data['regions_applicable']) ? $data['regions_applicable'] : null;
        $this->container['exempt_cert_status_id'] = isset($data['exempt_cert_status_id']) ? $data['exempt_cert_status_id'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['last_transaction_date'] = isset($data['last_transaction_date']) ? $data['last_transaction_date'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['country_issued'] = isset($data['country_issued']) ? $data['country_issued'] : null;
        $this->container['ava_cert_id'] = isset($data['ava_cert_id']) ? $data['ava_cert_id'] : null;
        $this->container['exempt_cert_review_status_id'] = isset($data['exempt_cert_review_status_id']) ? $data['exempt_cert_review_status_id'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['exempt_cert_id'] === null) {
            $invalidProperties[] = "'exempt_cert_id' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['customer_code'] === null) {
            $invalidProperties[] = "'customer_code' can't be null";
        }
        if ((mb_strlen($this->container['customer_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'customer_code', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['customer_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_name']) && (mb_strlen($this->container['customer_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'customer_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['customer_name']) && (mb_strlen($this->container['customer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address3']) && (mb_strlen($this->container['address3']) > 50)) {
            $invalidProperties[] = "invalid value for 'address3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address3']) && (mb_strlen($this->container['address3']) < 0)) {
            $invalidProperties[] = "invalid value for 'address3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['exempt_cert_type_id'] === null) {
            $invalidProperties[] = "'exempt_cert_type_id' can't be null";
        }
        $allowedValues = $this->getExemptCertTypeIdAllowableValues();
        if (!is_null($this->container['exempt_cert_type_id']) && !in_array($this->container['exempt_cert_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'exempt_cert_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['document_ref_no']) && (mb_strlen($this->container['document_ref_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'document_ref_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['document_ref_no']) && (mb_strlen($this->container['document_ref_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_ref_no', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['business_type_id'] === null) {
            $invalidProperties[] = "'business_type_id' can't be null";
        }
        if (!is_null($this->container['business_type_other_description']) && (mb_strlen($this->container['business_type_other_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'business_type_other_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['business_type_other_description']) && (mb_strlen($this->container['business_type_other_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_type_other_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['exempt_reason_id']) && (mb_strlen($this->container['exempt_reason_id']) > 1)) {
            $invalidProperties[] = "invalid value for 'exempt_reason_id', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['exempt_reason_id']) && (mb_strlen($this->container['exempt_reason_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'exempt_reason_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['exempt_reason_other_description']) && (mb_strlen($this->container['exempt_reason_other_description']) > 255)) {
            $invalidProperties[] = "invalid value for 'exempt_reason_other_description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['exempt_reason_other_description']) && (mb_strlen($this->container['exempt_reason_other_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'exempt_reason_other_description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['regions_applicable'] === null) {
            $invalidProperties[] = "'regions_applicable' can't be null";
        }
        if ((mb_strlen($this->container['regions_applicable']) > 200)) {
            $invalidProperties[] = "invalid value for 'regions_applicable', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['regions_applicable']) < 0)) {
            $invalidProperties[] = "invalid value for 'regions_applicable', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['exempt_cert_status_id'] === null) {
            $invalidProperties[] = "'exempt_cert_status_id' can't be null";
        }
        $allowedValues = $this->getExemptCertStatusIdAllowableValues();
        if (!is_null($this->container['exempt_cert_status_id']) && !in_array($this->container['exempt_cert_status_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'exempt_cert_status_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['country_issued'] === null) {
            $invalidProperties[] = "'country_issued' can't be null";
        }
        if (!is_null($this->container['ava_cert_id']) && (mb_strlen($this->container['ava_cert_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'ava_cert_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['ava_cert_id']) && (mb_strlen($this->container['ava_cert_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'ava_cert_id', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getExemptCertReviewStatusIdAllowableValues();
        if (!is_null($this->container['exempt_cert_review_status_id']) && !in_array($this->container['exempt_cert_review_status_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'exempt_cert_review_status_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exempt_cert_id
     *
     * @return int
     */
    public function getExemptCertId()
    {
        return $this->container['exempt_cert_id'];
    }

    /**
     * Sets exempt_cert_id
     *
     * @param int $exempt_cert_id The calc_id associated with a certificate in CertCapture.
     *
     * @return $this
     */
    public function setExemptCertId($exempt_cert_id)
    {
        $this->container['exempt_cert_id'] = $exempt_cert_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id Company ID
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code Customer code
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        if ((mb_strlen($customer_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_code when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($customer_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_code when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Customer name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        if (!is_null($customer_name) && (mb_strlen($customer_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $customer_name when calling EcmsModel., must be smaller than or equal to 100.');
        }
        if (!is_null($customer_name) && (mb_strlen($customer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_name when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 Address line 1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if (!is_null($address1) && (mb_strlen($address1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 Address line 2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if (!is_null($address2) && (mb_strlen($address2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string $address3 Address line 3
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        if (!is_null($address3) && (mb_strlen($address3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address3 when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if (!is_null($address3) && (mb_strlen($address3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address3 when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if (!is_null($city) && (mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal code / zip code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling EcmsModel., must be smaller than or equal to 10.');
        }
        if (!is_null($postal_code) && (mb_strlen($postal_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets exempt_cert_type_id
     *
     * @return string
     */
    public function getExemptCertTypeId()
    {
        return $this->container['exempt_cert_type_id'];
    }

    /**
     * Sets exempt_cert_type_id
     *
     * @param string $exempt_cert_type_id The type of exemption certificate. Permitted values are: Blanket and Single.
     *
     * @return $this
     */
    public function setExemptCertTypeId($exempt_cert_type_id)
    {
        $allowedValues = $this->getExemptCertTypeIdAllowableValues();
        if (!in_array($exempt_cert_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exempt_cert_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exempt_cert_type_id'] = $exempt_cert_type_id;

        return $this;
    }

    /**
     * Gets document_ref_no
     *
     * @return string
     */
    public function getDocumentRefNo()
    {
        return $this->container['document_ref_no'];
    }

    /**
     * Sets document_ref_no
     *
     * @param string $document_ref_no Document Reference Number, in the case of single-use exemption certificates, the DocumentCode or PurchaseOrderNo to which the certificate should apply.
     *
     * @return $this
     */
    public function setDocumentRefNo($document_ref_no)
    {
        if (!is_null($document_ref_no) && (mb_strlen($document_ref_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $document_ref_no when calling EcmsModel., must be smaller than or equal to 50.');
        }
        if (!is_null($document_ref_no) && (mb_strlen($document_ref_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_ref_no when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['document_ref_no'] = $document_ref_no;

        return $this;
    }

    /**
     * Gets business_type_id
     *
     * @return int
     */
    public function getBusinessTypeId()
    {
        return $this->container['business_type_id'];
    }

    /**
     * Sets business_type_id
     *
     * @param int $business_type_id Business type the customer belongs to.
     *
     * @return $this
     */
    public function setBusinessTypeId($business_type_id)
    {
        $this->container['business_type_id'] = $business_type_id;

        return $this;
    }

    /**
     * Gets business_type_other_description
     *
     * @return string
     */
    public function getBusinessTypeOtherDescription()
    {
        return $this->container['business_type_other_description'];
    }

    /**
     * Sets business_type_other_description
     *
     * @param string $business_type_other_description Other description for this business type
     *
     * @return $this
     */
    public function setBusinessTypeOtherDescription($business_type_other_description)
    {
        if (!is_null($business_type_other_description) && (mb_strlen($business_type_other_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $business_type_other_description when calling EcmsModel., must be smaller than or equal to 255.');
        }
        if (!is_null($business_type_other_description) && (mb_strlen($business_type_other_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_type_other_description when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['business_type_other_description'] = $business_type_other_description;

        return $this;
    }

    /**
     * Gets exempt_reason_id
     *
     * @return string
     */
    public function getExemptReasonId()
    {
        return $this->container['exempt_reason_id'];
    }

    /**
     * Sets exempt_reason_id
     *
     * @param string $exempt_reason_id Exempt reason associated with the certificate, coded by CustomerUsageType.  Example: A - Federal Government.
     *
     * @return $this
     */
    public function setExemptReasonId($exempt_reason_id)
    {
        if (!is_null($exempt_reason_id) && (mb_strlen($exempt_reason_id) > 1)) {
            throw new \InvalidArgumentException('invalid length for $exempt_reason_id when calling EcmsModel., must be smaller than or equal to 1.');
        }
        if (!is_null($exempt_reason_id) && (mb_strlen($exempt_reason_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $exempt_reason_id when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['exempt_reason_id'] = $exempt_reason_id;

        return $this;
    }

    /**
     * Gets exempt_reason_other_description
     *
     * @return string
     */
    public function getExemptReasonOtherDescription()
    {
        return $this->container['exempt_reason_other_description'];
    }

    /**
     * Sets exempt_reason_other_description
     *
     * @param string $exempt_reason_other_description Other description for exempt reason i.e. Populated on if exemptReasonId is 'L' - Other.
     *
     * @return $this
     */
    public function setExemptReasonOtherDescription($exempt_reason_other_description)
    {
        if (!is_null($exempt_reason_other_description) && (mb_strlen($exempt_reason_other_description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $exempt_reason_other_description when calling EcmsModel., must be smaller than or equal to 255.');
        }
        if (!is_null($exempt_reason_other_description) && (mb_strlen($exempt_reason_other_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $exempt_reason_other_description when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['exempt_reason_other_description'] = $exempt_reason_other_description;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date Effective date for this exempt certificate
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets regions_applicable
     *
     * @return string
     */
    public function getRegionsApplicable()
    {
        return $this->container['regions_applicable'];
    }

    /**
     * Sets regions_applicable
     *
     * @param string $regions_applicable A list of applicable regions for this exempt certificate.                To list more than one applicable region, separate the list of region codes with commas.
     *
     * @return $this
     */
    public function setRegionsApplicable($regions_applicable)
    {
        if ((mb_strlen($regions_applicable) > 200)) {
            throw new \InvalidArgumentException('invalid length for $regions_applicable when calling EcmsModel., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($regions_applicable) < 0)) {
            throw new \InvalidArgumentException('invalid length for $regions_applicable when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['regions_applicable'] = $regions_applicable;

        return $this;
    }

    /**
     * Gets exempt_cert_status_id
     *
     * @return string
     */
    public function getExemptCertStatusId()
    {
        return $this->container['exempt_cert_status_id'];
    }

    /**
     * Sets exempt_cert_status_id
     *
     * @param string $exempt_cert_status_id Status for this exempt certificate
     *
     * @return $this
     */
    public function setExemptCertStatusId($exempt_cert_status_id)
    {
        $allowedValues = $this->getExemptCertStatusIdAllowableValues();
        if (!in_array($exempt_cert_status_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exempt_cert_status_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exempt_cert_status_id'] = $exempt_cert_status_id;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Date when this exempt certificate was created
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets last_transaction_date
     *
     * @return \DateTime
     */
    public function getLastTransactionDate()
    {
        return $this->container['last_transaction_date'];
    }

    /**
     * Sets last_transaction_date
     *
     * @param \DateTime $last_transaction_date Date when last transaction with this exempt certificate happened
     *
     * @return $this
     */
    public function setLastTransactionDate($last_transaction_date)
    {
        $this->container['last_transaction_date'] = $last_transaction_date;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date When this exempt certificate will expire
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id User that creates the certificate
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Date when this exempt certificate was modified
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id Who modified this exempt certificate
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets country_issued
     *
     * @return string
     */
    public function getCountryIssued()
    {
        return $this->container['country_issued'];
    }

    /**
     * Sets country_issued
     *
     * @param string $country_issued Name or ISO 3166 code identifying the country that issued this ECMS certificate.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountryIssued($country_issued)
    {
        $this->container['country_issued'] = $country_issued;

        return $this;
    }

    /**
     * Gets ava_cert_id
     *
     * @return string
     */
    public function getAvaCertId()
    {
        return $this->container['ava_cert_id'];
    }

    /**
     * Sets ava_cert_id
     *
     * @param string $ava_cert_id If the certificate record was synced from an AvaTax Certs account(as opposed to being entered in ECMS directly),  the unique AvaTax Certs identifier for the certificate record. Usually same as the Id of a Certificate.
     *
     * @return $this
     */
    public function setAvaCertId($ava_cert_id)
    {
        if (!is_null($ava_cert_id) && (mb_strlen($ava_cert_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $ava_cert_id when calling EcmsModel., must be smaller than or equal to 10.');
        }
        if (!is_null($ava_cert_id) && (mb_strlen($ava_cert_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ava_cert_id when calling EcmsModel., must be bigger than or equal to 0.');
        }

        $this->container['ava_cert_id'] = $ava_cert_id;

        return $this;
    }

    /**
     * Gets exempt_cert_review_status_id
     *
     * @return string
     */
    public function getExemptCertReviewStatusId()
    {
        return $this->container['exempt_cert_review_status_id'];
    }

    /**
     * Sets exempt_cert_review_status_id
     *
     * @param string $exempt_cert_review_status_id Review status for this exempt certificate
     *
     * @return $this
     */
    public function setExemptCertReviewStatusId($exempt_cert_review_status_id)
    {
        $allowedValues = $this->getExemptCertReviewStatusIdAllowableValues();
        if (!is_null($exempt_cert_review_status_id) && !in_array($exempt_cert_review_status_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'exempt_cert_review_status_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exempt_cert_review_status_id'] = $exempt_cert_review_status_id;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Together\Taxes\Model\EcmsDetailModel[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Together\Taxes\Model\EcmsDetailModel[] $details Exempt Cert details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


