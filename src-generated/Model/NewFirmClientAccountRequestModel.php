<?php
/**
 * NewFirmClientAccountRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NewFirmClientAccountRequestModel Class Doc Comment
 *
 * @category Class
 * @description Represents a request for a new account with Avalara for a new Firm client.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewFirmClientAccountRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewFirmClientAccountRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => 'string',
        'phone_number' => 'string',
        'email' => 'string',
        'company_code' => 'string',
        'company_address' => '\Swagger\Client\Model\CompanyAddress',
        'tax_payer_id_number' => 'string',
        'properties' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_name' => null,
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'phone_number' => null,
        'email' => null,
        'company_code' => null,
        'company_address' => null,
        'tax_payer_id_number' => null,
        'properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_name' => 'accountName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'title' => 'title',
        'phone_number' => 'phoneNumber',
        'email' => 'email',
        'company_code' => 'companyCode',
        'company_address' => 'companyAddress',
        'tax_payer_id_number' => 'taxPayerIdNumber',
        'properties' => 'properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_name' => 'setAccountName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'company_code' => 'setCompanyCode',
        'company_address' => 'setCompanyAddress',
        'tax_payer_id_number' => 'setTaxPayerIdNumber',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_name' => 'getAccountName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'company_code' => 'getCompanyCode',
        'company_address' => 'getCompanyAddress',
        'tax_payer_id_number' => 'getTaxPayerIdNumber',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['tax_payer_id_number'] = isset($data['tax_payer_id_number']) ? $data['tax_payer_id_number'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ((mb_strlen($this->container['account_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['account_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['company_address'] === null) {
            $invalidProperties[] = "'company_address' can't be null";
        }
        if (!is_null($this->container['tax_payer_id_number']) && (mb_strlen($this->container['tax_payer_id_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'tax_payer_id_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['tax_payer_id_number']) && (mb_strlen($this->container['tax_payer_id_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_payer_id_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name The name of the account to create
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        if ((mb_strlen($account_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($account_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the primary contact person for this account
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the primary contact person for this account
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the primary contact person for this account
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the primary contact person for this account
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of the primary contact person for this account
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code Company code to be assigned to the company created for this account.                If no company code is provided, this will be defaulted to \"DEFAULT\" company code.
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if (!is_null($company_code) && (mb_strlen($company_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($company_code) && (mb_strlen($company_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return \Swagger\Client\Model\CompanyAddress
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param \Swagger\Client\Model\CompanyAddress $company_address Address information of the account being created.
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets tax_payer_id_number
     *
     * @return string
     */
    public function getTaxPayerIdNumber()
    {
        return $this->container['tax_payer_id_number'];
    }

    /**
     * Sets tax_payer_id_number
     *
     * @param string $tax_payer_id_number United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your  Social Security Number if you are an individual.  This value is required if the address provided is inside the US. Otherwise it is optional.
     *
     * @return $this
     */
    public function setTaxPayerIdNumber($tax_payer_id_number)
    {
        if (!is_null($tax_payer_id_number) && (mb_strlen($tax_payer_id_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $tax_payer_id_number when calling NewFirmClientAccountRequestModel., must be smaller than or equal to 11.');
        }
        if (!is_null($tax_payer_id_number) && (mb_strlen($tax_payer_id_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_payer_id_number when calling NewFirmClientAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_payer_id_number'] = $tax_payer_id_number;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string[] $properties Properties of the primary contact person for this account
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


