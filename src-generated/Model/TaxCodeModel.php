<?php
/**
 * TaxCodeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * TaxCodeModel Class Doc Comment
 *
 * @category Class
 * @description Represents a tax code that can be applied to items on a transaction.  A tax code can have specific rules for specific jurisdictions that change the tax calculation behavior.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxCodeModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxCodeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'tax_code' => 'string',
        'tax_code_type_id' => 'string',
        'description' => 'string',
        'parent_tax_code' => 'string',
        'is_physical' => 'bool',
        'goods_service_code' => 'int',
        'entity_use_code' => 'string',
        'is_active' => 'bool',
        'is_sst_certified' => 'bool',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'tax_code' => null,
        'tax_code_type_id' => null,
        'description' => null,
        'parent_tax_code' => null,
        'is_physical' => null,
        'goods_service_code' => 'int64',
        'entity_use_code' => null,
        'is_active' => null,
        'is_sst_certified' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'tax_code' => 'taxCode',
        'tax_code_type_id' => 'taxCodeTypeId',
        'description' => 'description',
        'parent_tax_code' => 'parentTaxCode',
        'is_physical' => 'isPhysical',
        'goods_service_code' => 'goodsServiceCode',
        'entity_use_code' => 'entityUseCode',
        'is_active' => 'isActive',
        'is_sst_certified' => 'isSSTCertified',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'tax_code' => 'setTaxCode',
        'tax_code_type_id' => 'setTaxCodeTypeId',
        'description' => 'setDescription',
        'parent_tax_code' => 'setParentTaxCode',
        'is_physical' => 'setIsPhysical',
        'goods_service_code' => 'setGoodsServiceCode',
        'entity_use_code' => 'setEntityUseCode',
        'is_active' => 'setIsActive',
        'is_sst_certified' => 'setIsSstCertified',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'tax_code' => 'getTaxCode',
        'tax_code_type_id' => 'getTaxCodeTypeId',
        'description' => 'getDescription',
        'parent_tax_code' => 'getParentTaxCode',
        'is_physical' => 'getIsPhysical',
        'goods_service_code' => 'getGoodsServiceCode',
        'entity_use_code' => 'getEntityUseCode',
        'is_active' => 'getIsActive',
        'is_sst_certified' => 'getIsSstCertified',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['tax_code_type_id'] = isset($data['tax_code_type_id']) ? $data['tax_code_type_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['parent_tax_code'] = isset($data['parent_tax_code']) ? $data['parent_tax_code'] : null;
        $this->container['is_physical'] = isset($data['is_physical']) ? $data['is_physical'] : null;
        $this->container['goods_service_code'] = isset($data['goods_service_code']) ? $data['goods_service_code'] : null;
        $this->container['entity_use_code'] = isset($data['entity_use_code']) ? $data['entity_use_code'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_sst_certified'] = isset($data['is_sst_certified']) ? $data['is_sst_certified'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tax_code'] === null) {
            $invalidProperties[] = "'tax_code' can't be null";
        }
        if ((mb_strlen($this->container['tax_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 25.";
        }

        if ((mb_strlen($this->container['tax_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['tax_code_type_id'] === null) {
            $invalidProperties[] = "'tax_code_type_id' can't be null";
        }
        if ((mb_strlen($this->container['tax_code_type_id']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code_type_id', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['tax_code_type_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_code_type_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['parent_tax_code']) && (mb_strlen($this->container['parent_tax_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'parent_tax_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['parent_tax_code']) && (mb_strlen($this->container['parent_tax_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'parent_tax_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) > 40)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['entity_use_code']) && (mb_strlen($this->container['entity_use_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'entity_use_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this tax code.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company that owns this tax code.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code A code string that identifies this tax code.
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        if ((mb_strlen($tax_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling TaxCodeModel., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($tax_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling TaxCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_code_type_id
     *
     * @return string
     */
    public function getTaxCodeTypeId()
    {
        return $this->container['tax_code_type_id'];
    }

    /**
     * Sets tax_code_type_id
     *
     * @param string $tax_code_type_id The type of this tax code.
     *
     * @return $this
     */
    public function setTaxCodeTypeId($tax_code_type_id)
    {
        if ((mb_strlen($tax_code_type_id) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code_type_id when calling TaxCodeModel., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($tax_code_type_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_code_type_id when calling TaxCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_code_type_id'] = $tax_code_type_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A friendly description of this tax code.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxCodeModel., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets parent_tax_code
     *
     * @return string
     */
    public function getParentTaxCode()
    {
        return $this->container['parent_tax_code'];
    }

    /**
     * Sets parent_tax_code
     *
     * @param string $parent_tax_code If this tax code is a subset of a different tax code, this identifies the parent code.
     *
     * @return $this
     */
    public function setParentTaxCode($parent_tax_code)
    {
        if (!is_null($parent_tax_code) && (mb_strlen($parent_tax_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $parent_tax_code when calling TaxCodeModel., must be smaller than or equal to 25.');
        }
        if (!is_null($parent_tax_code) && (mb_strlen($parent_tax_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $parent_tax_code when calling TaxCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['parent_tax_code'] = $parent_tax_code;

        return $this;
    }

    /**
     * Gets is_physical
     *
     * @return bool
     */
    public function getIsPhysical()
    {
        return $this->container['is_physical'];
    }

    /**
     * Sets is_physical
     *
     * @param bool $is_physical True if this tax code type refers to a physical object.  Read only field.
     *
     * @return $this
     */
    public function setIsPhysical($is_physical)
    {
        $this->container['is_physical'] = $is_physical;

        return $this;
    }

    /**
     * Gets goods_service_code
     *
     * @return int
     */
    public function getGoodsServiceCode()
    {
        return $this->container['goods_service_code'];
    }

    /**
     * Sets goods_service_code
     *
     * @param int $goods_service_code The Avalara Goods and Service Code represented by this tax code.
     *
     * @return $this
     */
    public function setGoodsServiceCode($goods_service_code)
    {
        $this->container['goods_service_code'] = $goods_service_code;

        return $this;
    }

    /**
     * Gets entity_use_code
     *
     * @return string
     */
    public function getEntityUseCode()
    {
        return $this->container['entity_use_code'];
    }

    /**
     * Sets entity_use_code
     *
     * @param string $entity_use_code The Avalara Entity Use Code represented by this tax code.
     *
     * @return $this
     */
    public function setEntityUseCode($entity_use_code)
    {
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) > 40)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling TaxCodeModel., must be smaller than or equal to 40.');
        }
        if (!is_null($entity_use_code) && (mb_strlen($entity_use_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $entity_use_code when calling TaxCodeModel., must be bigger than or equal to 0.');
        }

        $this->container['entity_use_code'] = $entity_use_code;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active True if this tax code is active and can be used in transactions.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_sst_certified
     *
     * @return bool
     */
    public function getIsSstCertified()
    {
        return $this->container['is_sst_certified'];
    }

    /**
     * Sets is_sst_certified
     *
     * @param bool $is_sst_certified True if this tax code has been certified by the Streamlined Sales Tax governing board.  By default, you should leave this value empty.
     *
     * @return $this
     */
    public function setIsSstCertified($is_sst_certified)
    {
        $this->container['is_sst_certified'] = $is_sst_certified;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


