<?php
/**
 * CycleEditOptionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CycleEditOptionModel Class Doc Comment
 *
 * @category Class
 * @description Model with options for actual filing calendar output based on user edits to filing calendar.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CycleEditOptionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CycleEditOptionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success' => 'bool',
        'message' => 'string',
        'customer_must_approve' => 'bool',
        'must_clone_filing_calendar' => 'bool',
        'cloned_calendar_eff_date' => '\DateTime',
        'expired_calendar_end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success' => null,
        'message' => null,
        'customer_must_approve' => null,
        'must_clone_filing_calendar' => null,
        'cloned_calendar_eff_date' => 'date',
        'expired_calendar_end_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'message' => 'message',
        'customer_must_approve' => 'customerMustApprove',
        'must_clone_filing_calendar' => 'mustCloneFilingCalendar',
        'cloned_calendar_eff_date' => 'clonedCalendarEffDate',
        'expired_calendar_end_date' => 'expiredCalendarEndDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'message' => 'setMessage',
        'customer_must_approve' => 'setCustomerMustApprove',
        'must_clone_filing_calendar' => 'setMustCloneFilingCalendar',
        'cloned_calendar_eff_date' => 'setClonedCalendarEffDate',
        'expired_calendar_end_date' => 'setExpiredCalendarEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'message' => 'getMessage',
        'customer_must_approve' => 'getCustomerMustApprove',
        'must_clone_filing_calendar' => 'getMustCloneFilingCalendar',
        'cloned_calendar_eff_date' => 'getClonedCalendarEffDate',
        'expired_calendar_end_date' => 'getExpiredCalendarEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['customer_must_approve'] = isset($data['customer_must_approve']) ? $data['customer_must_approve'] : null;
        $this->container['must_clone_filing_calendar'] = isset($data['must_clone_filing_calendar']) ? $data['must_clone_filing_calendar'] : null;
        $this->container['cloned_calendar_eff_date'] = isset($data['cloned_calendar_eff_date']) ? $data['cloned_calendar_eff_date'] : null;
        $this->container['expired_calendar_end_date'] = isset($data['expired_calendar_end_date']) ? $data['expired_calendar_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success Whether or not changes can be made to the filing calendar.
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The message to present to the user when calendar is successfully or unsuccessfully changed.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets customer_must_approve
     *
     * @return bool
     */
    public function getCustomerMustApprove()
    {
        return $this->container['customer_must_approve'];
    }

    /**
     * Sets customer_must_approve
     *
     * @param bool $customer_must_approve Whether or not the user should be warned of a change, because some changes are risky and may be being done not in accordance with jurisdiction rules.  For example, user would be warned if user changes filing frequency to new frequency with a start date during an accrual month of the existing frequency.
     *
     * @return $this
     */
    public function setCustomerMustApprove($customer_must_approve)
    {
        $this->container['customer_must_approve'] = $customer_must_approve;

        return $this;
    }

    /**
     * Gets must_clone_filing_calendar
     *
     * @return bool
     */
    public function getMustCloneFilingCalendar()
    {
        return $this->container['must_clone_filing_calendar'];
    }

    /**
     * Sets must_clone_filing_calendar
     *
     * @param bool $must_clone_filing_calendar True if the filing calendar must be cloned to allow this change; false if the existing filing calendar can be changed itself.
     *
     * @return $this
     */
    public function setMustCloneFilingCalendar($must_clone_filing_calendar)
    {
        $this->container['must_clone_filing_calendar'] = $must_clone_filing_calendar;

        return $this;
    }

    /**
     * Gets cloned_calendar_eff_date
     *
     * @return \DateTime
     */
    public function getClonedCalendarEffDate()
    {
        return $this->container['cloned_calendar_eff_date'];
    }

    /**
     * Sets cloned_calendar_eff_date
     *
     * @param \DateTime $cloned_calendar_eff_date The effective date of the filing calendar (only applies if cloning).
     *
     * @return $this
     */
    public function setClonedCalendarEffDate($cloned_calendar_eff_date)
    {
        $this->container['cloned_calendar_eff_date'] = $cloned_calendar_eff_date;

        return $this;
    }

    /**
     * Gets expired_calendar_end_date
     *
     * @return \DateTime
     */
    public function getExpiredCalendarEndDate()
    {
        return $this->container['expired_calendar_end_date'];
    }

    /**
     * Sets expired_calendar_end_date
     *
     * @param \DateTime $expired_calendar_end_date The expired end date of the old filing calendar (only applies if cloning).
     *
     * @return $this
     */
    public function setExpiredCalendarEndDate($expired_calendar_end_date)
    {
        $this->container['expired_calendar_end_date'] = $expired_calendar_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


