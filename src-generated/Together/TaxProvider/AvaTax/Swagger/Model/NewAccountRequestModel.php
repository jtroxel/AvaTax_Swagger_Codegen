<?php
/**
 * NewAccountRequestModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * NewAccountRequestModel Class Doc Comment
 *
 * @category Class
 * @description Represents a request for a new account with Avalara for a new subscriber.  Contains information about the account requested and the rate plan selected.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewAccountRequestModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewAccountRequestModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer' => 'string',
        'connector_id' => 'string',
        'campaign' => 'string',
        'lead_source' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'account_name' => 'string',
        'website' => 'string',
        'payment_method_id' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => 'string',
        'phone_number' => 'string',
        'email' => 'string',
        'user_password' => 'string',
        'welcome_email' => 'string',
        'company_address' => '\Together\Taxes\Model\CompanyAddress',
        'company_code' => 'string',
        'properties' => 'string[]',
        'accept_avalara_terms_and_conditions' => 'bool',
        'have_read_avalara_terms_and_conditions' => 'bool',
        'marketing_context' => 'map[string,string]',
        'account_type' => 'string',
        'tax_payer_id_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer' => null,
        'connector_id' => null,
        'campaign' => null,
        'lead_source' => null,
        'effective_date' => 'date-time',
        'end_date' => 'date-time',
        'account_name' => null,
        'website' => null,
        'payment_method_id' => null,
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'phone_number' => null,
        'email' => null,
        'user_password' => null,
        'welcome_email' => null,
        'company_address' => null,
        'company_code' => null,
        'properties' => null,
        'accept_avalara_terms_and_conditions' => null,
        'have_read_avalara_terms_and_conditions' => null,
        'marketing_context' => null,
        'account_type' => null,
        'tax_payer_id_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer' => 'offer',
        'connector_id' => 'connectorId',
        'campaign' => 'campaign',
        'lead_source' => 'leadSource',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'account_name' => 'accountName',
        'website' => 'website',
        'payment_method_id' => 'paymentMethodId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'title' => 'title',
        'phone_number' => 'phoneNumber',
        'email' => 'email',
        'user_password' => 'userPassword',
        'welcome_email' => 'welcomeEmail',
        'company_address' => 'companyAddress',
        'company_code' => 'companyCode',
        'properties' => 'properties',
        'accept_avalara_terms_and_conditions' => 'acceptAvalaraTermsAndConditions',
        'have_read_avalara_terms_and_conditions' => 'haveReadAvalaraTermsAndConditions',
        'marketing_context' => 'marketingContext',
        'account_type' => 'accountType',
        'tax_payer_id_number' => 'taxPayerIdNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer' => 'setOffer',
        'connector_id' => 'setConnectorId',
        'campaign' => 'setCampaign',
        'lead_source' => 'setLeadSource',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'account_name' => 'setAccountName',
        'website' => 'setWebsite',
        'payment_method_id' => 'setPaymentMethodId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'user_password' => 'setUserPassword',
        'welcome_email' => 'setWelcomeEmail',
        'company_address' => 'setCompanyAddress',
        'company_code' => 'setCompanyCode',
        'properties' => 'setProperties',
        'accept_avalara_terms_and_conditions' => 'setAcceptAvalaraTermsAndConditions',
        'have_read_avalara_terms_and_conditions' => 'setHaveReadAvalaraTermsAndConditions',
        'marketing_context' => 'setMarketingContext',
        'account_type' => 'setAccountType',
        'tax_payer_id_number' => 'setTaxPayerIdNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer' => 'getOffer',
        'connector_id' => 'getConnectorId',
        'campaign' => 'getCampaign',
        'lead_source' => 'getLeadSource',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'account_name' => 'getAccountName',
        'website' => 'getWebsite',
        'payment_method_id' => 'getPaymentMethodId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'user_password' => 'getUserPassword',
        'welcome_email' => 'getWelcomeEmail',
        'company_address' => 'getCompanyAddress',
        'company_code' => 'getCompanyCode',
        'properties' => 'getProperties',
        'accept_avalara_terms_and_conditions' => 'getAcceptAvalaraTermsAndConditions',
        'have_read_avalara_terms_and_conditions' => 'getHaveReadAvalaraTermsAndConditions',
        'marketing_context' => 'getMarketingContext',
        'account_type' => 'getAccountType',
        'tax_payer_id_number' => 'getTaxPayerIdNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_TYPE_REGULAR = 'Regular';
    const ACCOUNT_TYPE_FIRM = 'Firm';
    const ACCOUNT_TYPE_FIRM_CLIENT = 'FirmClient';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_REGULAR,
            self::ACCOUNT_TYPE_FIRM,
            self::ACCOUNT_TYPE_FIRM_CLIENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
        $this->container['connector_id'] = isset($data['connector_id']) ? $data['connector_id'] : null;
        $this->container['campaign'] = isset($data['campaign']) ? $data['campaign'] : null;
        $this->container['lead_source'] = isset($data['lead_source']) ? $data['lead_source'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['payment_method_id'] = isset($data['payment_method_id']) ? $data['payment_method_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['user_password'] = isset($data['user_password']) ? $data['user_password'] : null;
        $this->container['welcome_email'] = isset($data['welcome_email']) ? $data['welcome_email'] : null;
        $this->container['company_address'] = isset($data['company_address']) ? $data['company_address'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['accept_avalara_terms_and_conditions'] = isset($data['accept_avalara_terms_and_conditions']) ? $data['accept_avalara_terms_and_conditions'] : null;
        $this->container['have_read_avalara_terms_and_conditions'] = isset($data['have_read_avalara_terms_and_conditions']) ? $data['have_read_avalara_terms_and_conditions'] : null;
        $this->container['marketing_context'] = isset($data['marketing_context']) ? $data['marketing_context'] : null;
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['tax_payer_id_number'] = isset($data['tax_payer_id_number']) ? $data['tax_payer_id_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offer'] === null) {
            $invalidProperties[] = "'offer' can't be null";
        }
        if ($this->container['account_name'] === null) {
            $invalidProperties[] = "'account_name' can't be null";
        }
        if ((mb_strlen($this->container['account_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['account_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'account_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) < 0)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['first_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['last_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 50)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((mb_strlen($this->container['email']) > 50)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['company_address'] === null) {
            $invalidProperties[] = "'company_address' can't be null";
        }
        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tax_payer_id_number']) && (mb_strlen($this->container['tax_payer_id_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'tax_payer_id_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['tax_payer_id_number']) && (mb_strlen($this->container['tax_payer_id_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_payer_id_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer
     *
     * @return string
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param string $offer The offer code provided to you by your Avalara business development contact.                This code controls what services and rates the customer will be provisioned with upon creation.                If you do not know your offer code, please contact your Avalara business development representative.
     *
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets connector_id
     *
     * @return string
     */
    public function getConnectorId()
    {
        return $this->container['connector_id'];
    }

    /**
     * Sets connector_id
     *
     * @param string $connector_id The id associated with the connector
     *
     * @return $this
     */
    public function setConnectorId($connector_id)
    {
        $this->container['connector_id'] = $connector_id;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return string
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param string $campaign If your Avalara business development representative requests, please provide the campaign ID associated with your  signup process.  This campaign identifier helps Avalara match users to the context in which they learned about the product  to help improve the accuracy of our messaging.                The `campaign` field must be either null or a value provided to you by an Avalara business development representative.  If you provide an unexpected value in this field, your API call will fail.
     *
     * @return $this
     */
    public function setCampaign($campaign)
    {
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets lead_source
     *
     * @return string
     */
    public function getLeadSource()
    {
        return $this->container['lead_source'];
    }

    /**
     * Sets lead_source
     *
     * @param string $lead_source If your Avalara business development representative requests, please provide the lead source value associated with your  signup process.  This lead source identifier helps Avalara match users to the context in which they learned about the product  to help improve the accuracy of our messaging.                The `leadSource` field must be either null or a value provided to you by an Avalara business development representative.  If you provide an unexpected value in this field, your API call will fail.
     *
     * @return $this
     */
    public function setLeadSource($lead_source)
    {
        $this->container['lead_source'] = $lead_source;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date on which the account should take effect.  If null, defaults to today.                You should leave this value `null` unless specifically requested by your Avalara business development manager.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The date on which the account should expire.                You should leave this value `null` unless specifically requested by your Avalara business development manager.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name The name of the account to create
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        if ((mb_strlen($account_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($account_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $account_name when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website Website of the new customer whose account is being created.                It is strongly recommended to provide the customer's website URL, as this will help our support representatives better  assist customers.
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        if (!is_null($website) && (mb_strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling NewAccountRequestModel., must be smaller than or equal to 255.');
        }
        if (!is_null($website) && (mb_strlen($website) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string $payment_method_id Payment Method to be associated with the account.                This is strictly to be used internally unless your Avalara business development manager specifically asks you to provide this value  while attempting to create an account.
     *
     * @return $this
     */
    public function setPaymentMethodId($payment_method_id)
    {
        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the primary contact person for this account
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($first_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the primary contact person for this account
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($last_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the primary contact person for this account
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 50)) {
            throw new \InvalidArgumentException('invalid length for $title when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the primary contact person for this account
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($phone_number) && (mb_strlen($phone_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of the primary contact person for this account
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((mb_strlen($email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $email when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets user_password
     *
     * @return string
     */
    public function getUserPassword()
    {
        return $this->container['user_password'];
    }

    /**
     * Sets user_password
     *
     * @param string $user_password If instructed by your Avalara business development manager, set this value to a temporary password to permit the user to continue their onboarding process.                If this value is null, a temporary password is generated by the system and emailed to the user.                The user will then be asked to choose a permanent password when they first log on to the AvaTax website.
     *
     * @return $this
     */
    public function setUserPassword($user_password)
    {
        $this->container['user_password'] = $user_password;

        return $this;
    }

    /**
     * Gets welcome_email
     *
     * @return string
     */
    public function getWelcomeEmail()
    {
        return $this->container['welcome_email'];
    }

    /**
     * Sets welcome_email
     *
     * @param string $welcome_email This option controls what type of a welcome email is sent when the account is created.                * `Normal` - A standard welcome email will be sent.  * `Suppressed` - No email will be sent.  * `Custom` - If your Avalara business development representative provides you with a customized welcome email for your customers, please select this option.
     *
     * @return $this
     */
    public function setWelcomeEmail($welcome_email)
    {
        $this->container['welcome_email'] = $welcome_email;

        return $this;
    }

    /**
     * Gets company_address
     *
     * @return \Together\Taxes\Model\CompanyAddress
     */
    public function getCompanyAddress()
    {
        return $this->container['company_address'];
    }

    /**
     * Sets company_address
     *
     * @param \Together\Taxes\Model\CompanyAddress $company_address Address information of the account being created.
     *
     * @return $this
     */
    public function setCompanyAddress($company_address)
    {
        $this->container['company_address'] = $company_address;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code Company code to be assigned to the company created for this account.                If no company code is provided, this will be defaulted to \"DEFAULT\" company code.
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if (!is_null($company_code) && (mb_strlen($company_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling NewAccountRequestModel., must be smaller than or equal to 50.');
        }
        if (!is_null($company_code) && (mb_strlen($company_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string[] $properties Properties of the primary contact person for this account
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets accept_avalara_terms_and_conditions
     *
     * @return bool
     */
    public function getAcceptAvalaraTermsAndConditions()
    {
        return $this->container['accept_avalara_terms_and_conditions'];
    }

    /**
     * Sets accept_avalara_terms_and_conditions
     *
     * @param bool $accept_avalara_terms_and_conditions Set this to true if and only if the owner of the newly created account accepts Avalara's terms and conditions for your account.                Reading and accepting Avalara's terms and conditions is necessary in order for the account to receive a license key.
     *
     * @return $this
     */
    public function setAcceptAvalaraTermsAndConditions($accept_avalara_terms_and_conditions)
    {
        $this->container['accept_avalara_terms_and_conditions'] = $accept_avalara_terms_and_conditions;

        return $this;
    }

    /**
     * Gets have_read_avalara_terms_and_conditions
     *
     * @return bool
     */
    public function getHaveReadAvalaraTermsAndConditions()
    {
        return $this->container['have_read_avalara_terms_and_conditions'];
    }

    /**
     * Sets have_read_avalara_terms_and_conditions
     *
     * @param bool $have_read_avalara_terms_and_conditions Set this to true if and only if the owner of the newly created account has fully read Avalara's terms and conditions for your account.                Reading and accepting Avalara's terms and conditions is necessary in order for the account to receive a license key.
     *
     * @return $this
     */
    public function setHaveReadAvalaraTermsAndConditions($have_read_avalara_terms_and_conditions)
    {
        $this->container['have_read_avalara_terms_and_conditions'] = $have_read_avalara_terms_and_conditions;

        return $this;
    }

    /**
     * Gets marketing_context
     *
     * @return map[string,string]
     */
    public function getMarketingContext()
    {
        return $this->container['marketing_context'];
    }

    /**
     * Sets marketing_context
     *
     * @param map[string,string] $marketing_context A dynamic key-value pair for the marketing context information
     *
     * @return $this
     */
    public function setMarketingContext($marketing_context)
    {
        $this->container['marketing_context'] = $marketing_context;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type Type of the account to be created. Regular, Firm or FirmClient
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets tax_payer_id_number
     *
     * @return string
     */
    public function getTaxPayerIdNumber()
    {
        return $this->container['tax_payer_id_number'];
    }

    /**
     * Sets tax_payer_id_number
     *
     * @param string $tax_payer_id_number United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your  Social Security Number if you are an individual.  This value is required if the address provided is inside the US and if you subscribed to the Avalara Managed Returns or SST Certified Service Provider service. Otherwise it is optional.
     *
     * @return $this
     */
    public function setTaxPayerIdNumber($tax_payer_id_number)
    {
        if (!is_null($tax_payer_id_number) && (mb_strlen($tax_payer_id_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $tax_payer_id_number when calling NewAccountRequestModel., must be smaller than or equal to 11.');
        }
        if (!is_null($tax_payer_id_number) && (mb_strlen($tax_payer_id_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_payer_id_number when calling NewAccountRequestModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_payer_id_number'] = $tax_payer_id_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


