<?php
/**
 * MultiTaxFilingReturnModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * MultiTaxFilingReturnModel Class Doc Comment
 *
 * @category Class
 * @description Filing Returns Model
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiTaxFilingReturnModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultiTaxFilingReturnModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'filing_calendar_id' => 'int',
        'status' => 'string',
        'filing_frequency' => 'string',
        'filing_type' => 'string',
        'form_name' => 'string',
        'form_code' => 'string',
        'description' => 'string',
        'tax_authority_id' => 'int',
        'filed_date' => '\DateTime',
        'accrual_type' => 'string',
        'start_period' => '\DateTime',
        'end_period' => '\DateTime',
        'return_tax_summary' => '\Together\Taxes\Model\FilingsTaxSummaryModel',
        'return_tax_details' => '\Together\Taxes\Model\FilingsTaxDetailsModel[]',
        'excluded_carry_over_credits' => '\Together\Taxes\Model\FilingReturnCreditModel',
        'applied_carry_over_credits' => '\Together\Taxes\Model\FilingReturnCreditModel',
        'total_adjustments' => 'double',
        'adjustments' => '\Together\Taxes\Model\FilingAdjustmentModel[]',
        'total_augmentations' => 'double',
        'augmentations' => '\Together\Taxes\Model\FilingAugmentationModel[]',
        'total_payments' => 'double',
        'payments' => '\Together\Taxes\Model\FilingPaymentModel[]',
        'attachments' => '\Together\Taxes\Model\FilingAttachmentModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'filing_calendar_id' => 'int64',
        'status' => null,
        'filing_frequency' => null,
        'filing_type' => null,
        'form_name' => null,
        'form_code' => null,
        'description' => null,
        'tax_authority_id' => 'int32',
        'filed_date' => 'date-time',
        'accrual_type' => null,
        'start_period' => 'date-time',
        'end_period' => 'date-time',
        'return_tax_summary' => null,
        'return_tax_details' => null,
        'excluded_carry_over_credits' => null,
        'applied_carry_over_credits' => null,
        'total_adjustments' => 'double',
        'adjustments' => null,
        'total_augmentations' => 'double',
        'augmentations' => null,
        'total_payments' => 'double',
        'payments' => null,
        'attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'filing_calendar_id' => 'filingCalendarId',
        'status' => 'status',
        'filing_frequency' => 'filingFrequency',
        'filing_type' => 'filingType',
        'form_name' => 'formName',
        'form_code' => 'formCode',
        'description' => 'description',
        'tax_authority_id' => 'taxAuthorityId',
        'filed_date' => 'filedDate',
        'accrual_type' => 'accrualType',
        'start_period' => 'startPeriod',
        'end_period' => 'endPeriod',
        'return_tax_summary' => 'returnTaxSummary',
        'return_tax_details' => 'returnTaxDetails',
        'excluded_carry_over_credits' => 'excludedCarryOverCredits',
        'applied_carry_over_credits' => 'appliedCarryOverCredits',
        'total_adjustments' => 'totalAdjustments',
        'adjustments' => 'adjustments',
        'total_augmentations' => 'totalAugmentations',
        'augmentations' => 'augmentations',
        'total_payments' => 'totalPayments',
        'payments' => 'payments',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'filing_calendar_id' => 'setFilingCalendarId',
        'status' => 'setStatus',
        'filing_frequency' => 'setFilingFrequency',
        'filing_type' => 'setFilingType',
        'form_name' => 'setFormName',
        'form_code' => 'setFormCode',
        'description' => 'setDescription',
        'tax_authority_id' => 'setTaxAuthorityId',
        'filed_date' => 'setFiledDate',
        'accrual_type' => 'setAccrualType',
        'start_period' => 'setStartPeriod',
        'end_period' => 'setEndPeriod',
        'return_tax_summary' => 'setReturnTaxSummary',
        'return_tax_details' => 'setReturnTaxDetails',
        'excluded_carry_over_credits' => 'setExcludedCarryOverCredits',
        'applied_carry_over_credits' => 'setAppliedCarryOverCredits',
        'total_adjustments' => 'setTotalAdjustments',
        'adjustments' => 'setAdjustments',
        'total_augmentations' => 'setTotalAugmentations',
        'augmentations' => 'setAugmentations',
        'total_payments' => 'setTotalPayments',
        'payments' => 'setPayments',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'filing_calendar_id' => 'getFilingCalendarId',
        'status' => 'getStatus',
        'filing_frequency' => 'getFilingFrequency',
        'filing_type' => 'getFilingType',
        'form_name' => 'getFormName',
        'form_code' => 'getFormCode',
        'description' => 'getDescription',
        'tax_authority_id' => 'getTaxAuthorityId',
        'filed_date' => 'getFiledDate',
        'accrual_type' => 'getAccrualType',
        'start_period' => 'getStartPeriod',
        'end_period' => 'getEndPeriod',
        'return_tax_summary' => 'getReturnTaxSummary',
        'return_tax_details' => 'getReturnTaxDetails',
        'excluded_carry_over_credits' => 'getExcludedCarryOverCredits',
        'applied_carry_over_credits' => 'getAppliedCarryOverCredits',
        'total_adjustments' => 'getTotalAdjustments',
        'adjustments' => 'getAdjustments',
        'total_augmentations' => 'getTotalAugmentations',
        'augmentations' => 'getAugmentations',
        'total_payments' => 'getTotalPayments',
        'payments' => 'getPayments',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING_APPROVAL = 'PendingApproval';
    const STATUS_DIRTY = 'Dirty';
    const STATUS_APPROVED_TO_FILE = 'ApprovedToFile';
    const STATUS_PENDING_FILING = 'PendingFiling';
    const STATUS_PENDING_FILING_ON_BEHALF = 'PendingFilingOnBehalf';
    const STATUS_FILED = 'Filed';
    const STATUS_FILED_ON_BEHALF = 'FiledOnBehalf';
    const STATUS_RETURN_ACCEPTED = 'ReturnAccepted';
    const STATUS_RETURN_ACCEPTED_ON_BEHALF = 'ReturnAcceptedOnBehalf';
    const STATUS_PAYMENT_REMITTED = 'PaymentRemitted';
    const STATUS_VOIDED = 'Voided';
    const STATUS_PENDING_RETURN = 'PendingReturn';
    const STATUS_PENDING_RETURN_ON_BEHALF = 'PendingReturnOnBehalf';
    const STATUS_DO_NOT_FILE = 'DoNotFile';
    const STATUS_RETURN_REJECTED = 'ReturnRejected';
    const STATUS_RETURN_REJECTED_ON_BEHALF = 'ReturnRejectedOnBehalf';
    const STATUS_APPROVED_TO_FILE_ON_BEHALF = 'ApprovedToFileOnBehalf';
    const FILING_FREQUENCY_MONTHLY = 'Monthly';
    const FILING_FREQUENCY_QUARTERLY = 'Quarterly';
    const FILING_FREQUENCY_SEMI_ANNUALLY = 'SemiAnnually';
    const FILING_FREQUENCY_ANNUALLY = 'Annually';
    const FILING_FREQUENCY_BIMONTHLY = 'Bimonthly';
    const FILING_FREQUENCY_OCCASIONAL = 'Occasional';
    const FILING_FREQUENCY_INVERSE_QUARTERLY = 'InverseQuarterly';
    const FILING_FREQUENCY_WEEKLY = 'Weekly';
    const FILING_TYPE_PAPER_RETURN = 'PaperReturn';
    const FILING_TYPE_ELECTRONIC_RETURN = 'ElectronicReturn';
    const FILING_TYPE_SER = 'SER';
    const FILING_TYPE_EFT_PAPER = 'EFTPaper';
    const FILING_TYPE_PHONE_PAPER = 'PhonePaper';
    const FILING_TYPE_SIGNATURE_READY = 'SignatureReady';
    const FILING_TYPE_EFILE_CHECK = 'EfileCheck';
    const ACCRUAL_TYPE_FILING = 'Filing';
    const ACCRUAL_TYPE_ACCRUAL = 'Accrual';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_DIRTY,
            self::STATUS_APPROVED_TO_FILE,
            self::STATUS_PENDING_FILING,
            self::STATUS_PENDING_FILING_ON_BEHALF,
            self::STATUS_FILED,
            self::STATUS_FILED_ON_BEHALF,
            self::STATUS_RETURN_ACCEPTED,
            self::STATUS_RETURN_ACCEPTED_ON_BEHALF,
            self::STATUS_PAYMENT_REMITTED,
            self::STATUS_VOIDED,
            self::STATUS_PENDING_RETURN,
            self::STATUS_PENDING_RETURN_ON_BEHALF,
            self::STATUS_DO_NOT_FILE,
            self::STATUS_RETURN_REJECTED,
            self::STATUS_RETURN_REJECTED_ON_BEHALF,
            self::STATUS_APPROVED_TO_FILE_ON_BEHALF,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingFrequencyAllowableValues()
    {
        return [
            self::FILING_FREQUENCY_MONTHLY,
            self::FILING_FREQUENCY_QUARTERLY,
            self::FILING_FREQUENCY_SEMI_ANNUALLY,
            self::FILING_FREQUENCY_ANNUALLY,
            self::FILING_FREQUENCY_BIMONTHLY,
            self::FILING_FREQUENCY_OCCASIONAL,
            self::FILING_FREQUENCY_INVERSE_QUARTERLY,
            self::FILING_FREQUENCY_WEEKLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingTypeAllowableValues()
    {
        return [
            self::FILING_TYPE_PAPER_RETURN,
            self::FILING_TYPE_ELECTRONIC_RETURN,
            self::FILING_TYPE_SER,
            self::FILING_TYPE_EFT_PAPER,
            self::FILING_TYPE_PHONE_PAPER,
            self::FILING_TYPE_SIGNATURE_READY,
            self::FILING_TYPE_EFILE_CHECK,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccrualTypeAllowableValues()
    {
        return [
            self::ACCRUAL_TYPE_FILING,
            self::ACCRUAL_TYPE_ACCRUAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['filing_calendar_id'] = isset($data['filing_calendar_id']) ? $data['filing_calendar_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['filing_frequency'] = isset($data['filing_frequency']) ? $data['filing_frequency'] : null;
        $this->container['filing_type'] = isset($data['filing_type']) ? $data['filing_type'] : null;
        $this->container['form_name'] = isset($data['form_name']) ? $data['form_name'] : null;
        $this->container['form_code'] = isset($data['form_code']) ? $data['form_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['filed_date'] = isset($data['filed_date']) ? $data['filed_date'] : null;
        $this->container['accrual_type'] = isset($data['accrual_type']) ? $data['accrual_type'] : null;
        $this->container['start_period'] = isset($data['start_period']) ? $data['start_period'] : null;
        $this->container['end_period'] = isset($data['end_period']) ? $data['end_period'] : null;
        $this->container['return_tax_summary'] = isset($data['return_tax_summary']) ? $data['return_tax_summary'] : null;
        $this->container['return_tax_details'] = isset($data['return_tax_details']) ? $data['return_tax_details'] : null;
        $this->container['excluded_carry_over_credits'] = isset($data['excluded_carry_over_credits']) ? $data['excluded_carry_over_credits'] : null;
        $this->container['applied_carry_over_credits'] = isset($data['applied_carry_over_credits']) ? $data['applied_carry_over_credits'] : null;
        $this->container['total_adjustments'] = isset($data['total_adjustments']) ? $data['total_adjustments'] : null;
        $this->container['adjustments'] = isset($data['adjustments']) ? $data['adjustments'] : null;
        $this->container['total_augmentations'] = isset($data['total_augmentations']) ? $data['total_augmentations'] : null;
        $this->container['augmentations'] = isset($data['augmentations']) ? $data['augmentations'] : null;
        $this->container['total_payments'] = isset($data['total_payments']) ? $data['total_payments'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($this->container['filing_frequency']) && !in_array($this->container['filing_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingTypeAllowableValues();
        if (!is_null($this->container['filing_type']) && !in_array($this->container['filing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (!is_null($this->container['accrual_type']) && !in_array($this->container['accrual_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accrual_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this filing return.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets filing_calendar_id
     *
     * @return int
     */
    public function getFilingCalendarId()
    {
        return $this->container['filing_calendar_id'];
    }

    /**
     * Sets filing_calendar_id
     *
     * @param int $filing_calendar_id The unique ID number of the filing calendar associated with this return.
     *
     * @return $this
     */
    public function setFilingCalendarId($filing_calendar_id)
    {
        $this->container['filing_calendar_id'] = $filing_calendar_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status of the filing return.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets filing_frequency
     *
     * @return string
     */
    public function getFilingFrequency()
    {
        return $this->container['filing_frequency'];
    }

    /**
     * Sets filing_frequency
     *
     * @param string $filing_frequency The filing frequency of the return.
     *
     * @return $this
     */
    public function setFilingFrequency($filing_frequency)
    {
        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($filing_frequency) && !in_array($filing_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_frequency'] = $filing_frequency;

        return $this;
    }

    /**
     * Gets filing_type
     *
     * @return string
     */
    public function getFilingType()
    {
        return $this->container['filing_type'];
    }

    /**
     * Sets filing_type
     *
     * @param string $filing_type The filing type of the return.
     *
     * @return $this
     */
    public function setFilingType($filing_type)
    {
        $allowedValues = $this->getFilingTypeAllowableValues();
        if (!is_null($filing_type) && !in_array($filing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_type'] = $filing_type;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string
     */
    public function getFormName()
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string $form_name The name of the form.
     *
     * @return $this
     */
    public function setFormName($form_name)
    {
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets form_code
     *
     * @return string
     */
    public function getFormCode()
    {
        return $this->container['form_code'];
    }

    /**
     * Sets form_code
     *
     * @param string $form_code The unique code of the form.
     *
     * @return $this
     */
    public function setFormCode($form_code)
    {
        $this->container['form_code'] = $form_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description for the return.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id Tax Authority ID of this return
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets filed_date
     *
     * @return \DateTime
     */
    public function getFiledDate()
    {
        return $this->container['filed_date'];
    }

    /**
     * Sets filed_date
     *
     * @param \DateTime $filed_date The date the return was filed by Avalara.
     *
     * @return $this
     */
    public function setFiledDate($filed_date)
    {
        $this->container['filed_date'] = $filed_date;

        return $this;
    }

    /**
     * Gets accrual_type
     *
     * @return string
     */
    public function getAccrualType()
    {
        return $this->container['accrual_type'];
    }

    /**
     * Sets accrual_type
     *
     * @param string $accrual_type Accrual type of the return
     *
     * @return $this
     */
    public function setAccrualType($accrual_type)
    {
        $allowedValues = $this->getAccrualTypeAllowableValues();
        if (!is_null($accrual_type) && !in_array($accrual_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accrual_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accrual_type'] = $accrual_type;

        return $this;
    }

    /**
     * Gets start_period
     *
     * @return \DateTime
     */
    public function getStartPeriod()
    {
        return $this->container['start_period'];
    }

    /**
     * Sets start_period
     *
     * @param \DateTime $start_period The start date of this return
     *
     * @return $this
     */
    public function setStartPeriod($start_period)
    {
        $this->container['start_period'] = $start_period;

        return $this;
    }

    /**
     * Gets end_period
     *
     * @return \DateTime
     */
    public function getEndPeriod()
    {
        return $this->container['end_period'];
    }

    /**
     * Sets end_period
     *
     * @param \DateTime $end_period The end date of this return
     *
     * @return $this
     */
    public function setEndPeriod($end_period)
    {
        $this->container['end_period'] = $end_period;

        return $this;
    }

    /**
     * Gets return_tax_summary
     *
     * @return \Together\Taxes\Model\FilingsTaxSummaryModel
     */
    public function getReturnTaxSummary()
    {
        return $this->container['return_tax_summary'];
    }

    /**
     * Sets return_tax_summary
     *
     * @param \Together\Taxes\Model\FilingsTaxSummaryModel $return_tax_summary A summary of all taxes compbined for this period
     *
     * @return $this
     */
    public function setReturnTaxSummary($return_tax_summary)
    {
        $this->container['return_tax_summary'] = $return_tax_summary;

        return $this;
    }

    /**
     * Gets return_tax_details
     *
     * @return \Together\Taxes\Model\FilingsTaxDetailsModel[]
     */
    public function getReturnTaxDetails()
    {
        return $this->container['return_tax_details'];
    }

    /**
     * Sets return_tax_details
     *
     * @param \Together\Taxes\Model\FilingsTaxDetailsModel[] $return_tax_details A detailed breakdown of the taxes in this filing
     *
     * @return $this
     */
    public function setReturnTaxDetails($return_tax_details)
    {
        $this->container['return_tax_details'] = $return_tax_details;

        return $this;
    }

    /**
     * Gets excluded_carry_over_credits
     *
     * @return \Together\Taxes\Model\FilingReturnCreditModel
     */
    public function getExcludedCarryOverCredits()
    {
        return $this->container['excluded_carry_over_credits'];
    }

    /**
     * Sets excluded_carry_over_credits
     *
     * @param \Together\Taxes\Model\FilingReturnCreditModel $excluded_carry_over_credits The excluded carry over credit documents
     *
     * @return $this
     */
    public function setExcludedCarryOverCredits($excluded_carry_over_credits)
    {
        $this->container['excluded_carry_over_credits'] = $excluded_carry_over_credits;

        return $this;
    }

    /**
     * Gets applied_carry_over_credits
     *
     * @return \Together\Taxes\Model\FilingReturnCreditModel
     */
    public function getAppliedCarryOverCredits()
    {
        return $this->container['applied_carry_over_credits'];
    }

    /**
     * Sets applied_carry_over_credits
     *
     * @param \Together\Taxes\Model\FilingReturnCreditModel $applied_carry_over_credits The applied carry over credit documents
     *
     * @return $this
     */
    public function setAppliedCarryOverCredits($applied_carry_over_credits)
    {
        $this->container['applied_carry_over_credits'] = $applied_carry_over_credits;

        return $this;
    }

    /**
     * Gets total_adjustments
     *
     * @return double
     */
    public function getTotalAdjustments()
    {
        return $this->container['total_adjustments'];
    }

    /**
     * Sets total_adjustments
     *
     * @param double $total_adjustments Total amount of adjustments on this return
     *
     * @return $this
     */
    public function setTotalAdjustments($total_adjustments)
    {
        $this->container['total_adjustments'] = $total_adjustments;

        return $this;
    }

    /**
     * Gets adjustments
     *
     * @return \Together\Taxes\Model\FilingAdjustmentModel[]
     */
    public function getAdjustments()
    {
        return $this->container['adjustments'];
    }

    /**
     * Sets adjustments
     *
     * @param \Together\Taxes\Model\FilingAdjustmentModel[] $adjustments The Adjustments for this return.
     *
     * @return $this
     */
    public function setAdjustments($adjustments)
    {
        $this->container['adjustments'] = $adjustments;

        return $this;
    }

    /**
     * Gets total_augmentations
     *
     * @return double
     */
    public function getTotalAugmentations()
    {
        return $this->container['total_augmentations'];
    }

    /**
     * Sets total_augmentations
     *
     * @param double $total_augmentations Total amount of augmentations on this return
     *
     * @return $this
     */
    public function setTotalAugmentations($total_augmentations)
    {
        $this->container['total_augmentations'] = $total_augmentations;

        return $this;
    }

    /**
     * Gets augmentations
     *
     * @return \Together\Taxes\Model\FilingAugmentationModel[]
     */
    public function getAugmentations()
    {
        return $this->container['augmentations'];
    }

    /**
     * Sets augmentations
     *
     * @param \Together\Taxes\Model\FilingAugmentationModel[] $augmentations The Augmentations for this return.
     *
     * @return $this
     */
    public function setAugmentations($augmentations)
    {
        $this->container['augmentations'] = $augmentations;

        return $this;
    }

    /**
     * Gets total_payments
     *
     * @return double
     */
    public function getTotalPayments()
    {
        return $this->container['total_payments'];
    }

    /**
     * Sets total_payments
     *
     * @param double $total_payments Total amount of payments on this return
     *
     * @return $this
     */
    public function setTotalPayments($total_payments)
    {
        $this->container['total_payments'] = $total_payments;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Together\Taxes\Model\FilingPaymentModel[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Together\Taxes\Model\FilingPaymentModel[] $payments The payments for this return.
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Together\Taxes\Model\FilingAttachmentModel[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Together\Taxes\Model\FilingAttachmentModel[] $attachments The attachments for this return.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


