<?php
/**
 * NexusModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * NexusModel Class Doc Comment
 *
 * @category Class
 * @description Represents a declaration of nexus within a particular taxing jurisdiction.                To create a nexus declaration for your company, you must first call the Definitions API &#x60;ListNexus&#x60; to obtain a  list of Avalara-defined nexus.  Once you have determined which nexus you wish to declare, you should customize  only the user-selectable fields in this object.                The user selectable fields for the nexus object are &#x60;companyId&#x60;, &#x60;effectiveDate&#x60;, &#x60;endDate&#x60;, &#x60;localNexusTypeId&#x60;,  &#x60;taxId&#x60;, &#x60;nexusTypeId&#x60;, &#x60;hasPermanentEstablishment&#x60;, and &#x60;isSellerImporterOfRecord&#x60;.                When calling &#x60;CreateNexus&#x60; or &#x60;UpdateNexus&#x60;, all values in your nexus object except for the user-selectable fields  must match an Avalara-defined system nexus object.  You can retrieve a list of Avalara-defined system nexus objects  by calling &#x60;ListNexus&#x60;.  If any data does not match, AvaTax may not recognize your nexus declaration.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NexusModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NexusModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'country' => 'string',
        'region' => 'string',
        'juris_type_id' => 'string',
        'jurisdiction_type_id' => 'string',
        'juris_code' => 'string',
        'juris_name' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'short_name' => 'string',
        'signature_code' => 'string',
        'state_assigned_no' => 'string',
        'nexus_type_id' => 'string',
        'sourcing' => 'string',
        'has_local_nexus' => 'bool',
        'local_nexus_type_id' => 'string',
        'has_permanent_establishment' => 'bool',
        'tax_id' => 'string',
        'streamlined_sales_tax' => 'bool',
        'is_sst_active' => 'bool',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'nexus_tax_type_group' => 'string',
        'tax_authority_id' => 'int',
        'is_seller_importer_of_record' => 'bool',
        'tax_name' => 'string',
        'parameters' => '\Together\Taxes\Model\NexusParameterDetailModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'country' => null,
        'region' => null,
        'juris_type_id' => null,
        'jurisdiction_type_id' => null,
        'juris_code' => null,
        'juris_name' => null,
        'effective_date' => 'date',
        'end_date' => 'date',
        'short_name' => null,
        'signature_code' => null,
        'state_assigned_no' => null,
        'nexus_type_id' => null,
        'sourcing' => null,
        'has_local_nexus' => null,
        'local_nexus_type_id' => null,
        'has_permanent_establishment' => null,
        'tax_id' => null,
        'streamlined_sales_tax' => null,
        'is_sst_active' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'nexus_tax_type_group' => null,
        'tax_authority_id' => 'int64',
        'is_seller_importer_of_record' => null,
        'tax_name' => null,
        'parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'country' => 'country',
        'region' => 'region',
        'juris_type_id' => 'jurisTypeId',
        'jurisdiction_type_id' => 'jurisdictionTypeId',
        'juris_code' => 'jurisCode',
        'juris_name' => 'jurisName',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'short_name' => 'shortName',
        'signature_code' => 'signatureCode',
        'state_assigned_no' => 'stateAssignedNo',
        'nexus_type_id' => 'nexusTypeId',
        'sourcing' => 'sourcing',
        'has_local_nexus' => 'hasLocalNexus',
        'local_nexus_type_id' => 'localNexusTypeId',
        'has_permanent_establishment' => 'hasPermanentEstablishment',
        'tax_id' => 'taxId',
        'streamlined_sales_tax' => 'streamlinedSalesTax',
        'is_sst_active' => 'isSSTActive',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'nexus_tax_type_group' => 'nexusTaxTypeGroup',
        'tax_authority_id' => 'taxAuthorityId',
        'is_seller_importer_of_record' => 'isSellerImporterOfRecord',
        'tax_name' => 'taxName',
        'parameters' => 'parameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'juris_type_id' => 'setJurisTypeId',
        'jurisdiction_type_id' => 'setJurisdictionTypeId',
        'juris_code' => 'setJurisCode',
        'juris_name' => 'setJurisName',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'short_name' => 'setShortName',
        'signature_code' => 'setSignatureCode',
        'state_assigned_no' => 'setStateAssignedNo',
        'nexus_type_id' => 'setNexusTypeId',
        'sourcing' => 'setSourcing',
        'has_local_nexus' => 'setHasLocalNexus',
        'local_nexus_type_id' => 'setLocalNexusTypeId',
        'has_permanent_establishment' => 'setHasPermanentEstablishment',
        'tax_id' => 'setTaxId',
        'streamlined_sales_tax' => 'setStreamlinedSalesTax',
        'is_sst_active' => 'setIsSstActive',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'nexus_tax_type_group' => 'setNexusTaxTypeGroup',
        'tax_authority_id' => 'setTaxAuthorityId',
        'is_seller_importer_of_record' => 'setIsSellerImporterOfRecord',
        'tax_name' => 'setTaxName',
        'parameters' => 'setParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'juris_type_id' => 'getJurisTypeId',
        'jurisdiction_type_id' => 'getJurisdictionTypeId',
        'juris_code' => 'getJurisCode',
        'juris_name' => 'getJurisName',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'short_name' => 'getShortName',
        'signature_code' => 'getSignatureCode',
        'state_assigned_no' => 'getStateAssignedNo',
        'nexus_type_id' => 'getNexusTypeId',
        'sourcing' => 'getSourcing',
        'has_local_nexus' => 'getHasLocalNexus',
        'local_nexus_type_id' => 'getLocalNexusTypeId',
        'has_permanent_establishment' => 'getHasPermanentEstablishment',
        'tax_id' => 'getTaxId',
        'streamlined_sales_tax' => 'getStreamlinedSalesTax',
        'is_sst_active' => 'getIsSstActive',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'nexus_tax_type_group' => 'getNexusTaxTypeGroup',
        'tax_authority_id' => 'getTaxAuthorityId',
        'is_seller_importer_of_record' => 'getIsSellerImporterOfRecord',
        'tax_name' => 'getTaxName',
        'parameters' => 'getParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURIS_TYPE_ID_STA = 'STA';
    const JURIS_TYPE_ID_CTY = 'CTY';
    const JURIS_TYPE_ID_CIT = 'CIT';
    const JURIS_TYPE_ID_STJ = 'STJ';
    const JURIS_TYPE_ID_CNT = 'CNT';
    const JURISDICTION_TYPE_ID_COUNTRY = 'Country';
    const JURISDICTION_TYPE_ID_STATE = 'State';
    const JURISDICTION_TYPE_ID_COUNTY = 'County';
    const JURISDICTION_TYPE_ID_CITY = 'City';
    const JURISDICTION_TYPE_ID_SPECIAL = 'Special';
    const NEXUS_TYPE_ID_NONE = 'None';
    const NEXUS_TYPE_ID_SALES_OR_SELLERS_USE_TAX = 'SalesOrSellersUseTax';
    const NEXUS_TYPE_ID_SALES_TAX = 'SalesTax';
    const NEXUS_TYPE_ID_SST_VOLUNTEER = 'SSTVolunteer';
    const NEXUS_TYPE_ID_SST_NON_VOLUNTEER = 'SSTNonVolunteer';
    const SOURCING_MIXED = 'Mixed';
    const SOURCING_DESTINATION = 'Destination';
    const SOURCING_ORIGIN = 'Origin';
    const LOCAL_NEXUS_TYPE_ID_SELECTED = 'Selected';
    const LOCAL_NEXUS_TYPE_ID_STATE_ADMINISTERED = 'StateAdministered';
    const LOCAL_NEXUS_TYPE_ID_ALL = 'All';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisTypeIdAllowableValues()
    {
        return [
            self::JURIS_TYPE_ID_STA,
            self::JURIS_TYPE_ID_CTY,
            self::JURIS_TYPE_ID_CIT,
            self::JURIS_TYPE_ID_STJ,
            self::JURIS_TYPE_ID_CNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionTypeIdAllowableValues()
    {
        return [
            self::JURISDICTION_TYPE_ID_COUNTRY,
            self::JURISDICTION_TYPE_ID_STATE,
            self::JURISDICTION_TYPE_ID_COUNTY,
            self::JURISDICTION_TYPE_ID_CITY,
            self::JURISDICTION_TYPE_ID_SPECIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNexusTypeIdAllowableValues()
    {
        return [
            self::NEXUS_TYPE_ID_NONE,
            self::NEXUS_TYPE_ID_SALES_OR_SELLERS_USE_TAX,
            self::NEXUS_TYPE_ID_SALES_TAX,
            self::NEXUS_TYPE_ID_SST_VOLUNTEER,
            self::NEXUS_TYPE_ID_SST_NON_VOLUNTEER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourcingAllowableValues()
    {
        return [
            self::SOURCING_MIXED,
            self::SOURCING_DESTINATION,
            self::SOURCING_ORIGIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocalNexusTypeIdAllowableValues()
    {
        return [
            self::LOCAL_NEXUS_TYPE_ID_SELECTED,
            self::LOCAL_NEXUS_TYPE_ID_STATE_ADMINISTERED,
            self::LOCAL_NEXUS_TYPE_ID_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['juris_type_id'] = isset($data['juris_type_id']) ? $data['juris_type_id'] : null;
        $this->container['jurisdiction_type_id'] = isset($data['jurisdiction_type_id']) ? $data['jurisdiction_type_id'] : null;
        $this->container['juris_code'] = isset($data['juris_code']) ? $data['juris_code'] : null;
        $this->container['juris_name'] = isset($data['juris_name']) ? $data['juris_name'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['signature_code'] = isset($data['signature_code']) ? $data['signature_code'] : null;
        $this->container['state_assigned_no'] = isset($data['state_assigned_no']) ? $data['state_assigned_no'] : null;
        $this->container['nexus_type_id'] = isset($data['nexus_type_id']) ? $data['nexus_type_id'] : null;
        $this->container['sourcing'] = isset($data['sourcing']) ? $data['sourcing'] : null;
        $this->container['has_local_nexus'] = isset($data['has_local_nexus']) ? $data['has_local_nexus'] : null;
        $this->container['local_nexus_type_id'] = isset($data['local_nexus_type_id']) ? $data['local_nexus_type_id'] : null;
        $this->container['has_permanent_establishment'] = isset($data['has_permanent_establishment']) ? $data['has_permanent_establishment'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['streamlined_sales_tax'] = isset($data['streamlined_sales_tax']) ? $data['streamlined_sales_tax'] : null;
        $this->container['is_sst_active'] = isset($data['is_sst_active']) ? $data['is_sst_active'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['nexus_tax_type_group'] = isset($data['nexus_tax_type_group']) ? $data['nexus_tax_type_group'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['is_seller_importer_of_record'] = isset($data['is_seller_importer_of_record']) ? $data['is_seller_importer_of_record'] : null;
        $this->container['tax_name'] = isset($data['tax_name']) ? $data['tax_name'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        $allowedValues = $this->getJurisTypeIdAllowableValues();
        if (!is_null($this->container['juris_type_id']) && !in_array($this->container['juris_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'juris_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJurisdictionTypeIdAllowableValues();
        if (!is_null($this->container['jurisdiction_type_id']) && !in_array($this->container['jurisdiction_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jurisdiction_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['juris_code'] === null) {
            $invalidProperties[] = "'juris_code' can't be null";
        }
        if ((mb_strlen($this->container['juris_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'juris_code', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['juris_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'juris_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['juris_name'] === null) {
            $invalidProperties[] = "'juris_name' can't be null";
        }
        if ((mb_strlen($this->container['juris_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'juris_name', the character length must be smaller than or equal to 200.";
        }

        if ((mb_strlen($this->container['juris_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'juris_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['short_name']) && (mb_strlen($this->container['short_name']) > 15)) {
            $invalidProperties[] = "invalid value for 'short_name', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['short_name']) && (mb_strlen($this->container['short_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'short_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['signature_code']) && (mb_strlen($this->container['signature_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'signature_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['signature_code']) && (mb_strlen($this->container['signature_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'signature_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state_assigned_no']) && (mb_strlen($this->container['state_assigned_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'state_assigned_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['state_assigned_no']) && (mb_strlen($this->container['state_assigned_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'state_assigned_no', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getNexusTypeIdAllowableValues();
        if (!is_null($this->container['nexus_type_id']) && !in_array($this->container['nexus_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'nexus_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($this->container['sourcing']) && !in_array($this->container['sourcing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sourcing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocalNexusTypeIdAllowableValues();
        if (!is_null($this->container['local_nexus_type_id']) && !in_array($this->container['local_nexus_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'local_nexus_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tax_id']) && (mb_strlen($this->container['tax_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'tax_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['tax_id']) && (mb_strlen($this->container['tax_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'tax_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this declaration of nexus.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company that declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets juris_type_id
     *
     * @return string
     */
    public function getJurisTypeId()
    {
        return $this->container['juris_type_id'];
    }

    /**
     * Sets juris_type_id
     *
     * @param string $juris_type_id DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use jurisdictionTypeId instead.  The jurisdiction type of the jurisdiction in which this company declared nexus.
     *
     * @return $this
     */
    public function setJurisTypeId($juris_type_id)
    {
        $allowedValues = $this->getJurisTypeIdAllowableValues();
        if (!is_null($juris_type_id) && !in_array($juris_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'juris_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['juris_type_id'] = $juris_type_id;

        return $this;
    }

    /**
     * Gets jurisdiction_type_id
     *
     * @return string
     */
    public function getJurisdictionTypeId()
    {
        return $this->container['jurisdiction_type_id'];
    }

    /**
     * Sets jurisdiction_type_id
     *
     * @param string $jurisdiction_type_id The type of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setJurisdictionTypeId($jurisdiction_type_id)
    {
        $allowedValues = $this->getJurisdictionTypeIdAllowableValues();
        if (!is_null($jurisdiction_type_id) && !in_array($jurisdiction_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jurisdiction_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction_type_id'] = $jurisdiction_type_id;

        return $this;
    }

    /**
     * Gets juris_code
     *
     * @return string
     */
    public function getJurisCode()
    {
        return $this->container['juris_code'];
    }

    /**
     * Sets juris_code
     *
     * @param string $juris_code The code identifying the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setJurisCode($juris_code)
    {
        if ((mb_strlen($juris_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $juris_code when calling NexusModel., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($juris_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $juris_code when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['juris_code'] = $juris_code;

        return $this;
    }

    /**
     * Gets juris_name
     *
     * @return string
     */
    public function getJurisName()
    {
        return $this->container['juris_name'];
    }

    /**
     * Sets juris_name
     *
     * @param string $juris_name The common name of the jurisdiction in which this company declared nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setJurisName($juris_name)
    {
        if ((mb_strlen($juris_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $juris_name when calling NexusModel., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($juris_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $juris_name when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['juris_name'] = $juris_name;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date when this nexus began.  If not known, set to null.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date If this nexus will end or has ended on a specific date, set this to the date when this nexus ends.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name The short name of the jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        if (!is_null($short_name) && (mb_strlen($short_name) > 15)) {
            throw new \InvalidArgumentException('invalid length for $short_name when calling NexusModel., must be smaller than or equal to 15.');
        }
        if (!is_null($short_name) && (mb_strlen($short_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $short_name when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets signature_code
     *
     * @return string
     */
    public function getSignatureCode()
    {
        return $this->container['signature_code'];
    }

    /**
     * Sets signature_code
     *
     * @param string $signature_code The signature code of the boundary region as defined by Avalara.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setSignatureCode($signature_code)
    {
        if (!is_null($signature_code) && (mb_strlen($signature_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $signature_code when calling NexusModel., must be smaller than or equal to 4.');
        }
        if (!is_null($signature_code) && (mb_strlen($signature_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $signature_code when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['signature_code'] = $signature_code;

        return $this;
    }

    /**
     * Gets state_assigned_no
     *
     * @return string
     */
    public function getStateAssignedNo()
    {
        return $this->container['state_assigned_no'];
    }

    /**
     * Sets state_assigned_no
     *
     * @param string $state_assigned_no The state assigned number of this jurisdiction.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setStateAssignedNo($state_assigned_no)
    {
        if (!is_null($state_assigned_no) && (mb_strlen($state_assigned_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $state_assigned_no when calling NexusModel., must be smaller than or equal to 50.');
        }
        if (!is_null($state_assigned_no) && (mb_strlen($state_assigned_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $state_assigned_no when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['state_assigned_no'] = $state_assigned_no;

        return $this;
    }

    /**
     * Gets nexus_type_id
     *
     * @return string
     */
    public function getNexusTypeId()
    {
        return $this->container['nexus_type_id'];
    }

    /**
     * Sets nexus_type_id
     *
     * @param string $nexus_type_id The type of nexus that this company is declaring.                If you are voluntarily declaring nexus in a jurisdiction, you should select `SalesOrSellersUseTax` for your  nexus type option.  This option allows you to calculate tax correctly whether you are selling in-state or  shipping from an out-of-state location.                If you are legally obligated to declare nexus due to physical presence or other sufficient nexus, you  should select `SalesTax`.  This indicates that, as a legal requirement, your company must always collect  and remit full sales tax in this jurisdiction.                If you are participating in the Streamlined Sales Tax program, your SST administrator will select nexus  settings for you in all SST jurisdictions.  Do not select any SST options by yourself.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setNexusTypeId($nexus_type_id)
    {
        $allowedValues = $this->getNexusTypeIdAllowableValues();
        if (!is_null($nexus_type_id) && !in_array($nexus_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'nexus_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['nexus_type_id'] = $nexus_type_id;

        return $this;
    }

    /**
     * Gets sourcing
     *
     * @return string
     */
    public function getSourcing()
    {
        return $this->container['sourcing'];
    }

    /**
     * Sets sourcing
     *
     * @param string $sourcing Indicates whether this nexus is defined as origin or destination nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setSourcing($sourcing)
    {
        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($sourcing) && !in_array($sourcing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sourcing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sourcing'] = $sourcing;

        return $this;
    }

    /**
     * Gets has_local_nexus
     *
     * @return bool
     */
    public function getHasLocalNexus()
    {
        return $this->container['has_local_nexus'];
    }

    /**
     * Sets has_local_nexus
     *
     * @param bool $has_local_nexus True if you are also declaring local nexus within this jurisdiction.  Many U.S. states have options for declaring nexus in local jurisdictions as well as within the state.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setHasLocalNexus($has_local_nexus)
    {
        $this->container['has_local_nexus'] = $has_local_nexus;

        return $this;
    }

    /**
     * Gets local_nexus_type_id
     *
     * @return string
     */
    public function getLocalNexusTypeId()
    {
        return $this->container['local_nexus_type_id'];
    }

    /**
     * Sets local_nexus_type_id
     *
     * @param string $local_nexus_type_id If you are declaring local nexus within this jurisdiction, this indicates whether you are declaring only  a specified list of local jurisdictions, all state-administered local jurisdictions, or all local jurisdictions.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setLocalNexusTypeId($local_nexus_type_id)
    {
        $allowedValues = $this->getLocalNexusTypeIdAllowableValues();
        if (!is_null($local_nexus_type_id) && !in_array($local_nexus_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'local_nexus_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['local_nexus_type_id'] = $local_nexus_type_id;

        return $this;
    }

    /**
     * Gets has_permanent_establishment
     *
     * @return bool
     */
    public function getHasPermanentEstablishment()
    {
        return $this->container['has_permanent_establishment'];
    }

    /**
     * Sets has_permanent_establishment
     *
     * @param bool $has_permanent_establishment Set this value to true if your company has a permanent establishment within this jurisdiction.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setHasPermanentEstablishment($has_permanent_establishment)
    {
        $this->container['has_permanent_establishment'] = $has_permanent_establishment;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id Optional - the tax identification number under which you declared nexus.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        if (!is_null($tax_id) && (mb_strlen($tax_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $tax_id when calling NexusModel., must be smaller than or equal to 25.');
        }
        if (!is_null($tax_id) && (mb_strlen($tax_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tax_id when calling NexusModel., must be bigger than or equal to 0.');
        }

        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets streamlined_sales_tax
     *
     * @return bool
     */
    public function getStreamlinedSalesTax()
    {
        return $this->container['streamlined_sales_tax'];
    }

    /**
     * Sets streamlined_sales_tax
     *
     * @param bool $streamlined_sales_tax DEPRECATED - Date: 4/29/2017, Version: 19.4, Message: Please use isSSTActive instead.  For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setStreamlinedSalesTax($streamlined_sales_tax)
    {
        $this->container['streamlined_sales_tax'] = $streamlined_sales_tax;

        return $this;
    }

    /**
     * Gets is_sst_active
     *
     * @return bool
     */
    public function getIsSstActive()
    {
        return $this->container['is_sst_active'];
    }

    /**
     * Sets is_sst_active
     *
     * @param bool $is_sst_active For the United States, this flag indicates whether this particular nexus falls within a U.S. State that participates  in the Streamlined Sales Tax program and if the account associated with the Nexus has an active AvaTaxCsp subscription.  For countries other than the US, this flag is null.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setIsSstActive($is_sst_active)
    {
        $this->container['is_sst_active'] = $is_sst_active;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.                This field is defined automatically when you declare nexus.  You do not need to provide a value for this field.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets nexus_tax_type_group
     *
     * @return string
     */
    public function getNexusTaxTypeGroup()
    {
        return $this->container['nexus_tax_type_group'];
    }

    /**
     * Sets nexus_tax_type_group
     *
     * @param string $nexus_tax_type_group The type of nexus that this company is declaring.Replaces NexusTypeId.  Use [ListNexusTaxTypeGroups](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListNexusTaxTypeGroups/) API for a list of nexus tax type groups.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setNexusTaxTypeGroup($nexus_tax_type_group)
    {
        $this->container['nexus_tax_type_group'] = $nexus_tax_type_group;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id A unique ID number of the tax authority that is associated with this nexus.                This field is defined by Avalara.  All Avalara-defined fields must match an Avalara-defined nexus object found by calling `ListNexus`.
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets is_seller_importer_of_record
     *
     * @return bool
     */
    public function getIsSellerImporterOfRecord()
    {
        return $this->container['is_seller_importer_of_record'];
    }

    /**
     * Sets is_seller_importer_of_record
     *
     * @param bool $is_seller_importer_of_record For nexus declarations at the country level, specifies whether this company is considered the importer of record in this nexus region.                Some taxes only apply if the seller is the importer of record for a product.  In cases where companies are working together to  ship products, there may be mutual agreement as to which company is the entity designated as importer of record.  The importer  of record will then be the company designated to pay taxes marked as being obligated to the importer of record.                Set this value to `true` to consider your company as the importer of record and collect these taxes.  Leave this value as false  or null and taxes will be calculated as if your company is not the importer of record.                This value may also be set during each transaction API call.  See `CreateTransaction()` for more information.                This field is user-selectable and should be provided when creating or updating a nexus object.
     *
     * @return $this
     */
    public function setIsSellerImporterOfRecord($is_seller_importer_of_record)
    {
        $this->container['is_seller_importer_of_record'] = $is_seller_importer_of_record;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string $tax_name A description of corresponding tax type applied to the nexus.                When a custom nexus is created, it'll have to be matched to a system nexus to be validated successfully. The matched system nexus has a  field to describe the tax type applied to it, that field will be copied over to the nexus that is being created.                This field is defined by Avalara. Its main purpose is to give a simple description of the tax type associated with the nexus so  users have a better understanding of the nexus when it is displayed.
     *
     * @return $this
     */
    public function setTaxName($tax_name)
    {
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Together\Taxes\Model\NexusParameterDetailModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Together\Taxes\Model\NexusParameterDetailModel[] $parameters List of nexus parameters.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


