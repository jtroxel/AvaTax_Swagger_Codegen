<?php
/**
 * CompanyModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CompanyModel Class Doc Comment
 *
 * @category Class
 * @description A company or business entity.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'account_id' => 'int',
        'parent_company_id' => 'int',
        'sst_pid' => 'string',
        'company_code' => 'string',
        'name' => 'string',
        'is_default' => 'bool',
        'default_location_id' => 'int',
        'is_active' => 'bool',
        'taxpayer_id_number' => 'string',
        'is_fein' => 'bool',
        'has_profile' => 'bool',
        'is_reporting_entity' => 'bool',
        'sst_effective_date' => '\DateTime',
        'default_country' => 'string',
        'base_currency_code' => 'string',
        'rounding_level_id' => 'string',
        'warnings_enabled' => 'bool',
        'is_test' => 'bool',
        'tax_dependency_level_id' => 'string',
        'in_progress' => 'bool',
        'business_identification_no' => 'string',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int',
        'contacts' => '\Together\Taxes\Model\ContactModel[]',
        'items' => '\Together\Taxes\Model\ItemModel[]',
        'locations' => '\Together\Taxes\Model\LocationModel[]',
        'nexus' => '\Together\Taxes\Model\NexusModel[]',
        'settings' => '\Together\Taxes\Model\SettingModel[]',
        'tax_codes' => '\Together\Taxes\Model\TaxCodeModel[]',
        'tax_rules' => '\Together\Taxes\Model\TaxRuleModel[]',
        'upcs' => '\Together\Taxes\Model\UPCModel[]',
        'non_reporting_child_companies' => '\Together\Taxes\Model\CompanyModel[]',
        'exempt_certs' => '\Together\Taxes\Model\EcmsModel[]',
        'moss_id' => 'string',
        'moss_country' => 'string',
        'parameters' => '\Together\Taxes\Model\CompanyParameterDetailModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'account_id' => 'int32',
        'parent_company_id' => 'int32',
        'sst_pid' => null,
        'company_code' => null,
        'name' => null,
        'is_default' => null,
        'default_location_id' => 'int32',
        'is_active' => null,
        'taxpayer_id_number' => null,
        'is_fein' => null,
        'has_profile' => null,
        'is_reporting_entity' => null,
        'sst_effective_date' => 'date',
        'default_country' => null,
        'base_currency_code' => null,
        'rounding_level_id' => null,
        'warnings_enabled' => null,
        'is_test' => null,
        'tax_dependency_level_id' => null,
        'in_progress' => null,
        'business_identification_no' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32',
        'contacts' => null,
        'items' => null,
        'locations' => null,
        'nexus' => null,
        'settings' => null,
        'tax_codes' => null,
        'tax_rules' => null,
        'upcs' => null,
        'non_reporting_child_companies' => null,
        'exempt_certs' => null,
        'moss_id' => null,
        'moss_country' => null,
        'parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_id' => 'accountId',
        'parent_company_id' => 'parentCompanyId',
        'sst_pid' => 'sstPid',
        'company_code' => 'companyCode',
        'name' => 'name',
        'is_default' => 'isDefault',
        'default_location_id' => 'defaultLocationId',
        'is_active' => 'isActive',
        'taxpayer_id_number' => 'taxpayerIdNumber',
        'is_fein' => 'isFein',
        'has_profile' => 'hasProfile',
        'is_reporting_entity' => 'isReportingEntity',
        'sst_effective_date' => 'sstEffectiveDate',
        'default_country' => 'defaultCountry',
        'base_currency_code' => 'baseCurrencyCode',
        'rounding_level_id' => 'roundingLevelId',
        'warnings_enabled' => 'warningsEnabled',
        'is_test' => 'isTest',
        'tax_dependency_level_id' => 'taxDependencyLevelId',
        'in_progress' => 'inProgress',
        'business_identification_no' => 'businessIdentificationNo',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId',
        'contacts' => 'contacts',
        'items' => 'items',
        'locations' => 'locations',
        'nexus' => 'nexus',
        'settings' => 'settings',
        'tax_codes' => 'taxCodes',
        'tax_rules' => 'taxRules',
        'upcs' => 'upcs',
        'non_reporting_child_companies' => 'nonReportingChildCompanies',
        'exempt_certs' => 'exemptCerts',
        'moss_id' => 'mossId',
        'moss_country' => 'mossCountry',
        'parameters' => 'parameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'parent_company_id' => 'setParentCompanyId',
        'sst_pid' => 'setSstPid',
        'company_code' => 'setCompanyCode',
        'name' => 'setName',
        'is_default' => 'setIsDefault',
        'default_location_id' => 'setDefaultLocationId',
        'is_active' => 'setIsActive',
        'taxpayer_id_number' => 'setTaxpayerIdNumber',
        'is_fein' => 'setIsFein',
        'has_profile' => 'setHasProfile',
        'is_reporting_entity' => 'setIsReportingEntity',
        'sst_effective_date' => 'setSstEffectiveDate',
        'default_country' => 'setDefaultCountry',
        'base_currency_code' => 'setBaseCurrencyCode',
        'rounding_level_id' => 'setRoundingLevelId',
        'warnings_enabled' => 'setWarningsEnabled',
        'is_test' => 'setIsTest',
        'tax_dependency_level_id' => 'setTaxDependencyLevelId',
        'in_progress' => 'setInProgress',
        'business_identification_no' => 'setBusinessIdentificationNo',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId',
        'contacts' => 'setContacts',
        'items' => 'setItems',
        'locations' => 'setLocations',
        'nexus' => 'setNexus',
        'settings' => 'setSettings',
        'tax_codes' => 'setTaxCodes',
        'tax_rules' => 'setTaxRules',
        'upcs' => 'setUpcs',
        'non_reporting_child_companies' => 'setNonReportingChildCompanies',
        'exempt_certs' => 'setExemptCerts',
        'moss_id' => 'setMossId',
        'moss_country' => 'setMossCountry',
        'parameters' => 'setParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'parent_company_id' => 'getParentCompanyId',
        'sst_pid' => 'getSstPid',
        'company_code' => 'getCompanyCode',
        'name' => 'getName',
        'is_default' => 'getIsDefault',
        'default_location_id' => 'getDefaultLocationId',
        'is_active' => 'getIsActive',
        'taxpayer_id_number' => 'getTaxpayerIdNumber',
        'is_fein' => 'getIsFein',
        'has_profile' => 'getHasProfile',
        'is_reporting_entity' => 'getIsReportingEntity',
        'sst_effective_date' => 'getSstEffectiveDate',
        'default_country' => 'getDefaultCountry',
        'base_currency_code' => 'getBaseCurrencyCode',
        'rounding_level_id' => 'getRoundingLevelId',
        'warnings_enabled' => 'getWarningsEnabled',
        'is_test' => 'getIsTest',
        'tax_dependency_level_id' => 'getTaxDependencyLevelId',
        'in_progress' => 'getInProgress',
        'business_identification_no' => 'getBusinessIdentificationNo',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId',
        'contacts' => 'getContacts',
        'items' => 'getItems',
        'locations' => 'getLocations',
        'nexus' => 'getNexus',
        'settings' => 'getSettings',
        'tax_codes' => 'getTaxCodes',
        'tax_rules' => 'getTaxRules',
        'upcs' => 'getUpcs',
        'non_reporting_child_companies' => 'getNonReportingChildCompanies',
        'exempt_certs' => 'getExemptCerts',
        'moss_id' => 'getMossId',
        'moss_country' => 'getMossCountry',
        'parameters' => 'getParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ROUNDING_LEVEL_ID_LINE = 'Line';
    const ROUNDING_LEVEL_ID_DOCUMENT = 'Document';
    const TAX_DEPENDENCY_LEVEL_ID_DOCUMENT = 'Document';
    const TAX_DEPENDENCY_LEVEL_ID_STATE = 'State';
    const TAX_DEPENDENCY_LEVEL_ID_TAX_REGION = 'TaxRegion';
    const TAX_DEPENDENCY_LEVEL_ID_ADDRESS = 'Address';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoundingLevelIdAllowableValues()
    {
        return [
            self::ROUNDING_LEVEL_ID_LINE,
            self::ROUNDING_LEVEL_ID_DOCUMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxDependencyLevelIdAllowableValues()
    {
        return [
            self::TAX_DEPENDENCY_LEVEL_ID_DOCUMENT,
            self::TAX_DEPENDENCY_LEVEL_ID_STATE,
            self::TAX_DEPENDENCY_LEVEL_ID_TAX_REGION,
            self::TAX_DEPENDENCY_LEVEL_ID_ADDRESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['parent_company_id'] = isset($data['parent_company_id']) ? $data['parent_company_id'] : null;
        $this->container['sst_pid'] = isset($data['sst_pid']) ? $data['sst_pid'] : null;
        $this->container['company_code'] = isset($data['company_code']) ? $data['company_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['default_location_id'] = isset($data['default_location_id']) ? $data['default_location_id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['taxpayer_id_number'] = isset($data['taxpayer_id_number']) ? $data['taxpayer_id_number'] : null;
        $this->container['is_fein'] = isset($data['is_fein']) ? $data['is_fein'] : null;
        $this->container['has_profile'] = isset($data['has_profile']) ? $data['has_profile'] : null;
        $this->container['is_reporting_entity'] = isset($data['is_reporting_entity']) ? $data['is_reporting_entity'] : null;
        $this->container['sst_effective_date'] = isset($data['sst_effective_date']) ? $data['sst_effective_date'] : null;
        $this->container['default_country'] = isset($data['default_country']) ? $data['default_country'] : null;
        $this->container['base_currency_code'] = isset($data['base_currency_code']) ? $data['base_currency_code'] : null;
        $this->container['rounding_level_id'] = isset($data['rounding_level_id']) ? $data['rounding_level_id'] : null;
        $this->container['warnings_enabled'] = isset($data['warnings_enabled']) ? $data['warnings_enabled'] : null;
        $this->container['is_test'] = isset($data['is_test']) ? $data['is_test'] : null;
        $this->container['tax_dependency_level_id'] = isset($data['tax_dependency_level_id']) ? $data['tax_dependency_level_id'] : null;
        $this->container['in_progress'] = isset($data['in_progress']) ? $data['in_progress'] : null;
        $this->container['business_identification_no'] = isset($data['business_identification_no']) ? $data['business_identification_no'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['nexus'] = isset($data['nexus']) ? $data['nexus'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['tax_codes'] = isset($data['tax_codes']) ? $data['tax_codes'] : null;
        $this->container['tax_rules'] = isset($data['tax_rules']) ? $data['tax_rules'] : null;
        $this->container['upcs'] = isset($data['upcs']) ? $data['upcs'] : null;
        $this->container['non_reporting_child_companies'] = isset($data['non_reporting_child_companies']) ? $data['non_reporting_child_companies'] : null;
        $this->container['exempt_certs'] = isset($data['exempt_certs']) ? $data['exempt_certs'] : null;
        $this->container['moss_id'] = isset($data['moss_id']) ? $data['moss_id'] : null;
        $this->container['moss_country'] = isset($data['moss_country']) ? $data['moss_country'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if (!is_null($this->container['sst_pid']) && (mb_strlen($this->container['sst_pid']) > 9)) {
            $invalidProperties[] = "invalid value for 'sst_pid', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['sst_pid']) && (mb_strlen($this->container['sst_pid']) < 0)) {
            $invalidProperties[] = "invalid value for 'sst_pid', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['taxpayer_id_number']) && (mb_strlen($this->container['taxpayer_id_number']) > 11)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id_number', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['taxpayer_id_number']) && (mb_strlen($this->container['taxpayer_id_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'taxpayer_id_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['default_country'] === null) {
            $invalidProperties[] = "'default_country' can't be null";
        }
        if ((mb_strlen($this->container['default_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'default_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['default_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'default_country', the character length must be bigger than or equal to 2.";
        }

        if (!is_null($this->container['base_currency_code']) && (mb_strlen($this->container['base_currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_currency_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['base_currency_code']) && (mb_strlen($this->container['base_currency_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'base_currency_code', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getRoundingLevelIdAllowableValues();
        if (!is_null($this->container['rounding_level_id']) && !in_array($this->container['rounding_level_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rounding_level_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxDependencyLevelIdAllowableValues();
        if (!is_null($this->container['tax_dependency_level_id']) && !in_array($this->container['tax_dependency_level_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_dependency_level_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['business_identification_no']) && (mb_strlen($this->container['business_identification_no']) > 25)) {
            $invalidProperties[] = "invalid value for 'business_identification_no', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['business_identification_no']) && (mb_strlen($this->container['business_identification_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'business_identification_no', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['moss_id']) && (mb_strlen($this->container['moss_id']) > 25)) {
            $invalidProperties[] = "invalid value for 'moss_id', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['moss_id']) && (mb_strlen($this->container['moss_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'moss_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['moss_country']) && (mb_strlen($this->container['moss_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'moss_country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['moss_country']) && (mb_strlen($this->container['moss_country']) < 0)) {
            $invalidProperties[] = "invalid value for 'moss_country', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this company.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id The unique ID number of the account this company belongs to.
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets parent_company_id
     *
     * @return int
     */
    public function getParentCompanyId()
    {
        return $this->container['parent_company_id'];
    }

    /**
     * Sets parent_company_id
     *
     * @param int $parent_company_id If this company is fully owned by another company, this is the unique identity of the parent company.
     *
     * @return $this
     */
    public function setParentCompanyId($parent_company_id)
    {
        $this->container['parent_company_id'] = $parent_company_id;

        return $this;
    }

    /**
     * Gets sst_pid
     *
     * @return string
     */
    public function getSstPid()
    {
        return $this->container['sst_pid'];
    }

    /**
     * Sets sst_pid
     *
     * @param string $sst_pid If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board.
     *
     * @return $this
     */
    public function setSstPid($sst_pid)
    {
        if (!is_null($sst_pid) && (mb_strlen($sst_pid) > 9)) {
            throw new \InvalidArgumentException('invalid length for $sst_pid when calling CompanyModel., must be smaller than or equal to 9.');
        }
        if (!is_null($sst_pid) && (mb_strlen($sst_pid) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sst_pid when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['sst_pid'] = $sst_pid;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string $company_code A unique code that references this company within your account.
     *
     * @return $this
     */
    public function setCompanyCode($company_code)
    {
        if (!is_null($company_code) && (mb_strlen($company_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CompanyModel., must be smaller than or equal to 25.');
        }
        if (!is_null($company_code) && (mb_strlen($company_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this company, as shown to customers.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyModel., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default This flag is true if this company is the default company for this account.  Only one company may be set as the default.
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets default_location_id
     *
     * @return int
     */
    public function getDefaultLocationId()
    {
        return $this->container['default_location_id'];
    }

    /**
     * Sets default_location_id
     *
     * @param int $default_location_id If set, this is the unique ID number of the default location for this company.
     *
     * @return $this
     */
    public function setDefaultLocationId($default_location_id)
    {
        $this->container['default_location_id'] = $default_location_id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets taxpayer_id_number
     *
     * @return string
     */
    public function getTaxpayerIdNumber()
    {
        return $this->container['taxpayer_id_number'];
    }

    /**
     * Sets taxpayer_id_number
     *
     * @param string $taxpayer_id_number For United States companies, this field contains your Taxpayer Identification Number.  This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,  or SSN for a Social Security Number if this company is a person.  This value is required if the address provided is inside the US and if you subscribed to the Avalara Managed Returns or SST Certified Service Provider service. Otherwise it is optional.
     *
     * @return $this
     */
    public function setTaxpayerIdNumber($taxpayer_id_number)
    {
        if (!is_null($taxpayer_id_number) && (mb_strlen($taxpayer_id_number) > 11)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id_number when calling CompanyModel., must be smaller than or equal to 11.');
        }
        if (!is_null($taxpayer_id_number) && (mb_strlen($taxpayer_id_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $taxpayer_id_number when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['taxpayer_id_number'] = $taxpayer_id_number;

        return $this;
    }

    /**
     * Gets is_fein
     *
     * @return bool
     */
    public function getIsFein()
    {
        return $this->container['is_fein'];
    }

    /**
     * Sets is_fein
     *
     * @param bool $is_fein Set this field to true if the taxPayerIdNumber is a FEIN.
     *
     * @return $this
     */
    public function setIsFein($is_fein)
    {
        $this->container['is_fein'] = $is_fein;

        return $this;
    }

    /**
     * Gets has_profile
     *
     * @return bool
     */
    public function getHasProfile()
    {
        return $this->container['has_profile'];
    }

    /**
     * Sets has_profile
     *
     * @param bool $has_profile Set this flag to true to give this company its own unique tax profile.  If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.  If this flag is false, this company will inherit all profile values from its parent.
     *
     * @return $this
     */
    public function setHasProfile($has_profile)
    {
        $this->container['has_profile'] = $has_profile;

        return $this;
    }

    /**
     * Gets is_reporting_entity
     *
     * @return bool
     */
    public function getIsReportingEntity()
    {
        return $this->container['is_reporting_entity'];
    }

    /**
     * Sets is_reporting_entity
     *
     * @param bool $is_reporting_entity Set this flag to true if this company must file its own tax returns.  For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company.
     *
     * @return $this
     */
    public function setIsReportingEntity($is_reporting_entity)
    {
        $this->container['is_reporting_entity'] = $is_reporting_entity;

        return $this;
    }

    /**
     * Gets sst_effective_date
     *
     * @return \DateTime
     */
    public function getSstEffectiveDate()
    {
        return $this->container['sst_effective_date'];
    }

    /**
     * Sets sst_effective_date
     *
     * @param \DateTime $sst_effective_date If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program.
     *
     * @return $this
     */
    public function setSstEffectiveDate($sst_effective_date)
    {
        $this->container['sst_effective_date'] = $sst_effective_date;

        return $this;
    }

    /**
     * Gets default_country
     *
     * @return string
     */
    public function getDefaultCountry()
    {
        return $this->container['default_country'];
    }

    /**
     * Sets default_country
     *
     * @param string $default_country The two character ISO-3166 country code of the default country for this company.
     *
     * @return $this
     */
    public function setDefaultCountry($default_country)
    {
        if ((mb_strlen($default_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $default_country when calling CompanyModel., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($default_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $default_country when calling CompanyModel., must be bigger than or equal to 2.');
        }

        $this->container['default_country'] = $default_country;

        return $this;
    }

    /**
     * Gets base_currency_code
     *
     * @return string
     */
    public function getBaseCurrencyCode()
    {
        return $this->container['base_currency_code'];
    }

    /**
     * Sets base_currency_code
     *
     * @param string $base_currency_code This is the three character ISO-4217 currency code of the default currency used by this company.
     *
     * @return $this
     */
    public function setBaseCurrencyCode($base_currency_code)
    {
        if (!is_null($base_currency_code) && (mb_strlen($base_currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_currency_code when calling CompanyModel., must be smaller than or equal to 3.');
        }
        if (!is_null($base_currency_code) && (mb_strlen($base_currency_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $base_currency_code when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['base_currency_code'] = $base_currency_code;

        return $this;
    }

    /**
     * Gets rounding_level_id
     *
     * @return string
     */
    public function getRoundingLevelId()
    {
        return $this->container['rounding_level_id'];
    }

    /**
     * Sets rounding_level_id
     *
     * @param string $rounding_level_id Indicates whether this company prefers to round amounts at the document level or line level.
     *
     * @return $this
     */
    public function setRoundingLevelId($rounding_level_id)
    {
        $allowedValues = $this->getRoundingLevelIdAllowableValues();
        if (!is_null($rounding_level_id) && !in_array($rounding_level_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rounding_level_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rounding_level_id'] = $rounding_level_id;

        return $this;
    }

    /**
     * Gets warnings_enabled
     *
     * @return bool
     */
    public function getWarningsEnabled()
    {
        return $this->container['warnings_enabled'];
    }

    /**
     * Sets warnings_enabled
     *
     * @param bool $warnings_enabled Set this value to true to receive warnings in API calls via SOAP.
     *
     * @return $this
     */
    public function setWarningsEnabled($warnings_enabled)
    {
        $this->container['warnings_enabled'] = $warnings_enabled;

        return $this;
    }

    /**
     * Gets is_test
     *
     * @return bool
     */
    public function getIsTest()
    {
        return $this->container['is_test'];
    }

    /**
     * Sets is_test
     *
     * @param bool $is_test Set this flag to true to indicate that this company is a test company.  If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes.
     *
     * @return $this
     */
    public function setIsTest($is_test)
    {
        $this->container['is_test'] = $is_test;

        return $this;
    }

    /**
     * Gets tax_dependency_level_id
     *
     * @return string
     */
    public function getTaxDependencyLevelId()
    {
        return $this->container['tax_dependency_level_id'];
    }

    /**
     * Sets tax_dependency_level_id
     *
     * @param string $tax_dependency_level_id Used to apply tax detail dependency at a jurisdiction level.
     *
     * @return $this
     */
    public function setTaxDependencyLevelId($tax_dependency_level_id)
    {
        $allowedValues = $this->getTaxDependencyLevelIdAllowableValues();
        if (!is_null($tax_dependency_level_id) && !in_array($tax_dependency_level_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_dependency_level_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_dependency_level_id'] = $tax_dependency_level_id;

        return $this;
    }

    /**
     * Gets in_progress
     *
     * @return bool
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     *
     * @param bool $in_progress Set this value to true to indicate that you are still working to finish configuring this company.  While this value is true, no tax reporting will occur and the company will not be usable for transactions.
     *
     * @return $this
     */
    public function setInProgress($in_progress)
    {
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets business_identification_no
     *
     * @return string
     */
    public function getBusinessIdentificationNo()
    {
        return $this->container['business_identification_no'];
    }

    /**
     * Sets business_identification_no
     *
     * @param string $business_identification_no Business Identification No
     *
     * @return $this
     */
    public function setBusinessIdentificationNo($business_identification_no)
    {
        if (!is_null($business_identification_no) && (mb_strlen($business_identification_no) > 25)) {
            throw new \InvalidArgumentException('invalid length for $business_identification_no when calling CompanyModel., must be smaller than or equal to 25.');
        }
        if (!is_null($business_identification_no) && (mb_strlen($business_identification_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $business_identification_no when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['business_identification_no'] = $business_identification_no;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Together\Taxes\Model\ContactModel[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Together\Taxes\Model\ContactModel[] $contacts Optional: A list of contacts defined for this company.  To fetch this list, add the query string `?$include=Contacts` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Together\Taxes\Model\ItemModel[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Together\Taxes\Model\ItemModel[] $items Optional: A list of items defined for this company.  To fetch this list, add the query string `?$include=Items` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \Together\Taxes\Model\LocationModel[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Together\Taxes\Model\LocationModel[] $locations Optional: A list of locations defined for this company.  To fetch this list, add the query string `?$include=Locations` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets nexus
     *
     * @return \Together\Taxes\Model\NexusModel[]
     */
    public function getNexus()
    {
        return $this->container['nexus'];
    }

    /**
     * Sets nexus
     *
     * @param \Together\Taxes\Model\NexusModel[] $nexus Optional: A list of nexus defined for this company.  To fetch this list, add the query string `?$include=Nexus` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setNexus($nexus)
    {
        $this->container['nexus'] = $nexus;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Together\Taxes\Model\SettingModel[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Together\Taxes\Model\SettingModel[] $settings Optional: A list of settings defined for this company.  To fetch this list, add the query string `?$include=Settings` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets tax_codes
     *
     * @return \Together\Taxes\Model\TaxCodeModel[]
     */
    public function getTaxCodes()
    {
        return $this->container['tax_codes'];
    }

    /**
     * Sets tax_codes
     *
     * @param \Together\Taxes\Model\TaxCodeModel[] $tax_codes Optional: A list of tax codes defined for this company.  To fetch this list, add the query string `?$include=TaxCodes` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setTaxCodes($tax_codes)
    {
        $this->container['tax_codes'] = $tax_codes;

        return $this;
    }

    /**
     * Gets tax_rules
     *
     * @return \Together\Taxes\Model\TaxRuleModel[]
     */
    public function getTaxRules()
    {
        return $this->container['tax_rules'];
    }

    /**
     * Sets tax_rules
     *
     * @param \Together\Taxes\Model\TaxRuleModel[] $tax_rules Optional: A list of tax rules defined for this company.  To fetch this list, add the query string `?$include=TaxRules` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setTaxRules($tax_rules)
    {
        $this->container['tax_rules'] = $tax_rules;

        return $this;
    }

    /**
     * Gets upcs
     *
     * @return \Together\Taxes\Model\UPCModel[]
     */
    public function getUpcs()
    {
        return $this->container['upcs'];
    }

    /**
     * Sets upcs
     *
     * @param \Together\Taxes\Model\UPCModel[] $upcs Optional: A list of UPCs defined for this company.  To fetch this list, add the query string `?$include=UPCs` to your URL.                When calling `CreateCompany`, you may provide a list of objects in this element and they will be created alongside the company.  The `UpdateCompany` API does not permit updating nested objects.
     *
     * @return $this
     */
    public function setUpcs($upcs)
    {
        $this->container['upcs'] = $upcs;

        return $this;
    }

    /**
     * Gets non_reporting_child_companies
     *
     * @return \Together\Taxes\Model\CompanyModel[]
     */
    public function getNonReportingChildCompanies()
    {
        return $this->container['non_reporting_child_companies'];
    }

    /**
     * Sets non_reporting_child_companies
     *
     * @param \Together\Taxes\Model\CompanyModel[] $non_reporting_child_companies Optional: A list of non reporting child companies associated with this company.  To fetch this list, add the query string `?$include=NonReportingChildren` to your URL.
     *
     * @return $this
     */
    public function setNonReportingChildCompanies($non_reporting_child_companies)
    {
        $this->container['non_reporting_child_companies'] = $non_reporting_child_companies;

        return $this;
    }

    /**
     * Gets exempt_certs
     *
     * @return \Together\Taxes\Model\EcmsModel[]
     */
    public function getExemptCerts()
    {
        return $this->container['exempt_certs'];
    }

    /**
     * Sets exempt_certs
     *
     * @param \Together\Taxes\Model\EcmsModel[] $exempt_certs DEPRECATED - Date: 9/15/2017, Version: 17.10, Message: Please use the `ListCertificates` API.
     *
     * @return $this
     */
    public function setExemptCerts($exempt_certs)
    {
        $this->container['exempt_certs'] = $exempt_certs;

        return $this;
    }

    /**
     * Gets moss_id
     *
     * @return string
     */
    public function getMossId()
    {
        return $this->container['moss_id'];
    }

    /**
     * Sets moss_id
     *
     * @param string $moss_id The unique identifier of the mini-one-stop-shop used for Value Added Tax (VAT) processing.
     *
     * @return $this
     */
    public function setMossId($moss_id)
    {
        if (!is_null($moss_id) && (mb_strlen($moss_id) > 25)) {
            throw new \InvalidArgumentException('invalid length for $moss_id when calling CompanyModel., must be smaller than or equal to 25.');
        }
        if (!is_null($moss_id) && (mb_strlen($moss_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $moss_id when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['moss_id'] = $moss_id;

        return $this;
    }

    /**
     * Gets moss_country
     *
     * @return string
     */
    public function getMossCountry()
    {
        return $this->container['moss_country'];
    }

    /**
     * Sets moss_country
     *
     * @param string $moss_country The country code of the mini-one-stop-shop used for Value Added Tax (VAT) processing.
     *
     * @return $this
     */
    public function setMossCountry($moss_country)
    {
        if (!is_null($moss_country) && (mb_strlen($moss_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $moss_country when calling CompanyModel., must be smaller than or equal to 2.');
        }
        if (!is_null($moss_country) && (mb_strlen($moss_country) < 0)) {
            throw new \InvalidArgumentException('invalid length for $moss_country when calling CompanyModel., must be bigger than or equal to 0.');
        }

        $this->container['moss_country'] = $moss_country;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Together\Taxes\Model\CompanyParameterDetailModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Together\Taxes\Model\CompanyParameterDetailModel[] $parameters The parameters of a company
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


