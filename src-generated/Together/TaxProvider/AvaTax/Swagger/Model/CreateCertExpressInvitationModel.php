<?php
/**
 * CreateCertExpressInvitationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CreateCertExpressInvitationModel Class Doc Comment
 *
 * @category Class
 * @description Represents an invitation for a customer to use CertExpress to self-report their own certificates.  This invitation is delivered by your choice of method, or you can present a hyperlink to the user  directly in your connector.  Your customer will be redirected to https://app.certexpress.com/ where  they can follow a step-by-step guide to enter information about their exemption certificates.  The  certificates entered will be recorded and automatically linked to their customer record.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateCertExpressInvitationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateCertExpressInvitationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipient' => 'string',
        'cover_letter_title' => 'string',
        'exposure_zones' => 'int[]',
        'exempt_reasons' => 'int[]',
        'delivery_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recipient' => null,
        'cover_letter_title' => null,
        'exposure_zones' => 'int32',
        'exempt_reasons' => 'int32',
        'delivery_method' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipient' => 'recipient',
        'cover_letter_title' => 'coverLetterTitle',
        'exposure_zones' => 'exposureZones',
        'exempt_reasons' => 'exemptReasons',
        'delivery_method' => 'deliveryMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipient' => 'setRecipient',
        'cover_letter_title' => 'setCoverLetterTitle',
        'exposure_zones' => 'setExposureZones',
        'exempt_reasons' => 'setExemptReasons',
        'delivery_method' => 'setDeliveryMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipient' => 'getRecipient',
        'cover_letter_title' => 'getCoverLetterTitle',
        'exposure_zones' => 'getExposureZones',
        'exempt_reasons' => 'getExemptReasons',
        'delivery_method' => 'getDeliveryMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_METHOD_EMAIL = 'Email';
    const DELIVERY_METHOD_FAX = 'Fax';
    const DELIVERY_METHOD_DOWNLOAD = 'Download';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryMethodAllowableValues()
    {
        return [
            self::DELIVERY_METHOD_EMAIL,
            self::DELIVERY_METHOD_FAX,
            self::DELIVERY_METHOD_DOWNLOAD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['cover_letter_title'] = isset($data['cover_letter_title']) ? $data['cover_letter_title'] : null;
        $this->container['exposure_zones'] = isset($data['exposure_zones']) ? $data['exposure_zones'] : null;
        $this->container['exempt_reasons'] = isset($data['exempt_reasons']) ? $data['exempt_reasons'] : null;
        $this->container['delivery_method'] = isset($data['delivery_method']) ? $data['delivery_method'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($this->container['delivery_method']) && !in_array($this->container['delivery_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient If the value of `deliveryMethod` is set to `Email`, please specify the email address of the recipient  for the request.
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets cover_letter_title
     *
     * @return string
     */
    public function getCoverLetterTitle()
    {
        return $this->container['cover_letter_title'];
    }

    /**
     * Sets cover_letter_title
     *
     * @param string $cover_letter_title If this invitation is sent via email or download, please specify the cover letter to use when building this  invitation.  For a list of cover letters, please call `ListCoverLetters`.
     *
     * @return $this
     */
    public function setCoverLetterTitle($cover_letter_title)
    {
        $this->container['cover_letter_title'] = $cover_letter_title;

        return $this;
    }

    /**
     * Gets exposure_zones
     *
     * @return int[]
     */
    public function getExposureZones()
    {
        return $this->container['exposure_zones'];
    }

    /**
     * Sets exposure_zones
     *
     * @param int[] $exposure_zones You may optionally specify a list of exposure zones to request in this CertExpress invitation.  If you list  more than one exposure zone, the customer will be prompted to provide an exemption certificate for each one.  If you do not provide a list of exposure zones, the customer will be prompted to select an exposure zone.                For a list of available exposure zones, please call `ListCertificateExposureZones`.
     *
     * @return $this
     */
    public function setExposureZones($exposure_zones)
    {
        $this->container['exposure_zones'] = $exposure_zones;

        return $this;
    }

    /**
     * Gets exempt_reasons
     *
     * @return int[]
     */
    public function getExemptReasons()
    {
        return $this->container['exempt_reasons'];
    }

    /**
     * Sets exempt_reasons
     *
     * @param int[] $exempt_reasons You may optionally specify a list of exemption reasons to pre-populate in this CertExpress invitation.  If you list exemption reasons, the customer will have part of their form already filled in when they visit  the CertExpress website.                For a list of available exemption reasons, please call `ListCertificateExemptReasons`.
     *
     * @return $this
     */
    public function setExemptReasons($exempt_reasons)
    {
        $this->container['exempt_reasons'] = $exempt_reasons;

        return $this;
    }

    /**
     * Gets delivery_method
     *
     * @return string
     */
    public function getDeliveryMethod()
    {
        return $this->container['delivery_method'];
    }

    /**
     * Sets delivery_method
     *
     * @param string $delivery_method Specify the type of invitation.  CertExpress invitations can be delivered via email, web link, or  facsimile.                * If you specify `Email`, the invitation will be delivered via email.  Please ask the customer to ensure that  * If you specify `Fax`, the invitation will be sent via fax to the customer's fax number on file.  * If you specify `Download`, the invitation will be prepared as a web link that you can display to the customer.
     *
     * @return $this
     */
    public function setDeliveryMethod($delivery_method)
    {
        $allowedValues = $this->getDeliveryMethodAllowableValues();
        if (!is_null($delivery_method) && !in_array($delivery_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_method'] = $delivery_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


