<?php
/**
 * CompanyDistanceThresholdModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * CompanyDistanceThresholdModel Class Doc Comment
 *
 * @category Class
 * @description A company-distance-threshold model indicates the distance between a company  and the taxing borders of various countries.  Distance thresholds are necessary  to correctly calculate some value-added taxes.                Distance thresholds only apply to sales of goods in certain countries.  A distance threshold  is applied for each ship-from/ship-to combination of countries.  The threshold amount is defined by  the ship-to country.                Generally, if you have exceeded a distance threshold for taxes between a pair of countries, your tax calculation  will be determined to be the rate in the destination country.  If you have not exceeded the threshold,  your tax calculation will be determined to be the rate in the origin country.                The amount of a threshold is not tracked or managed in AvaTax, but the decision of your tax compliance department  as to whether you have exceeded this threshold is maintained in this object.                By default, you are considered to have exceeded tax thresholds. If you wish to change this default, you can create  a company-distance-threshold object to select the correct behavior for this origin/destination tax calculation process.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyDistanceThresholdModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompanyDistanceThresholdModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'origin_country' => 'string',
        'destination_country' => 'string',
        'eff_date' => '\DateTime',
        'end_date' => '\DateTime',
        'threshold_exceeded' => 'bool',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'company_id' => 'int32',
        'origin_country' => null,
        'destination_country' => null,
        'eff_date' => 'date-time',
        'end_date' => 'date-time',
        'threshold_exceeded' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'origin_country' => 'originCountry',
        'destination_country' => 'destinationCountry',
        'eff_date' => 'effDate',
        'end_date' => 'endDate',
        'threshold_exceeded' => 'thresholdExceeded',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'origin_country' => 'setOriginCountry',
        'destination_country' => 'setDestinationCountry',
        'eff_date' => 'setEffDate',
        'end_date' => 'setEndDate',
        'threshold_exceeded' => 'setThresholdExceeded',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'origin_country' => 'getOriginCountry',
        'destination_country' => 'getDestinationCountry',
        'eff_date' => 'getEffDate',
        'end_date' => 'getEndDate',
        'threshold_exceeded' => 'getThresholdExceeded',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['origin_country'] = isset($data['origin_country']) ? $data['origin_country'] : null;
        $this->container['destination_country'] = isset($data['destination_country']) ? $data['destination_country'] : null;
        $this->container['eff_date'] = isset($data['eff_date']) ? $data['eff_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['threshold_exceeded'] = isset($data['threshold_exceeded']) ? $data['threshold_exceeded'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['origin_country'] === null) {
            $invalidProperties[] = "'origin_country' can't be null";
        }
        if ($this->container['destination_country'] === null) {
            $invalidProperties[] = "'destination_country' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ((mb_strlen($this->container['type']) > 20)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['type']) < 0)) {
            $invalidProperties[] = "invalid value for 'type', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id A unique ID number representing this distance threshold object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The ID number of the company that defined this distance threshold.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets origin_country
     *
     * @return string
     */
    public function getOriginCountry()
    {
        return $this->container['origin_country'];
    }

    /**
     * Sets origin_country
     *
     * @param string $origin_country The origin country for this threshold.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setOriginCountry($origin_country)
    {
        $this->container['origin_country'] = $origin_country;

        return $this;
    }

    /**
     * Gets destination_country
     *
     * @return string
     */
    public function getDestinationCountry()
    {
        return $this->container['destination_country'];
    }

    /**
     * Sets destination_country
     *
     * @param string $destination_country The destination country for this threshold.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setDestinationCountry($destination_country)
    {
        $this->container['destination_country'] = $destination_country;

        return $this;
    }

    /**
     * Gets eff_date
     *
     * @return \DateTime
     */
    public function getEffDate()
    {
        return $this->container['eff_date'];
    }

    /**
     * Sets eff_date
     *
     * @param \DateTime $eff_date For distance threshold values that change over time, this is the earliest date for which this distance  threshold is valid.  If null, this distance threshold is valid for all dates earlier than the `endDate` field.
     *
     * @return $this
     */
    public function setEffDate($eff_date)
    {
        $this->container['eff_date'] = $eff_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date For distance threshold values that change over time, this is the latest date for which this distance  threshold is valid.  If null, this distance threshold is valid for all dates later than the `effDate` field.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets threshold_exceeded
     *
     * @return bool
     */
    public function getThresholdExceeded()
    {
        return $this->container['threshold_exceeded'];
    }

    /**
     * Sets threshold_exceeded
     *
     * @param bool $threshold_exceeded True if your tax professional has determined that the value-added tax distance threshold is exceeded for this pair of countries.                If you set this value to `false`, your value added taxes will be calculated using the origin country.  Otherwise, value  added taxes will be calculated on the destination country.
     *
     * @return $this
     */
    public function setThresholdExceeded($threshold_exceeded)
    {
        $this->container['threshold_exceeded'] = $threshold_exceeded;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Indicates the distance threshold type.                This value can be either `Sale` or `Purchase`.
     *
     * @return $this
     */
    public function setType($type)
    {
        if ((mb_strlen($type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $type when calling CompanyDistanceThresholdModel., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $type when calling CompanyDistanceThresholdModel., must be bigger than or equal to 0.');
        }

        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


