<?php
/**
 * TransactionReferenceFieldModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * TransactionReferenceFieldModel Class Doc Comment
 *
 * @category Class
 * @description Represents a fixup change
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionReferenceFieldModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionReferenceFieldModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_id' => 'int',
        'reporting_location_code' => 'string',
        'line_detail_ser_codes' => '\Together\Taxes\Model\LineDetailSERCodeModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_id' => 'int64',
        'reporting_location_code' => null,
        'line_detail_ser_codes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
        'reporting_location_code' => 'reportingLocationCode',
        'line_detail_ser_codes' => 'lineDetailSerCodes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'reporting_location_code' => 'setReportingLocationCode',
        'line_detail_ser_codes' => 'setLineDetailSerCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'reporting_location_code' => 'getReportingLocationCode',
        'line_detail_ser_codes' => 'getLineDetailSerCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['reporting_location_code'] = isset($data['reporting_location_code']) ? $data['reporting_location_code'] : null;
        $this->container['line_detail_ser_codes'] = isset($data['line_detail_ser_codes']) ? $data['line_detail_ser_codes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_id'] === null) {
            $invalidProperties[] = "'document_id' can't be null";
        }
        if (!is_null($this->container['reporting_location_code']) && (mb_strlen($this->container['reporting_location_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'reporting_location_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reporting_location_code']) && (mb_strlen($this->container['reporting_location_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'reporting_location_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return int
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int $document_id The id of the transaction
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets reporting_location_code
     *
     * @return string
     */
    public function getReportingLocationCode()
    {
        return $this->container['reporting_location_code'];
    }

    /**
     * Sets reporting_location_code
     *
     * @param string $reporting_location_code Sets the sale location code (Outlet ID) for reporting this document to the tax authority.                This value is used by Avalara Managed Returns to group documents together by reporting locations  for tax authorities that require location-based reporting.
     *
     * @return $this
     */
    public function setReportingLocationCode($reporting_location_code)
    {
        if (!is_null($reporting_location_code) && (mb_strlen($reporting_location_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reporting_location_code when calling TransactionReferenceFieldModel., must be smaller than or equal to 50.');
        }
        if (!is_null($reporting_location_code) && (mb_strlen($reporting_location_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reporting_location_code when calling TransactionReferenceFieldModel., must be bigger than or equal to 0.');
        }

        $this->container['reporting_location_code'] = $reporting_location_code;

        return $this;
    }

    /**
     * Gets line_detail_ser_codes
     *
     * @return \Together\Taxes\Model\LineDetailSERCodeModel[]
     */
    public function getLineDetailSerCodes()
    {
        return $this->container['line_detail_ser_codes'];
    }

    /**
     * Sets line_detail_ser_codes
     *
     * @param \Together\Taxes\Model\LineDetailSERCodeModel[] $line_detail_ser_codes Reference field of the line details
     *
     * @return $this
     */
    public function setLineDetailSerCodes($line_detail_ser_codes)
    {
        $this->container['line_detail_ser_codes'] = $line_detail_ser_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


