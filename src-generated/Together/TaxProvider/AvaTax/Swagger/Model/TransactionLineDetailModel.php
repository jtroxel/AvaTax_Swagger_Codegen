<?php
/**
 * TransactionLineDetailModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * TransactionLineDetailModel Class Doc Comment
 *
 * @category Class
 * @description An individual tax detail element.  Represents the amount of tax calculated for a particular jurisdiction, for a particular line in an invoice.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionLineDetailModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionLineDetailModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'transaction_line_id' => 'int',
        'transaction_id' => 'int',
        'address_id' => 'int',
        'country' => 'string',
        'region' => 'string',
        'county_fips' => 'string',
        'state_fips' => 'string',
        'exempt_amount' => 'double',
        'exempt_reason_id' => 'int',
        'in_state' => 'bool',
        'juris_code' => 'string',
        'juris_name' => 'string',
        'jurisdiction_id' => 'int',
        'signature_code' => 'string',
        'state_assigned_no' => 'string',
        'juris_type' => 'string',
        'jurisdiction_type' => 'string',
        'non_taxable_amount' => 'double',
        'non_taxable_rule_id' => 'int',
        'non_taxable_type' => 'string',
        'rate' => 'double',
        'rate_rule_id' => 'int',
        'rate_source_id' => 'int',
        'ser_code' => 'string',
        'sourcing' => 'string',
        'tax' => 'double',
        'taxable_amount' => 'double',
        'tax_type' => 'string',
        'tax_sub_type_id' => 'string',
        'tax_type_group_id' => 'string',
        'tax_name' => 'string',
        'tax_authority_type_id' => 'int',
        'tax_region_id' => 'int',
        'tax_calculated' => 'double',
        'tax_override' => 'double',
        'rate_type' => 'string',
        'rate_type_code' => 'string',
        'taxable_units' => 'double',
        'non_taxable_units' => 'double',
        'exempt_units' => 'double',
        'unit_of_basis' => 'string',
        'is_non_pass_thru' => 'bool',
        'is_fee' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'transaction_line_id' => 'int64',
        'transaction_id' => 'int64',
        'address_id' => 'int64',
        'country' => null,
        'region' => null,
        'county_fips' => null,
        'state_fips' => null,
        'exempt_amount' => 'double',
        'exempt_reason_id' => 'int32',
        'in_state' => null,
        'juris_code' => null,
        'juris_name' => null,
        'jurisdiction_id' => 'int32',
        'signature_code' => null,
        'state_assigned_no' => null,
        'juris_type' => null,
        'jurisdiction_type' => null,
        'non_taxable_amount' => 'double',
        'non_taxable_rule_id' => 'int32',
        'non_taxable_type' => null,
        'rate' => 'double',
        'rate_rule_id' => 'int32',
        'rate_source_id' => 'int32',
        'ser_code' => null,
        'sourcing' => null,
        'tax' => 'double',
        'taxable_amount' => 'double',
        'tax_type' => null,
        'tax_sub_type_id' => null,
        'tax_type_group_id' => null,
        'tax_name' => null,
        'tax_authority_type_id' => 'int32',
        'tax_region_id' => 'int32',
        'tax_calculated' => 'double',
        'tax_override' => 'double',
        'rate_type' => null,
        'rate_type_code' => null,
        'taxable_units' => 'double',
        'non_taxable_units' => 'double',
        'exempt_units' => 'double',
        'unit_of_basis' => null,
        'is_non_pass_thru' => null,
        'is_fee' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_line_id' => 'transactionLineId',
        'transaction_id' => 'transactionId',
        'address_id' => 'addressId',
        'country' => 'country',
        'region' => 'region',
        'county_fips' => 'countyFIPS',
        'state_fips' => 'stateFIPS',
        'exempt_amount' => 'exemptAmount',
        'exempt_reason_id' => 'exemptReasonId',
        'in_state' => 'inState',
        'juris_code' => 'jurisCode',
        'juris_name' => 'jurisName',
        'jurisdiction_id' => 'jurisdictionId',
        'signature_code' => 'signatureCode',
        'state_assigned_no' => 'stateAssignedNo',
        'juris_type' => 'jurisType',
        'jurisdiction_type' => 'jurisdictionType',
        'non_taxable_amount' => 'nonTaxableAmount',
        'non_taxable_rule_id' => 'nonTaxableRuleId',
        'non_taxable_type' => 'nonTaxableType',
        'rate' => 'rate',
        'rate_rule_id' => 'rateRuleId',
        'rate_source_id' => 'rateSourceId',
        'ser_code' => 'serCode',
        'sourcing' => 'sourcing',
        'tax' => 'tax',
        'taxable_amount' => 'taxableAmount',
        'tax_type' => 'taxType',
        'tax_sub_type_id' => 'taxSubTypeId',
        'tax_type_group_id' => 'taxTypeGroupId',
        'tax_name' => 'taxName',
        'tax_authority_type_id' => 'taxAuthorityTypeId',
        'tax_region_id' => 'taxRegionId',
        'tax_calculated' => 'taxCalculated',
        'tax_override' => 'taxOverride',
        'rate_type' => 'rateType',
        'rate_type_code' => 'rateTypeCode',
        'taxable_units' => 'taxableUnits',
        'non_taxable_units' => 'nonTaxableUnits',
        'exempt_units' => 'exemptUnits',
        'unit_of_basis' => 'unitOfBasis',
        'is_non_pass_thru' => 'isNonPassThru',
        'is_fee' => 'isFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_line_id' => 'setTransactionLineId',
        'transaction_id' => 'setTransactionId',
        'address_id' => 'setAddressId',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'county_fips' => 'setCountyFips',
        'state_fips' => 'setStateFips',
        'exempt_amount' => 'setExemptAmount',
        'exempt_reason_id' => 'setExemptReasonId',
        'in_state' => 'setInState',
        'juris_code' => 'setJurisCode',
        'juris_name' => 'setJurisName',
        'jurisdiction_id' => 'setJurisdictionId',
        'signature_code' => 'setSignatureCode',
        'state_assigned_no' => 'setStateAssignedNo',
        'juris_type' => 'setJurisType',
        'jurisdiction_type' => 'setJurisdictionType',
        'non_taxable_amount' => 'setNonTaxableAmount',
        'non_taxable_rule_id' => 'setNonTaxableRuleId',
        'non_taxable_type' => 'setNonTaxableType',
        'rate' => 'setRate',
        'rate_rule_id' => 'setRateRuleId',
        'rate_source_id' => 'setRateSourceId',
        'ser_code' => 'setSerCode',
        'sourcing' => 'setSourcing',
        'tax' => 'setTax',
        'taxable_amount' => 'setTaxableAmount',
        'tax_type' => 'setTaxType',
        'tax_sub_type_id' => 'setTaxSubTypeId',
        'tax_type_group_id' => 'setTaxTypeGroupId',
        'tax_name' => 'setTaxName',
        'tax_authority_type_id' => 'setTaxAuthorityTypeId',
        'tax_region_id' => 'setTaxRegionId',
        'tax_calculated' => 'setTaxCalculated',
        'tax_override' => 'setTaxOverride',
        'rate_type' => 'setRateType',
        'rate_type_code' => 'setRateTypeCode',
        'taxable_units' => 'setTaxableUnits',
        'non_taxable_units' => 'setNonTaxableUnits',
        'exempt_units' => 'setExemptUnits',
        'unit_of_basis' => 'setUnitOfBasis',
        'is_non_pass_thru' => 'setIsNonPassThru',
        'is_fee' => 'setIsFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_line_id' => 'getTransactionLineId',
        'transaction_id' => 'getTransactionId',
        'address_id' => 'getAddressId',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'county_fips' => 'getCountyFips',
        'state_fips' => 'getStateFips',
        'exempt_amount' => 'getExemptAmount',
        'exempt_reason_id' => 'getExemptReasonId',
        'in_state' => 'getInState',
        'juris_code' => 'getJurisCode',
        'juris_name' => 'getJurisName',
        'jurisdiction_id' => 'getJurisdictionId',
        'signature_code' => 'getSignatureCode',
        'state_assigned_no' => 'getStateAssignedNo',
        'juris_type' => 'getJurisType',
        'jurisdiction_type' => 'getJurisdictionType',
        'non_taxable_amount' => 'getNonTaxableAmount',
        'non_taxable_rule_id' => 'getNonTaxableRuleId',
        'non_taxable_type' => 'getNonTaxableType',
        'rate' => 'getRate',
        'rate_rule_id' => 'getRateRuleId',
        'rate_source_id' => 'getRateSourceId',
        'ser_code' => 'getSerCode',
        'sourcing' => 'getSourcing',
        'tax' => 'getTax',
        'taxable_amount' => 'getTaxableAmount',
        'tax_type' => 'getTaxType',
        'tax_sub_type_id' => 'getTaxSubTypeId',
        'tax_type_group_id' => 'getTaxTypeGroupId',
        'tax_name' => 'getTaxName',
        'tax_authority_type_id' => 'getTaxAuthorityTypeId',
        'tax_region_id' => 'getTaxRegionId',
        'tax_calculated' => 'getTaxCalculated',
        'tax_override' => 'getTaxOverride',
        'rate_type' => 'getRateType',
        'rate_type_code' => 'getRateTypeCode',
        'taxable_units' => 'getTaxableUnits',
        'non_taxable_units' => 'getNonTaxableUnits',
        'exempt_units' => 'getExemptUnits',
        'unit_of_basis' => 'getUnitOfBasis',
        'is_non_pass_thru' => 'getIsNonPassThru',
        'is_fee' => 'getIsFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURIS_TYPE_STA = 'STA';
    const JURIS_TYPE_CTY = 'CTY';
    const JURIS_TYPE_CIT = 'CIT';
    const JURIS_TYPE_STJ = 'STJ';
    const JURIS_TYPE_CNT = 'CNT';
    const JURISDICTION_TYPE_COUNTRY = 'Country';
    const JURISDICTION_TYPE_STATE = 'State';
    const JURISDICTION_TYPE_COUNTY = 'County';
    const JURISDICTION_TYPE_CITY = 'City';
    const JURISDICTION_TYPE_SPECIAL = 'Special';
    const NON_TAXABLE_TYPE_RATE_RULE = 'RateRule';
    const NON_TAXABLE_TYPE_RATE_OVERRIDE_RULE = 'RateOverrideRule';
    const NON_TAXABLE_TYPE_BASE_RULE = 'BaseRule';
    const NON_TAXABLE_TYPE_EXEMPT_ENTITY_RULE = 'ExemptEntityRule';
    const NON_TAXABLE_TYPE_PRODUCT_TAXABILITY_RULE = 'ProductTaxabilityRule';
    const NON_TAXABLE_TYPE_NEXUS_RULE = 'NexusRule';
    const SOURCING_MIXED = 'Mixed';
    const SOURCING_DESTINATION = 'Destination';
    const SOURCING_ORIGIN = 'Origin';
    const RATE_TYPE_REDUCED_A = 'ReducedA';
    const RATE_TYPE_REDUCED_B = 'ReducedB';
    const RATE_TYPE_FOOD = 'Food';
    const RATE_TYPE_GENERAL = 'General';
    const RATE_TYPE_INCREASED_STANDARD = 'IncreasedStandard';
    const RATE_TYPE_LINEN_RENTAL = 'LinenRental';
    const RATE_TYPE_MEDICAL = 'Medical';
    const RATE_TYPE_PARKING = 'Parking';
    const RATE_TYPE_SUPER_REDUCED = 'SuperReduced';
    const RATE_TYPE_REDUCED_R = 'ReducedR';
    const RATE_TYPE_STANDARD = 'Standard';
    const RATE_TYPE_LEASING = 'Leasing';
    const RATE_TYPE_LEASING_LOW = 'LeasingLow';
    const RATE_TYPE_SERVICES = 'Services';
    const RATE_TYPE_ZERO = 'Zero';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisTypeAllowableValues()
    {
        return [
            self::JURIS_TYPE_STA,
            self::JURIS_TYPE_CTY,
            self::JURIS_TYPE_CIT,
            self::JURIS_TYPE_STJ,
            self::JURIS_TYPE_CNT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionTypeAllowableValues()
    {
        return [
            self::JURISDICTION_TYPE_COUNTRY,
            self::JURISDICTION_TYPE_STATE,
            self::JURISDICTION_TYPE_COUNTY,
            self::JURISDICTION_TYPE_CITY,
            self::JURISDICTION_TYPE_SPECIAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNonTaxableTypeAllowableValues()
    {
        return [
            self::NON_TAXABLE_TYPE_RATE_RULE,
            self::NON_TAXABLE_TYPE_RATE_OVERRIDE_RULE,
            self::NON_TAXABLE_TYPE_BASE_RULE,
            self::NON_TAXABLE_TYPE_EXEMPT_ENTITY_RULE,
            self::NON_TAXABLE_TYPE_PRODUCT_TAXABILITY_RULE,
            self::NON_TAXABLE_TYPE_NEXUS_RULE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourcingAllowableValues()
    {
        return [
            self::SOURCING_MIXED,
            self::SOURCING_DESTINATION,
            self::SOURCING_ORIGIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTypeAllowableValues()
    {
        return [
            self::RATE_TYPE_REDUCED_A,
            self::RATE_TYPE_REDUCED_B,
            self::RATE_TYPE_FOOD,
            self::RATE_TYPE_GENERAL,
            self::RATE_TYPE_INCREASED_STANDARD,
            self::RATE_TYPE_LINEN_RENTAL,
            self::RATE_TYPE_MEDICAL,
            self::RATE_TYPE_PARKING,
            self::RATE_TYPE_SUPER_REDUCED,
            self::RATE_TYPE_REDUCED_R,
            self::RATE_TYPE_STANDARD,
            self::RATE_TYPE_LEASING,
            self::RATE_TYPE_LEASING_LOW,
            self::RATE_TYPE_SERVICES,
            self::RATE_TYPE_ZERO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['transaction_line_id'] = isset($data['transaction_line_id']) ? $data['transaction_line_id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['county_fips'] = isset($data['county_fips']) ? $data['county_fips'] : null;
        $this->container['state_fips'] = isset($data['state_fips']) ? $data['state_fips'] : null;
        $this->container['exempt_amount'] = isset($data['exempt_amount']) ? $data['exempt_amount'] : null;
        $this->container['exempt_reason_id'] = isset($data['exempt_reason_id']) ? $data['exempt_reason_id'] : null;
        $this->container['in_state'] = isset($data['in_state']) ? $data['in_state'] : null;
        $this->container['juris_code'] = isset($data['juris_code']) ? $data['juris_code'] : null;
        $this->container['juris_name'] = isset($data['juris_name']) ? $data['juris_name'] : null;
        $this->container['jurisdiction_id'] = isset($data['jurisdiction_id']) ? $data['jurisdiction_id'] : null;
        $this->container['signature_code'] = isset($data['signature_code']) ? $data['signature_code'] : null;
        $this->container['state_assigned_no'] = isset($data['state_assigned_no']) ? $data['state_assigned_no'] : null;
        $this->container['juris_type'] = isset($data['juris_type']) ? $data['juris_type'] : null;
        $this->container['jurisdiction_type'] = isset($data['jurisdiction_type']) ? $data['jurisdiction_type'] : null;
        $this->container['non_taxable_amount'] = isset($data['non_taxable_amount']) ? $data['non_taxable_amount'] : null;
        $this->container['non_taxable_rule_id'] = isset($data['non_taxable_rule_id']) ? $data['non_taxable_rule_id'] : null;
        $this->container['non_taxable_type'] = isset($data['non_taxable_type']) ? $data['non_taxable_type'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['rate_rule_id'] = isset($data['rate_rule_id']) ? $data['rate_rule_id'] : null;
        $this->container['rate_source_id'] = isset($data['rate_source_id']) ? $data['rate_source_id'] : null;
        $this->container['ser_code'] = isset($data['ser_code']) ? $data['ser_code'] : null;
        $this->container['sourcing'] = isset($data['sourcing']) ? $data['sourcing'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['tax_sub_type_id'] = isset($data['tax_sub_type_id']) ? $data['tax_sub_type_id'] : null;
        $this->container['tax_type_group_id'] = isset($data['tax_type_group_id']) ? $data['tax_type_group_id'] : null;
        $this->container['tax_name'] = isset($data['tax_name']) ? $data['tax_name'] : null;
        $this->container['tax_authority_type_id'] = isset($data['tax_authority_type_id']) ? $data['tax_authority_type_id'] : null;
        $this->container['tax_region_id'] = isset($data['tax_region_id']) ? $data['tax_region_id'] : null;
        $this->container['tax_calculated'] = isset($data['tax_calculated']) ? $data['tax_calculated'] : null;
        $this->container['tax_override'] = isset($data['tax_override']) ? $data['tax_override'] : null;
        $this->container['rate_type'] = isset($data['rate_type']) ? $data['rate_type'] : null;
        $this->container['rate_type_code'] = isset($data['rate_type_code']) ? $data['rate_type_code'] : null;
        $this->container['taxable_units'] = isset($data['taxable_units']) ? $data['taxable_units'] : null;
        $this->container['non_taxable_units'] = isset($data['non_taxable_units']) ? $data['non_taxable_units'] : null;
        $this->container['exempt_units'] = isset($data['exempt_units']) ? $data['exempt_units'] : null;
        $this->container['unit_of_basis'] = isset($data['unit_of_basis']) ? $data['unit_of_basis'] : null;
        $this->container['is_non_pass_thru'] = isset($data['is_non_pass_thru']) ? $data['is_non_pass_thru'] : null;
        $this->container['is_fee'] = isset($data['is_fee']) ? $data['is_fee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) < 2)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be bigger than or equal to 2.";
        }

        $allowedValues = $this->getJurisTypeAllowableValues();
        if (!is_null($this->container['juris_type']) && !in_array($this->container['juris_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'juris_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($this->container['jurisdiction_type']) && !in_array($this->container['jurisdiction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jurisdiction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNonTaxableTypeAllowableValues();
        if (!is_null($this->container['non_taxable_type']) && !in_array($this->container['non_taxable_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'non_taxable_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($this->container['sourcing']) && !in_array($this->container['sourcing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sourcing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($this->container['rate_type']) && !in_array($this->container['rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rate_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['rate_type_code']) && (mb_strlen($this->container['rate_type_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'rate_type_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['rate_type_code']) && (mb_strlen($this->container['rate_type_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'rate_type_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this tax detail.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_line_id
     *
     * @return int
     */
    public function getTransactionLineId()
    {
        return $this->container['transaction_line_id'];
    }

    /**
     * Sets transaction_line_id
     *
     * @param int $transaction_line_id The unique ID number of the line within this transaction.
     *
     * @return $this
     */
    public function setTransactionLineId($transaction_line_id)
    {
        $this->container['transaction_line_id'] = $transaction_line_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param int $transaction_id The unique ID number of this transaction.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param int $address_id The unique ID number of the address used for this tax detail.
     *
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The two character ISO 3166 country code of the country where this tax detail is assigned.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (mb_strlen($country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling TransactionLineDetailModel., must be smaller than or equal to 2.');
        }
        if (!is_null($country) && (mb_strlen($country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $country when calling TransactionLineDetailModel., must be bigger than or equal to 2.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The two-or-three character ISO region code for the region where this tax detail is assigned.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets county_fips
     *
     * @return string
     */
    public function getCountyFips()
    {
        return $this->container['county_fips'];
    }

    /**
     * Sets county_fips
     *
     * @param string $county_fips For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned.
     *
     * @return $this
     */
    public function setCountyFips($county_fips)
    {
        $this->container['county_fips'] = $county_fips;

        return $this;
    }

    /**
     * Gets state_fips
     *
     * @return string
     */
    public function getStateFips()
    {
        return $this->container['state_fips'];
    }

    /**
     * Sets state_fips
     *
     * @param string $state_fips For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned.
     *
     * @return $this
     */
    public function setStateFips($state_fips)
    {
        $this->container['state_fips'] = $state_fips;

        return $this;
    }

    /**
     * Gets exempt_amount
     *
     * @return double
     */
    public function getExemptAmount()
    {
        return $this->container['exempt_amount'];
    }

    /**
     * Sets exempt_amount
     *
     * @param double $exempt_amount The amount of this line that was considered exempt in this tax detail.
     *
     * @return $this
     */
    public function setExemptAmount($exempt_amount)
    {
        $this->container['exempt_amount'] = $exempt_amount;

        return $this;
    }

    /**
     * Gets exempt_reason_id
     *
     * @return int
     */
    public function getExemptReasonId()
    {
        return $this->container['exempt_reason_id'];
    }

    /**
     * Sets exempt_reason_id
     *
     * @param int $exempt_reason_id The unique ID number of the exemption reason for this tax detail.
     *
     * @return $this
     */
    public function setExemptReasonId($exempt_reason_id)
    {
        $this->container['exempt_reason_id'] = $exempt_reason_id;

        return $this;
    }

    /**
     * Gets in_state
     *
     * @return bool
     */
    public function getInState()
    {
        return $this->container['in_state'];
    }

    /**
     * Sets in_state
     *
     * @param bool $in_state True if this detail element represented an in-state transaction.
     *
     * @return $this
     */
    public function setInState($in_state)
    {
        $this->container['in_state'] = $in_state;

        return $this;
    }

    /**
     * Gets juris_code
     *
     * @return string
     */
    public function getJurisCode()
    {
        return $this->container['juris_code'];
    }

    /**
     * Sets juris_code
     *
     * @param string $juris_code The code of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setJurisCode($juris_code)
    {
        $this->container['juris_code'] = $juris_code;

        return $this;
    }

    /**
     * Gets juris_name
     *
     * @return string
     */
    public function getJurisName()
    {
        return $this->container['juris_name'];
    }

    /**
     * Sets juris_name
     *
     * @param string $juris_name The name of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setJurisName($juris_name)
    {
        $this->container['juris_name'] = $juris_name;

        return $this;
    }

    /**
     * Gets jurisdiction_id
     *
     * @return int
     */
    public function getJurisdictionId()
    {
        return $this->container['jurisdiction_id'];
    }

    /**
     * Sets jurisdiction_id
     *
     * @param int $jurisdiction_id The unique ID number of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setJurisdictionId($jurisdiction_id)
    {
        $this->container['jurisdiction_id'] = $jurisdiction_id;

        return $this;
    }

    /**
     * Gets signature_code
     *
     * @return string
     */
    public function getSignatureCode()
    {
        return $this->container['signature_code'];
    }

    /**
     * Sets signature_code
     *
     * @param string $signature_code The Avalara-specified signature code of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setSignatureCode($signature_code)
    {
        $this->container['signature_code'] = $signature_code;

        return $this;
    }

    /**
     * Gets state_assigned_no
     *
     * @return string
     */
    public function getStateAssignedNo()
    {
        return $this->container['state_assigned_no'];
    }

    /**
     * Sets state_assigned_no
     *
     * @param string $state_assigned_no The state assigned number of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setStateAssignedNo($state_assigned_no)
    {
        $this->container['state_assigned_no'] = $state_assigned_no;

        return $this;
    }

    /**
     * Gets juris_type
     *
     * @return string
     */
    public function getJurisType()
    {
        return $this->container['juris_type'];
    }

    /**
     * Sets juris_type
     *
     * @param string $juris_type DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Use jurisdictionTypeId instead.  The type of the jurisdiction to which this tax detail applies.
     *
     * @return $this
     */
    public function setJurisType($juris_type)
    {
        $allowedValues = $this->getJurisTypeAllowableValues();
        if (!is_null($juris_type) && !in_array($juris_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'juris_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['juris_type'] = $juris_type;

        return $this;
    }

    /**
     * Gets jurisdiction_type
     *
     * @return string
     */
    public function getJurisdictionType()
    {
        return $this->container['jurisdiction_type'];
    }

    /**
     * Sets jurisdiction_type
     *
     * @param string $jurisdiction_type The type of the jurisdiction in which this tax detail applies.
     *
     * @return $this
     */
    public function setJurisdictionType($jurisdiction_type)
    {
        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($jurisdiction_type) && !in_array($jurisdiction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jurisdiction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction_type'] = $jurisdiction_type;

        return $this;
    }

    /**
     * Gets non_taxable_amount
     *
     * @return double
     */
    public function getNonTaxableAmount()
    {
        return $this->container['non_taxable_amount'];
    }

    /**
     * Sets non_taxable_amount
     *
     * @param double $non_taxable_amount The amount of this line item that was considered nontaxable in this tax detail.
     *
     * @return $this
     */
    public function setNonTaxableAmount($non_taxable_amount)
    {
        $this->container['non_taxable_amount'] = $non_taxable_amount;

        return $this;
    }

    /**
     * Gets non_taxable_rule_id
     *
     * @return int
     */
    public function getNonTaxableRuleId()
    {
        return $this->container['non_taxable_rule_id'];
    }

    /**
     * Sets non_taxable_rule_id
     *
     * @param int $non_taxable_rule_id The rule according to which portion of this detail was considered nontaxable.
     *
     * @return $this
     */
    public function setNonTaxableRuleId($non_taxable_rule_id)
    {
        $this->container['non_taxable_rule_id'] = $non_taxable_rule_id;

        return $this;
    }

    /**
     * Gets non_taxable_type
     *
     * @return string
     */
    public function getNonTaxableType()
    {
        return $this->container['non_taxable_type'];
    }

    /**
     * Sets non_taxable_type
     *
     * @param string $non_taxable_type The type of nontaxability that was applied to this tax detail.
     *
     * @return $this
     */
    public function setNonTaxableType($non_taxable_type)
    {
        $allowedValues = $this->getNonTaxableTypeAllowableValues();
        if (!is_null($non_taxable_type) && !in_array($non_taxable_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'non_taxable_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['non_taxable_type'] = $non_taxable_type;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate The rate at which this tax detail was calculated.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets rate_rule_id
     *
     * @return int
     */
    public function getRateRuleId()
    {
        return $this->container['rate_rule_id'];
    }

    /**
     * Sets rate_rule_id
     *
     * @param int $rate_rule_id The unique ID number of the rule according to which this tax detail was calculated.
     *
     * @return $this
     */
    public function setRateRuleId($rate_rule_id)
    {
        $this->container['rate_rule_id'] = $rate_rule_id;

        return $this;
    }

    /**
     * Gets rate_source_id
     *
     * @return int
     */
    public function getRateSourceId()
    {
        return $this->container['rate_source_id'];
    }

    /**
     * Sets rate_source_id
     *
     * @param int $rate_source_id The unique ID number of the source of the rate according to which this tax detail was calculated.
     *
     * @return $this
     */
    public function setRateSourceId($rate_source_id)
    {
        $this->container['rate_source_id'] = $rate_source_id;

        return $this;
    }

    /**
     * Gets ser_code
     *
     * @return string
     */
    public function getSerCode()
    {
        return $this->container['ser_code'];
    }

    /**
     * Sets ser_code
     *
     * @param string $ser_code For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied.
     *
     * @return $this
     */
    public function setSerCode($ser_code)
    {
        $this->container['ser_code'] = $ser_code;

        return $this;
    }

    /**
     * Gets sourcing
     *
     * @return string
     */
    public function getSourcing()
    {
        return $this->container['sourcing'];
    }

    /**
     * Sets sourcing
     *
     * @param string $sourcing Indicates whether this tax detail applies to the origin or destination of the transaction.
     *
     * @return $this
     */
    public function setSourcing($sourcing)
    {
        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($sourcing) && !in_array($sourcing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sourcing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sourcing'] = $sourcing;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax The amount of tax for this tax detail.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return double
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param double $taxable_amount The taxable amount of this tax detail.
     *
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets tax_sub_type_id
     *
     * @return string
     */
    public function getTaxSubTypeId()
    {
        return $this->container['tax_sub_type_id'];
    }

    /**
     * Sets tax_sub_type_id
     *
     * @param string $tax_sub_type_id The id of the tax subtype.
     *
     * @return $this
     */
    public function setTaxSubTypeId($tax_sub_type_id)
    {
        $this->container['tax_sub_type_id'] = $tax_sub_type_id;

        return $this;
    }

    /**
     * Gets tax_type_group_id
     *
     * @return string
     */
    public function getTaxTypeGroupId()
    {
        return $this->container['tax_type_group_id'];
    }

    /**
     * Sets tax_type_group_id
     *
     * @param string $tax_type_group_id The id of the tax type group.
     *
     * @return $this
     */
    public function setTaxTypeGroupId($tax_type_group_id)
    {
        $this->container['tax_type_group_id'] = $tax_type_group_id;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string $tax_name The name of the tax against which this tax amount was calculated.
     *
     * @return $this
     */
    public function setTaxName($tax_name)
    {
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets tax_authority_type_id
     *
     * @return int
     */
    public function getTaxAuthorityTypeId()
    {
        return $this->container['tax_authority_type_id'];
    }

    /**
     * Sets tax_authority_type_id
     *
     * @param int $tax_authority_type_id The type of the tax authority to which this tax will be remitted.
     *
     * @return $this
     */
    public function setTaxAuthorityTypeId($tax_authority_type_id)
    {
        $this->container['tax_authority_type_id'] = $tax_authority_type_id;

        return $this;
    }

    /**
     * Gets tax_region_id
     *
     * @return int
     */
    public function getTaxRegionId()
    {
        return $this->container['tax_region_id'];
    }

    /**
     * Sets tax_region_id
     *
     * @param int $tax_region_id The unique ID number of the tax region.
     *
     * @return $this
     */
    public function setTaxRegionId($tax_region_id)
    {
        $this->container['tax_region_id'] = $tax_region_id;

        return $this;
    }

    /**
     * Gets tax_calculated
     *
     * @return double
     */
    public function getTaxCalculated()
    {
        return $this->container['tax_calculated'];
    }

    /**
     * Sets tax_calculated
     *
     * @param double $tax_calculated The amount of tax that AvaTax calculated.  If an override for tax amount is used, there may be a difference between the tax  field which applies your override, and the this amount that is calculated without override.
     *
     * @return $this
     */
    public function setTaxCalculated($tax_calculated)
    {
        $this->container['tax_calculated'] = $tax_calculated;

        return $this;
    }

    /**
     * Gets tax_override
     *
     * @return double
     */
    public function getTaxOverride()
    {
        return $this->container['tax_override'];
    }

    /**
     * Sets tax_override
     *
     * @param double $tax_override The amount of tax override that was specified for this tax line.
     *
     * @return $this
     */
    public function setTaxOverride($tax_override)
    {
        $this->container['tax_override'] = $tax_override;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string $rate_type DEPRECATED - Date: 12/20/2017, Version: 18.1, Message: Please use rateTypeCode instead.  The rate type for this tax detail.
     *
     * @return $this
     */
    public function setRateType($rate_type)
    {
        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($rate_type) && !in_array($rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rate_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets rate_type_code
     *
     * @return string
     */
    public function getRateTypeCode()
    {
        return $this->container['rate_type_code'];
    }

    /**
     * Sets rate_type_code
     *
     * @param string $rate_type_code Indicates the code of the rate type that was used to calculate this tax detail.  Use [ListRateTypesByCountry](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListRateTypesByCountry/) API for a full list of rate type codes.
     *
     * @return $this
     */
    public function setRateTypeCode($rate_type_code)
    {
        if (!is_null($rate_type_code) && (mb_strlen($rate_type_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $rate_type_code when calling TransactionLineDetailModel., must be smaller than or equal to 25.');
        }
        if (!is_null($rate_type_code) && (mb_strlen($rate_type_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $rate_type_code when calling TransactionLineDetailModel., must be bigger than or equal to 0.');
        }

        $this->container['rate_type_code'] = $rate_type_code;

        return $this;
    }

    /**
     * Gets taxable_units
     *
     * @return double
     */
    public function getTaxableUnits()
    {
        return $this->container['taxable_units'];
    }

    /**
     * Sets taxable_units
     *
     * @param double $taxable_units Number of units in this line item that were calculated to be taxable according to this rate detail.
     *
     * @return $this
     */
    public function setTaxableUnits($taxable_units)
    {
        $this->container['taxable_units'] = $taxable_units;

        return $this;
    }

    /**
     * Gets non_taxable_units
     *
     * @return double
     */
    public function getNonTaxableUnits()
    {
        return $this->container['non_taxable_units'];
    }

    /**
     * Sets non_taxable_units
     *
     * @param double $non_taxable_units Number of units in this line item that were calculated to be nontaxable according to this rate detail.
     *
     * @return $this
     */
    public function setNonTaxableUnits($non_taxable_units)
    {
        $this->container['non_taxable_units'] = $non_taxable_units;

        return $this;
    }

    /**
     * Gets exempt_units
     *
     * @return double
     */
    public function getExemptUnits()
    {
        return $this->container['exempt_units'];
    }

    /**
     * Sets exempt_units
     *
     * @param double $exempt_units Number of units in this line item that were calculated to be exempt according to this rate detail.
     *
     * @return $this
     */
    public function setExemptUnits($exempt_units)
    {
        $this->container['exempt_units'] = $exempt_units;

        return $this;
    }

    /**
     * Gets unit_of_basis
     *
     * @return string
     */
    public function getUnitOfBasis()
    {
        return $this->container['unit_of_basis'];
    }

    /**
     * Sets unit_of_basis
     *
     * @param string $unit_of_basis When calculating units, what basis of measurement did we use for calculating the units?
     *
     * @return $this
     */
    public function setUnitOfBasis($unit_of_basis)
    {
        $this->container['unit_of_basis'] = $unit_of_basis;

        return $this;
    }

    /**
     * Gets is_non_pass_thru
     *
     * @return bool
     */
    public function getIsNonPassThru()
    {
        return $this->container['is_non_pass_thru'];
    }

    /**
     * Sets is_non_pass_thru
     *
     * @param bool $is_non_pass_thru True if this value is a non-passthrough tax.                A non-passthrough tax is a tax that may not be charged to a customer; it must be paid directly by the company.
     *
     * @return $this
     */
    public function setIsNonPassThru($is_non_pass_thru)
    {
        $this->container['is_non_pass_thru'] = $is_non_pass_thru;

        return $this;
    }

    /**
     * Gets is_fee
     *
     * @return bool
     */
    public function getIsFee()
    {
        return $this->container['is_fee'];
    }

    /**
     * Sets is_fee
     *
     * @param bool $is_fee The Taxes/Fee component. True if the fee is applied.
     *
     * @return $this
     */
    public function setIsFee($is_fee)
    {
        $this->container['is_fee'] = $is_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


