<?php
/**
 * UpdateCompanyLocationRemittanceModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * UpdateCompanyLocationRemittanceModel Class Doc Comment
 *
 * @category Class
 * @description Expire a location without restriction then update with new remittance and dates.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateCompanyLocationRemittanceModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateCompanyLocationRemittanceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_category_id' => 'string',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_category_id' => null,
        'effective_date' => 'date',
        'end_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_category_id' => 'addressCategoryId',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_category_id' => 'setAddressCategoryId',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_category_id' => 'getAddressCategoryId',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ADDRESS_CATEGORY_ID_STOREFRONT = 'Storefront';
    const ADDRESS_CATEGORY_ID_MAIN_OFFICE = 'MainOffice';
    const ADDRESS_CATEGORY_ID_WAREHOUSE = 'Warehouse';
    const ADDRESS_CATEGORY_ID_SALESPERSON = 'Salesperson';
    const ADDRESS_CATEGORY_ID_OTHER = 'Other';
    const ADDRESS_CATEGORY_ID_SELLER_REMITS_TAX = 'SellerRemitsTax';
    const ADDRESS_CATEGORY_ID_MARKETPLACE_REMITS_TAX = 'MarketplaceRemitsTax';
    const ADDRESS_CATEGORY_ID_NON_PHYSICAL = 'NonPhysical';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressCategoryIdAllowableValues()
    {
        return [
            self::ADDRESS_CATEGORY_ID_STOREFRONT,
            self::ADDRESS_CATEGORY_ID_MAIN_OFFICE,
            self::ADDRESS_CATEGORY_ID_WAREHOUSE,
            self::ADDRESS_CATEGORY_ID_SALESPERSON,
            self::ADDRESS_CATEGORY_ID_OTHER,
            self::ADDRESS_CATEGORY_ID_SELLER_REMITS_TAX,
            self::ADDRESS_CATEGORY_ID_MARKETPLACE_REMITS_TAX,
            self::ADDRESS_CATEGORY_ID_NON_PHYSICAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_category_id'] = isset($data['address_category_id']) ? $data['address_category_id'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_category_id'] === null) {
            $invalidProperties[] = "'address_category_id' can't be null";
        }
        $allowedValues = $this->getAddressCategoryIdAllowableValues();
        if (!is_null($this->container['address_category_id']) && !in_array($this->container['address_category_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'address_category_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['effective_date'] === null) {
            $invalidProperties[] = "'effective_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_category_id
     *
     * @return string
     */
    public function getAddressCategoryId()
    {
        return $this->container['address_category_id'];
    }

    /**
     * Sets address_category_id
     *
     * @param string $address_category_id Indicates whether this location is a physical place of business or a temporary salesperson location.
     *
     * @return $this
     */
    public function setAddressCategoryId($address_category_id)
    {
        $allowedValues = $this->getAddressCategoryIdAllowableValues();
        if (!in_array($address_category_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'address_category_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_category_id'] = $address_category_id;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date when this location was opened for business.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date If this place of business has closed, the date when this location closed business. If null it'll be set to the date of 9998-12-31.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


