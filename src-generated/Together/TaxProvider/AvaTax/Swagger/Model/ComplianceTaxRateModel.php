<?php
/**
 * ComplianceTaxRateModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\TaxProvider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\ObjectSerializer;

/**
 * ComplianceTaxRateModel Class Doc Comment
 *
 * @category Class
 * @description The tax rate model.
 * @package  Together\Taxes
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplianceTaxRateModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplianceTaxRateModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'rate' => 'double',
        'jurisdiction_id' => 'int',
        'tax_region_id' => 'int',
        'effective_date' => '\DateTime',
        'end_date' => '\DateTime',
        'rate_type_id' => 'string',
        'tax_type_id' => 'string',
        'tax_name' => 'string',
        'unit_of_basis_id' => 'int',
        'rate_type_tax_type_mapping_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'rate' => 'double',
        'jurisdiction_id' => 'int32',
        'tax_region_id' => 'int32',
        'effective_date' => 'date',
        'end_date' => 'date',
        'rate_type_id' => null,
        'tax_type_id' => null,
        'tax_name' => null,
        'unit_of_basis_id' => 'int64',
        'rate_type_tax_type_mapping_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rate' => 'rate',
        'jurisdiction_id' => 'jurisdictionId',
        'tax_region_id' => 'taxRegionId',
        'effective_date' => 'effectiveDate',
        'end_date' => 'endDate',
        'rate_type_id' => 'rateTypeId',
        'tax_type_id' => 'taxTypeId',
        'tax_name' => 'taxName',
        'unit_of_basis_id' => 'unitOfBasisId',
        'rate_type_tax_type_mapping_id' => 'rateTypeTaxTypeMappingId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rate' => 'setRate',
        'jurisdiction_id' => 'setJurisdictionId',
        'tax_region_id' => 'setTaxRegionId',
        'effective_date' => 'setEffectiveDate',
        'end_date' => 'setEndDate',
        'rate_type_id' => 'setRateTypeId',
        'tax_type_id' => 'setTaxTypeId',
        'tax_name' => 'setTaxName',
        'unit_of_basis_id' => 'setUnitOfBasisId',
        'rate_type_tax_type_mapping_id' => 'setRateTypeTaxTypeMappingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rate' => 'getRate',
        'jurisdiction_id' => 'getJurisdictionId',
        'tax_region_id' => 'getTaxRegionId',
        'effective_date' => 'getEffectiveDate',
        'end_date' => 'getEndDate',
        'rate_type_id' => 'getRateTypeId',
        'tax_type_id' => 'getTaxTypeId',
        'tax_name' => 'getTaxName',
        'unit_of_basis_id' => 'getUnitOfBasisId',
        'rate_type_tax_type_mapping_id' => 'getRateTypeTaxTypeMappingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['jurisdiction_id'] = isset($data['jurisdiction_id']) ? $data['jurisdiction_id'] : null;
        $this->container['tax_region_id'] = isset($data['tax_region_id']) ? $data['tax_region_id'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['rate_type_id'] = isset($data['rate_type_id']) ? $data['rate_type_id'] : null;
        $this->container['tax_type_id'] = isset($data['tax_type_id']) ? $data['tax_type_id'] : null;
        $this->container['tax_name'] = isset($data['tax_name']) ? $data['tax_name'] : null;
        $this->container['unit_of_basis_id'] = isset($data['unit_of_basis_id']) ? $data['unit_of_basis_id'] : null;
        $this->container['rate_type_tax_type_mapping_id'] = isset($data['rate_type_tax_type_mapping_id']) ? $data['rate_type_tax_type_mapping_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique id of the rate.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate The tax rate.
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets jurisdiction_id
     *
     * @return int
     */
    public function getJurisdictionId()
    {
        return $this->container['jurisdiction_id'];
    }

    /**
     * Sets jurisdiction_id
     *
     * @param int $jurisdiction_id The id of the jurisdiction.
     *
     * @return $this
     */
    public function setJurisdictionId($jurisdiction_id)
    {
        $this->container['jurisdiction_id'] = $jurisdiction_id;

        return $this;
    }

    /**
     * Gets tax_region_id
     *
     * @return int
     */
    public function getTaxRegionId()
    {
        return $this->container['tax_region_id'];
    }

    /**
     * Sets tax_region_id
     *
     * @param int $tax_region_id The id of the tax region.
     *
     * @return $this
     */
    public function setTaxRegionId($tax_region_id)
    {
        $this->container['tax_region_id'] = $tax_region_id;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date The date this rate is starts to take effect.
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The date this rate is no longer active.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets rate_type_id
     *
     * @return string
     */
    public function getRateTypeId()
    {
        return $this->container['rate_type_id'];
    }

    /**
     * Sets rate_type_id
     *
     * @param string $rate_type_id The rate type.
     *
     * @return $this
     */
    public function setRateTypeId($rate_type_id)
    {
        $this->container['rate_type_id'] = $rate_type_id;

        return $this;
    }

    /**
     * Gets tax_type_id
     *
     * @return string
     */
    public function getTaxTypeId()
    {
        return $this->container['tax_type_id'];
    }

    /**
     * Sets tax_type_id
     *
     * @param string $tax_type_id The tax type.
     *
     * @return $this
     */
    public function setTaxTypeId($tax_type_id)
    {
        $this->container['tax_type_id'] = $tax_type_id;

        return $this;
    }

    /**
     * Gets tax_name
     *
     * @return string
     */
    public function getTaxName()
    {
        return $this->container['tax_name'];
    }

    /**
     * Sets tax_name
     *
     * @param string $tax_name The name of the tax.
     *
     * @return $this
     */
    public function setTaxName($tax_name)
    {
        $this->container['tax_name'] = $tax_name;

        return $this;
    }

    /**
     * Gets unit_of_basis_id
     *
     * @return int
     */
    public function getUnitOfBasisId()
    {
        return $this->container['unit_of_basis_id'];
    }

    /**
     * Sets unit_of_basis_id
     *
     * @param int $unit_of_basis_id The unit of basis.
     *
     * @return $this
     */
    public function setUnitOfBasisId($unit_of_basis_id)
    {
        $this->container['unit_of_basis_id'] = $unit_of_basis_id;

        return $this;
    }

    /**
     * Gets rate_type_tax_type_mapping_id
     *
     * @return int
     */
    public function getRateTypeTaxTypeMappingId()
    {
        return $this->container['rate_type_tax_type_mapping_id'];
    }

    /**
     * Sets rate_type_tax_type_mapping_id
     *
     * @param int $rate_type_tax_type_mapping_id The rate type tax type mapping id.
     *
     * @return $this
     */
    public function setRateTypeTaxTypeMappingId($rate_type_tax_type_mapping_id)
    {
        $this->container['rate_type_tax_type_mapping_id'] = $rate_type_tax_type_mapping_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


