<?php
/**
 * TaxAuthorityInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * TaxAuthorityInfo Class Doc Comment
 *
 * @category Class
 * @description Information about a tax authority relevant for an address.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxAuthorityInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaxAuthorityInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'avalara_id' => 'string',
        'jurisdiction_name' => 'string',
        'jurisdiction_type' => 'string',
        'signature_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'avalara_id' => null,
        'jurisdiction_name' => null,
        'jurisdiction_type' => null,
        'signature_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avalara_id' => 'avalaraId',
        'jurisdiction_name' => 'jurisdictionName',
        'jurisdiction_type' => 'jurisdictionType',
        'signature_code' => 'signatureCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avalara_id' => 'setAvalaraId',
        'jurisdiction_name' => 'setJurisdictionName',
        'jurisdiction_type' => 'setJurisdictionType',
        'signature_code' => 'setSignatureCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avalara_id' => 'getAvalaraId',
        'jurisdiction_name' => 'getJurisdictionName',
        'jurisdiction_type' => 'getJurisdictionType',
        'signature_code' => 'getSignatureCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURISDICTION_TYPE_COUNTRY = 'Country';
    const JURISDICTION_TYPE_STATE = 'State';
    const JURISDICTION_TYPE_COUNTY = 'County';
    const JURISDICTION_TYPE_CITY = 'City';
    const JURISDICTION_TYPE_SPECIAL = 'Special';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionTypeAllowableValues()
    {
        return [
            self::JURISDICTION_TYPE_COUNTRY,
            self::JURISDICTION_TYPE_STATE,
            self::JURISDICTION_TYPE_COUNTY,
            self::JURISDICTION_TYPE_CITY,
            self::JURISDICTION_TYPE_SPECIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['avalara_id'] = isset($data['avalara_id']) ? $data['avalara_id'] : null;
        $this->container['jurisdiction_name'] = isset($data['jurisdiction_name']) ? $data['jurisdiction_name'] : null;
        $this->container['jurisdiction_type'] = isset($data['jurisdiction_type']) ? $data['jurisdiction_type'] : null;
        $this->container['signature_code'] = isset($data['signature_code']) ? $data['signature_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['jurisdiction_name'] === null) {
            $invalidProperties[] = "'jurisdiction_name' can't be null";
        }
        if ((mb_strlen($this->container['jurisdiction_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'jurisdiction_name', the character length must be smaller than or equal to 128.";
        }

        if ((mb_strlen($this->container['jurisdiction_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'jurisdiction_name', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($this->container['jurisdiction_type']) && !in_array($this->container['jurisdiction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jurisdiction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['signature_code']) && (mb_strlen($this->container['signature_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'signature_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['signature_code']) && (mb_strlen($this->container['signature_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'signature_code', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avalara_id
     *
     * @return string
     */
    public function getAvalaraId()
    {
        return $this->container['avalara_id'];
    }

    /**
     * Sets avalara_id
     *
     * @param string $avalara_id A unique ID number assigned by Avalara to this tax authority.
     *
     * @return $this
     */
    public function setAvalaraId($avalara_id)
    {
        $this->container['avalara_id'] = $avalara_id;

        return $this;
    }

    /**
     * Gets jurisdiction_name
     *
     * @return string
     */
    public function getJurisdictionName()
    {
        return $this->container['jurisdiction_name'];
    }

    /**
     * Sets jurisdiction_name
     *
     * @param string $jurisdiction_name The friendly jurisdiction name for this tax authority.
     *
     * @return $this
     */
    public function setJurisdictionName($jurisdiction_name)
    {
        if ((mb_strlen($jurisdiction_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $jurisdiction_name when calling TaxAuthorityInfo., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($jurisdiction_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $jurisdiction_name when calling TaxAuthorityInfo., must be bigger than or equal to 0.');
        }

        $this->container['jurisdiction_name'] = $jurisdiction_name;

        return $this;
    }

    /**
     * Gets jurisdiction_type
     *
     * @return string
     */
    public function getJurisdictionType()
    {
        return $this->container['jurisdiction_type'];
    }

    /**
     * Sets jurisdiction_type
     *
     * @param string $jurisdiction_type The type of jurisdiction referenced by this tax authority.
     *
     * @return $this
     */
    public function setJurisdictionType($jurisdiction_type)
    {
        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($jurisdiction_type) && !in_array($jurisdiction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jurisdiction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction_type'] = $jurisdiction_type;

        return $this;
    }

    /**
     * Gets signature_code
     *
     * @return string
     */
    public function getSignatureCode()
    {
        return $this->container['signature_code'];
    }

    /**
     * Sets signature_code
     *
     * @param string $signature_code An Avalara-assigned signature code for this tax authority.
     *
     * @return $this
     */
    public function setSignatureCode($signature_code)
    {
        if (!is_null($signature_code) && (mb_strlen($signature_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $signature_code when calling TaxAuthorityInfo., must be smaller than or equal to 4.');
        }
        if (!is_null($signature_code) && (mb_strlen($signature_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $signature_code when calling TaxAuthorityInfo., must be bigger than or equal to 0.');
        }

        $this->container['signature_code'] = $signature_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


