<?php
/**
 * CustomerModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * CustomerModel Class Doc Comment
 *
 * @category Class
 * @description Represents a customer to whom you sell products and/or services.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'customer_code' => 'string',
        'alternate_id' => 'string',
        'name' => 'string',
        'attn_name' => 'string',
        'line1' => 'string',
        'line2' => 'string',
        'city' => 'string',
        'postal_code' => 'string',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'email_address' => 'string',
        'contact_name' => 'string',
        'last_transaction' => '\DateTime',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime',
        'country' => 'string',
        'region' => 'string',
        'is_bill' => 'bool',
        'is_ship' => 'bool',
        'taxpayer_id_number' => 'string',
        'certificates' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\CertificateModel[]',
        'custom_fields' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\CustomFieldModel[]',
        'exposure_zones' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\ExposureZoneModel[]',
        'ship_tos' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerModel[]',
        'attributes' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerAttributeModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'customer_code' => null,
        'alternate_id' => null,
        'name' => null,
        'attn_name' => null,
        'line1' => null,
        'line2' => null,
        'city' => null,
        'postal_code' => null,
        'phone_number' => null,
        'fax_number' => null,
        'email_address' => null,
        'contact_name' => null,
        'last_transaction' => 'date-time',
        'created_date' => 'date-time',
        'modified_date' => 'date-time',
        'country' => null,
        'region' => null,
        'is_bill' => null,
        'is_ship' => null,
        'taxpayer_id_number' => null,
        'certificates' => null,
        'custom_fields' => null,
        'exposure_zones' => null,
        'ship_tos' => null,
        'attributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'customer_code' => 'customerCode',
        'alternate_id' => 'alternateId',
        'name' => 'name',
        'attn_name' => 'attnName',
        'line1' => 'line1',
        'line2' => 'line2',
        'city' => 'city',
        'postal_code' => 'postalCode',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'email_address' => 'emailAddress',
        'contact_name' => 'contactName',
        'last_transaction' => 'lastTransaction',
        'created_date' => 'createdDate',
        'modified_date' => 'modifiedDate',
        'country' => 'country',
        'region' => 'region',
        'is_bill' => 'isBill',
        'is_ship' => 'isShip',
        'taxpayer_id_number' => 'taxpayerIdNumber',
        'certificates' => 'certificates',
        'custom_fields' => 'customFields',
        'exposure_zones' => 'exposureZones',
        'ship_tos' => 'shipTos',
        'attributes' => 'attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'customer_code' => 'setCustomerCode',
        'alternate_id' => 'setAlternateId',
        'name' => 'setName',
        'attn_name' => 'setAttnName',
        'line1' => 'setLine1',
        'line2' => 'setLine2',
        'city' => 'setCity',
        'postal_code' => 'setPostalCode',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'email_address' => 'setEmailAddress',
        'contact_name' => 'setContactName',
        'last_transaction' => 'setLastTransaction',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'is_bill' => 'setIsBill',
        'is_ship' => 'setIsShip',
        'taxpayer_id_number' => 'setTaxpayerIdNumber',
        'certificates' => 'setCertificates',
        'custom_fields' => 'setCustomFields',
        'exposure_zones' => 'setExposureZones',
        'ship_tos' => 'setShipTos',
        'attributes' => 'setAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'customer_code' => 'getCustomerCode',
        'alternate_id' => 'getAlternateId',
        'name' => 'getName',
        'attn_name' => 'getAttnName',
        'line1' => 'getLine1',
        'line2' => 'getLine2',
        'city' => 'getCity',
        'postal_code' => 'getPostalCode',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'email_address' => 'getEmailAddress',
        'contact_name' => 'getContactName',
        'last_transaction' => 'getLastTransaction',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'is_bill' => 'getIsBill',
        'is_ship' => 'getIsShip',
        'taxpayer_id_number' => 'getTaxpayerIdNumber',
        'certificates' => 'getCertificates',
        'custom_fields' => 'getCustomFields',
        'exposure_zones' => 'getExposureZones',
        'ship_tos' => 'getShipTos',
        'attributes' => 'getAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['alternate_id'] = isset($data['alternate_id']) ? $data['alternate_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['attn_name'] = isset($data['attn_name']) ? $data['attn_name'] : null;
        $this->container['line1'] = isset($data['line1']) ? $data['line1'] : null;
        $this->container['line2'] = isset($data['line2']) ? $data['line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['last_transaction'] = isset($data['last_transaction']) ? $data['last_transaction'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['is_bill'] = isset($data['is_bill']) ? $data['is_bill'] : null;
        $this->container['is_ship'] = isset($data['is_ship']) ? $data['is_ship'] : null;
        $this->container['taxpayer_id_number'] = isset($data['taxpayer_id_number']) ? $data['taxpayer_id_number'] : null;
        $this->container['certificates'] = isset($data['certificates']) ? $data['certificates'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['exposure_zones'] = isset($data['exposure_zones']) ? $data['exposure_zones'] : null;
        $this->container['ship_tos'] = isset($data['ship_tos']) ? $data['ship_tos'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['customer_code'] === null) {
            $invalidProperties[] = "'customer_code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['line1'] === null) {
            $invalidProperties[] = "'line1' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['postal_code'] === null) {
            $invalidProperties[] = "'postal_code' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['region'] === null) {
            $invalidProperties[] = "'region' can't be null";
        }
        if ((mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['region']) < 0)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID number of this customer.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the AvaTax company that recorded this customer.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code The unique code identifying this customer.  Must be unique within your company.                This code should be used in the `customerCode` field of any call that creates or adjusts a transaction  in order to ensure that all exemptions that apply to this customer are correctly considered.                Note: This field is case sensitive.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets alternate_id
     *
     * @return string
     */
    public function getAlternateId()
    {
        return $this->container['alternate_id'];
    }

    /**
     * Sets alternate_id
     *
     * @param string $alternate_id A customer-configurable alternate ID number for this customer.  You may set this value to match any  other system that would like to reference this customer record.
     *
     * @return $this
     */
    public function setAlternateId($alternate_id)
    {
        $this->container['alternate_id'] = $alternate_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A friendly name identifying this customer.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets attn_name
     *
     * @return string
     */
    public function getAttnName()
    {
        return $this->container['attn_name'];
    }

    /**
     * Sets attn_name
     *
     * @param string $attn_name Indicates the \"Attn:\" component of the address for this customer, if this customer requires mailings to be shipped  to the attention of a specific person or department name.
     *
     * @return $this
     */
    public function setAttnName($attn_name)
    {
        $this->container['attn_name'] = $attn_name;

        return $this;
    }

    /**
     * Gets line1
     *
     * @return string
     */
    public function getLine1()
    {
        return $this->container['line1'];
    }

    /**
     * Sets line1
     *
     * @param string $line1 First line of the street address of this customer.
     *
     * @return $this
     */
    public function setLine1($line1)
    {
        $this->container['line1'] = $line1;

        return $this;
    }

    /**
     * Gets line2
     *
     * @return string
     */
    public function getLine2()
    {
        return $this->container['line2'];
    }

    /**
     * Sets line2
     *
     * @param string $line2 Second line of the street address of this customer.
     *
     * @return $this
     */
    public function setLine2($line2)
    {
        $this->container['line2'] = $line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City component of the street address of this customer.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Postal Code / Zip Code component of the address of this customer.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number The main phone number for this customer.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string $fax_number The fax phone number for this customer, if any.
     *
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address The main email address for this customer.
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name The name of the main contact person for this customer.
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets last_transaction
     *
     * @return \DateTime
     */
    public function getLastTransaction()
    {
        return $this->container['last_transaction'];
    }

    /**
     * Sets last_transaction
     *
     * @param \DateTime $last_transaction Date when this customer last executed a transaction.
     *
     * @return $this
     */
    public function setLastTransaction($last_transaction)
    {
        $this->container['last_transaction'] = $last_transaction;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region ISO 3166 code identifying the region within the country.  Two and three character ISO 3166 region codes.                For a full list of all supported codes, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        if ((mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling CustomerModel., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $region when calling CustomerModel., must be bigger than or equal to 0.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets is_bill
     *
     * @return bool
     */
    public function getIsBill()
    {
        return $this->container['is_bill'];
    }

    /**
     * Sets is_bill
     *
     * @param bool $is_bill True if this customer record is specifically used for bill-to purposes.
     *
     * @return $this
     */
    public function setIsBill($is_bill)
    {
        $this->container['is_bill'] = $is_bill;

        return $this;
    }

    /**
     * Gets is_ship
     *
     * @return bool
     */
    public function getIsShip()
    {
        return $this->container['is_ship'];
    }

    /**
     * Sets is_ship
     *
     * @param bool $is_ship True if this customer record is specifically used for ship-to purposes.
     *
     * @return $this
     */
    public function setIsShip($is_ship)
    {
        $this->container['is_ship'] = $is_ship;

        return $this;
    }

    /**
     * Gets taxpayer_id_number
     *
     * @return string
     */
    public function getTaxpayerIdNumber()
    {
        return $this->container['taxpayer_id_number'];
    }

    /**
     * Sets taxpayer_id_number
     *
     * @param string $taxpayer_id_number For customers in the United States, this field is the federal taxpayer ID number.  For businesses, this is  a Federal Employer Identification Number.  For individuals, this will be a Social Security Number.
     *
     * @return $this
     */
    public function setTaxpayerIdNumber($taxpayer_id_number)
    {
        $this->container['taxpayer_id_number'] = $taxpayer_id_number;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\CertificateModel[]
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\CertificateModel[] $certificates A list of exemption certficates that apply to this customer.  You can fetch this data by specifying  `$include=certificates` when calling a customer fetch API.
     *
     * @return $this
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomFieldModel[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomFieldModel[] $custom_fields A list of custom fields defined on this customer.                For more information about custom fields, see the [Avalara Help Center article about custom fields](https://help.avalara.com/0021_Avalara_CertCapture/All_About_CertCapture/Edit_or_Remove_Details_about_Customers).
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets exposure_zones
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\ExposureZoneModel[]
     */
    public function getExposureZones()
    {
        return $this->container['exposure_zones'];
    }

    /**
     * Sets exposure_zones
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\ExposureZoneModel[] $exposure_zones A list of exposure zones where you do business with this customer.                To keep track of certificates that are needed for each customer, set this value to a list of all exposure zones where you  sell products to this customer.  You can find a list of exposure zones by calling `ListExposureZones`.                This field is often called \"Ship-To States\" or \"Ship-To Zones\", since it generally refers to locations where you ship products  when this customer makes a purchase.                This field is useful for audit purposes since it helps you ensure you have the necessary certificates for each customer.
     *
     * @return $this
     */
    public function setExposureZones($exposure_zones)
    {
        $this->container['exposure_zones'] = $exposure_zones;

        return $this;
    }

    /**
     * Gets ship_tos
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerModel[]
     */
    public function getShipTos()
    {
        return $this->container['ship_tos'];
    }

    /**
     * Sets ship_tos
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerModel[] $ship_tos A list of ship-to customer records that are connected to this bill-to customer.                Customer records represent businesses or individuals who can provide exemption certificates.  Some customers  may have certificates that are linked to their shipping address or their billing address.  To group these  customer records together, you may link multiple bill-to and ship-to addresses together to represent a single  entity that has multiple different addresses of different kinds.
     *
     * @return $this
     */
    public function setShipTos($ship_tos)
    {
        $this->container['ship_tos'] = $ship_tos;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerAttributeModel[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\CustomerAttributeModel[] $attributes A list of attributes that apply to this customer.                You can fetch this data by specifying `$include=attributes` when calling a customer fetch API.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


