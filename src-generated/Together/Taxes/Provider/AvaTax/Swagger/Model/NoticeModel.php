<?php
/**
 * NoticeModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * NoticeModel Class Doc Comment
 *
 * @category Class
 * @description Represents a letter received from a tax authority regarding tax filing.  These letters often have the warning \&quot;Notice\&quot; printed at the top, which is why  they are called \&quot;Notices\&quot;.
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NoticeModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NoticeModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'company_id' => 'int',
        'status_id' => 'int',
        'status' => 'string',
        'received_date' => '\DateTime',
        'closed_date' => '\DateTime',
        'total_remit' => 'double',
        'customer_type_id' => 'string',
        'country' => 'string',
        'region' => 'string',
        'tax_authority_id' => 'int',
        'filing_frequency' => 'string',
        'filing_type_id' => 'string',
        'ticket_reference_no' => 'string',
        'ticket_reference_url' => 'string',
        'sales_force_case' => 'string',
        'sales_force_case_url' => 'string',
        'tax_period' => 'string',
        'reason_id' => 'int',
        'reason' => 'string',
        'type_id' => 'int',
        'type' => 'string',
        'customer_funding_option_id' => 'string',
        'priority_id' => 'string',
        'customer_comment' => 'string',
        'hide_from_customer' => 'bool',
        'expected_resolution_date' => '\DateTime',
        'show_resolution_date_to_customer' => 'bool',
        'closed_by_user_id' => 'int',
        'created_by_user_name' => 'string',
        'owned_by_user_id' => 'int',
        'description' => 'string',
        'ava_file_form_id' => 'int',
        'revenue_contact_id' => 'int',
        'compliance_contact_id' => 'int',
        'tax_form_code' => 'string',
        'document_reference' => 'string',
        'jurisdiction_name' => 'string',
        'jurisdiction_type' => 'string',
        'comments' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeCommentModel[]',
        'finances' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeFinanceModel[]',
        'responsibility' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeResponsibilityDetailModel[]',
        'root_cause' => '\Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeRootCauseDetailModel[]',
        'created_date' => '\DateTime',
        'created_user_id' => 'int',
        'modified_date' => '\DateTime',
        'modified_user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'company_id' => 'int32',
        'status_id' => 'int32',
        'status' => null,
        'received_date' => 'date-time',
        'closed_date' => 'date-time',
        'total_remit' => 'double',
        'customer_type_id' => null,
        'country' => null,
        'region' => null,
        'tax_authority_id' => 'int32',
        'filing_frequency' => null,
        'filing_type_id' => null,
        'ticket_reference_no' => null,
        'ticket_reference_url' => null,
        'sales_force_case' => null,
        'sales_force_case_url' => null,
        'tax_period' => null,
        'reason_id' => 'int32',
        'reason' => null,
        'type_id' => 'int32',
        'type' => null,
        'customer_funding_option_id' => null,
        'priority_id' => null,
        'customer_comment' => null,
        'hide_from_customer' => null,
        'expected_resolution_date' => 'date-time',
        'show_resolution_date_to_customer' => null,
        'closed_by_user_id' => 'int32',
        'created_by_user_name' => null,
        'owned_by_user_id' => 'int32',
        'description' => null,
        'ava_file_form_id' => 'int32',
        'revenue_contact_id' => 'int32',
        'compliance_contact_id' => 'int32',
        'tax_form_code' => null,
        'document_reference' => null,
        'jurisdiction_name' => null,
        'jurisdiction_type' => null,
        'comments' => null,
        'finances' => null,
        'responsibility' => null,
        'root_cause' => null,
        'created_date' => 'date-time',
        'created_user_id' => 'int32',
        'modified_date' => 'date-time',
        'modified_user_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'status_id' => 'statusId',
        'status' => 'status',
        'received_date' => 'receivedDate',
        'closed_date' => 'closedDate',
        'total_remit' => 'totalRemit',
        'customer_type_id' => 'customerTypeId',
        'country' => 'country',
        'region' => 'region',
        'tax_authority_id' => 'taxAuthorityId',
        'filing_frequency' => 'filingFrequency',
        'filing_type_id' => 'filingTypeId',
        'ticket_reference_no' => 'ticketReferenceNo',
        'ticket_reference_url' => 'ticketReferenceUrl',
        'sales_force_case' => 'salesForceCase',
        'sales_force_case_url' => 'salesForceCaseUrl',
        'tax_period' => 'taxPeriod',
        'reason_id' => 'reasonId',
        'reason' => 'reason',
        'type_id' => 'typeId',
        'type' => 'type',
        'customer_funding_option_id' => 'customerFundingOptionId',
        'priority_id' => 'priorityId',
        'customer_comment' => 'customerComment',
        'hide_from_customer' => 'hideFromCustomer',
        'expected_resolution_date' => 'expectedResolutionDate',
        'show_resolution_date_to_customer' => 'showResolutionDateToCustomer',
        'closed_by_user_id' => 'closedByUserId',
        'created_by_user_name' => 'createdByUserName',
        'owned_by_user_id' => 'ownedByUserId',
        'description' => 'description',
        'ava_file_form_id' => 'avaFileFormId',
        'revenue_contact_id' => 'revenueContactId',
        'compliance_contact_id' => 'complianceContactId',
        'tax_form_code' => 'taxFormCode',
        'document_reference' => 'documentReference',
        'jurisdiction_name' => 'jurisdictionName',
        'jurisdiction_type' => 'jurisdictionType',
        'comments' => 'comments',
        'finances' => 'finances',
        'responsibility' => 'responsibility',
        'root_cause' => 'rootCause',
        'created_date' => 'createdDate',
        'created_user_id' => 'createdUserId',
        'modified_date' => 'modifiedDate',
        'modified_user_id' => 'modifiedUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'status_id' => 'setStatusId',
        'status' => 'setStatus',
        'received_date' => 'setReceivedDate',
        'closed_date' => 'setClosedDate',
        'total_remit' => 'setTotalRemit',
        'customer_type_id' => 'setCustomerTypeId',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'tax_authority_id' => 'setTaxAuthorityId',
        'filing_frequency' => 'setFilingFrequency',
        'filing_type_id' => 'setFilingTypeId',
        'ticket_reference_no' => 'setTicketReferenceNo',
        'ticket_reference_url' => 'setTicketReferenceUrl',
        'sales_force_case' => 'setSalesForceCase',
        'sales_force_case_url' => 'setSalesForceCaseUrl',
        'tax_period' => 'setTaxPeriod',
        'reason_id' => 'setReasonId',
        'reason' => 'setReason',
        'type_id' => 'setTypeId',
        'type' => 'setType',
        'customer_funding_option_id' => 'setCustomerFundingOptionId',
        'priority_id' => 'setPriorityId',
        'customer_comment' => 'setCustomerComment',
        'hide_from_customer' => 'setHideFromCustomer',
        'expected_resolution_date' => 'setExpectedResolutionDate',
        'show_resolution_date_to_customer' => 'setShowResolutionDateToCustomer',
        'closed_by_user_id' => 'setClosedByUserId',
        'created_by_user_name' => 'setCreatedByUserName',
        'owned_by_user_id' => 'setOwnedByUserId',
        'description' => 'setDescription',
        'ava_file_form_id' => 'setAvaFileFormId',
        'revenue_contact_id' => 'setRevenueContactId',
        'compliance_contact_id' => 'setComplianceContactId',
        'tax_form_code' => 'setTaxFormCode',
        'document_reference' => 'setDocumentReference',
        'jurisdiction_name' => 'setJurisdictionName',
        'jurisdiction_type' => 'setJurisdictionType',
        'comments' => 'setComments',
        'finances' => 'setFinances',
        'responsibility' => 'setResponsibility',
        'root_cause' => 'setRootCause',
        'created_date' => 'setCreatedDate',
        'created_user_id' => 'setCreatedUserId',
        'modified_date' => 'setModifiedDate',
        'modified_user_id' => 'setModifiedUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'status_id' => 'getStatusId',
        'status' => 'getStatus',
        'received_date' => 'getReceivedDate',
        'closed_date' => 'getClosedDate',
        'total_remit' => 'getTotalRemit',
        'customer_type_id' => 'getCustomerTypeId',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'tax_authority_id' => 'getTaxAuthorityId',
        'filing_frequency' => 'getFilingFrequency',
        'filing_type_id' => 'getFilingTypeId',
        'ticket_reference_no' => 'getTicketReferenceNo',
        'ticket_reference_url' => 'getTicketReferenceUrl',
        'sales_force_case' => 'getSalesForceCase',
        'sales_force_case_url' => 'getSalesForceCaseUrl',
        'tax_period' => 'getTaxPeriod',
        'reason_id' => 'getReasonId',
        'reason' => 'getReason',
        'type_id' => 'getTypeId',
        'type' => 'getType',
        'customer_funding_option_id' => 'getCustomerFundingOptionId',
        'priority_id' => 'getPriorityId',
        'customer_comment' => 'getCustomerComment',
        'hide_from_customer' => 'getHideFromCustomer',
        'expected_resolution_date' => 'getExpectedResolutionDate',
        'show_resolution_date_to_customer' => 'getShowResolutionDateToCustomer',
        'closed_by_user_id' => 'getClosedByUserId',
        'created_by_user_name' => 'getCreatedByUserName',
        'owned_by_user_id' => 'getOwnedByUserId',
        'description' => 'getDescription',
        'ava_file_form_id' => 'getAvaFileFormId',
        'revenue_contact_id' => 'getRevenueContactId',
        'compliance_contact_id' => 'getComplianceContactId',
        'tax_form_code' => 'getTaxFormCode',
        'document_reference' => 'getDocumentReference',
        'jurisdiction_name' => 'getJurisdictionName',
        'jurisdiction_type' => 'getJurisdictionType',
        'comments' => 'getComments',
        'finances' => 'getFinances',
        'responsibility' => 'getResponsibility',
        'root_cause' => 'getRootCause',
        'created_date' => 'getCreatedDate',
        'created_user_id' => 'getCreatedUserId',
        'modified_date' => 'getModifiedDate',
        'modified_user_id' => 'getModifiedUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CUSTOMER_TYPE_ID_AVA_TAX_RETURNS = 'AvaTaxReturns';
    const CUSTOMER_TYPE_ID_STAND_ALONE = 'StandAlone';
    const CUSTOMER_TYPE_ID_STRATEGIC = 'Strategic';
    const CUSTOMER_TYPE_ID_SST = 'SST';
    const CUSTOMER_TYPE_ID_TRUST_FILE = 'TrustFile';
    const CUSTOMER_TYPE_ID_PWC = 'PWC';
    const CUSTOMER_TYPE_ID_HUDSON_GROUP = 'HudsonGroup';
    const FILING_FREQUENCY_MONTHLY = 'Monthly';
    const FILING_FREQUENCY_QUARTERLY = 'Quarterly';
    const FILING_FREQUENCY_SEMI_ANNUALLY = 'SemiAnnually';
    const FILING_FREQUENCY_ANNUALLY = 'Annually';
    const FILING_FREQUENCY_BIMONTHLY = 'Bimonthly';
    const FILING_FREQUENCY_OCCASIONAL = 'Occasional';
    const FILING_FREQUENCY_INVERSE_QUARTERLY = 'InverseQuarterly';
    const FILING_FREQUENCY_WEEKLY = 'Weekly';
    const FILING_TYPE_ID_ELECTRONIC_RETURN = 'ElectronicReturn';
    const FILING_TYPE_ID_PAPER_RETURN = 'PaperReturn';
    const FILING_TYPE_ID_RETURN_NOT_FILED = 'ReturnNotFiled';
    const FILING_TYPE_ID_EFT_PAPER = 'EFTPaper';
    const FILING_TYPE_ID_SER = 'SER';
    const FILING_TYPE_ID_TRUSTFILE_EDI = 'TrustfileEdi';
    const FILING_TYPE_ID_UPLOAD_FILE = 'UploadFile';
    const FILING_TYPE_ID_PAPER_MANUAL = 'PaperManual';
    const FILING_TYPE_ID_CERT_CAPTURE = 'CertCapture';
    const FILING_TYPE_ID_SIGNATURE_READY = 'SignatureReady';
    const CUSTOMER_FUNDING_OPTION_ID_PULL = 'Pull';
    const CUSTOMER_FUNDING_OPTION_ID_WIRE = 'Wire';
    const PRIORITY_ID_IMMEDIATE_ATTENTION_REQUIRED = 'ImmediateAttentionRequired';
    const PRIORITY_ID_HIGH = 'High';
    const PRIORITY_ID_NORMAL = 'Normal';
    const PRIORITY_ID_LOW = 'Low';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerTypeIdAllowableValues()
    {
        return [
            self::CUSTOMER_TYPE_ID_AVA_TAX_RETURNS,
            self::CUSTOMER_TYPE_ID_STAND_ALONE,
            self::CUSTOMER_TYPE_ID_STRATEGIC,
            self::CUSTOMER_TYPE_ID_SST,
            self::CUSTOMER_TYPE_ID_TRUST_FILE,
            self::CUSTOMER_TYPE_ID_PWC,
            self::CUSTOMER_TYPE_ID_HUDSON_GROUP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingFrequencyAllowableValues()
    {
        return [
            self::FILING_FREQUENCY_MONTHLY,
            self::FILING_FREQUENCY_QUARTERLY,
            self::FILING_FREQUENCY_SEMI_ANNUALLY,
            self::FILING_FREQUENCY_ANNUALLY,
            self::FILING_FREQUENCY_BIMONTHLY,
            self::FILING_FREQUENCY_OCCASIONAL,
            self::FILING_FREQUENCY_INVERSE_QUARTERLY,
            self::FILING_FREQUENCY_WEEKLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingTypeIdAllowableValues()
    {
        return [
            self::FILING_TYPE_ID_ELECTRONIC_RETURN,
            self::FILING_TYPE_ID_PAPER_RETURN,
            self::FILING_TYPE_ID_RETURN_NOT_FILED,
            self::FILING_TYPE_ID_EFT_PAPER,
            self::FILING_TYPE_ID_SER,
            self::FILING_TYPE_ID_TRUSTFILE_EDI,
            self::FILING_TYPE_ID_UPLOAD_FILE,
            self::FILING_TYPE_ID_PAPER_MANUAL,
            self::FILING_TYPE_ID_CERT_CAPTURE,
            self::FILING_TYPE_ID_SIGNATURE_READY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomerFundingOptionIdAllowableValues()
    {
        return [
            self::CUSTOMER_FUNDING_OPTION_ID_PULL,
            self::CUSTOMER_FUNDING_OPTION_ID_WIRE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriorityIdAllowableValues()
    {
        return [
            self::PRIORITY_ID_IMMEDIATE_ATTENTION_REQUIRED,
            self::PRIORITY_ID_HIGH,
            self::PRIORITY_ID_NORMAL,
            self::PRIORITY_ID_LOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['received_date'] = isset($data['received_date']) ? $data['received_date'] : null;
        $this->container['closed_date'] = isset($data['closed_date']) ? $data['closed_date'] : null;
        $this->container['total_remit'] = isset($data['total_remit']) ? $data['total_remit'] : null;
        $this->container['customer_type_id'] = isset($data['customer_type_id']) ? $data['customer_type_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['tax_authority_id'] = isset($data['tax_authority_id']) ? $data['tax_authority_id'] : null;
        $this->container['filing_frequency'] = isset($data['filing_frequency']) ? $data['filing_frequency'] : null;
        $this->container['filing_type_id'] = isset($data['filing_type_id']) ? $data['filing_type_id'] : null;
        $this->container['ticket_reference_no'] = isset($data['ticket_reference_no']) ? $data['ticket_reference_no'] : null;
        $this->container['ticket_reference_url'] = isset($data['ticket_reference_url']) ? $data['ticket_reference_url'] : null;
        $this->container['sales_force_case'] = isset($data['sales_force_case']) ? $data['sales_force_case'] : null;
        $this->container['sales_force_case_url'] = isset($data['sales_force_case_url']) ? $data['sales_force_case_url'] : null;
        $this->container['tax_period'] = isset($data['tax_period']) ? $data['tax_period'] : null;
        $this->container['reason_id'] = isset($data['reason_id']) ? $data['reason_id'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['customer_funding_option_id'] = isset($data['customer_funding_option_id']) ? $data['customer_funding_option_id'] : null;
        $this->container['priority_id'] = isset($data['priority_id']) ? $data['priority_id'] : null;
        $this->container['customer_comment'] = isset($data['customer_comment']) ? $data['customer_comment'] : null;
        $this->container['hide_from_customer'] = isset($data['hide_from_customer']) ? $data['hide_from_customer'] : null;
        $this->container['expected_resolution_date'] = isset($data['expected_resolution_date']) ? $data['expected_resolution_date'] : null;
        $this->container['show_resolution_date_to_customer'] = isset($data['show_resolution_date_to_customer']) ? $data['show_resolution_date_to_customer'] : null;
        $this->container['closed_by_user_id'] = isset($data['closed_by_user_id']) ? $data['closed_by_user_id'] : null;
        $this->container['created_by_user_name'] = isset($data['created_by_user_name']) ? $data['created_by_user_name'] : null;
        $this->container['owned_by_user_id'] = isset($data['owned_by_user_id']) ? $data['owned_by_user_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['ava_file_form_id'] = isset($data['ava_file_form_id']) ? $data['ava_file_form_id'] : null;
        $this->container['revenue_contact_id'] = isset($data['revenue_contact_id']) ? $data['revenue_contact_id'] : null;
        $this->container['compliance_contact_id'] = isset($data['compliance_contact_id']) ? $data['compliance_contact_id'] : null;
        $this->container['tax_form_code'] = isset($data['tax_form_code']) ? $data['tax_form_code'] : null;
        $this->container['document_reference'] = isset($data['document_reference']) ? $data['document_reference'] : null;
        $this->container['jurisdiction_name'] = isset($data['jurisdiction_name']) ? $data['jurisdiction_name'] : null;
        $this->container['jurisdiction_type'] = isset($data['jurisdiction_type']) ? $data['jurisdiction_type'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['finances'] = isset($data['finances']) ? $data['finances'] : null;
        $this->container['responsibility'] = isset($data['responsibility']) ? $data['responsibility'] : null;
        $this->container['root_cause'] = isset($data['root_cause']) ? $data['root_cause'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['created_user_id'] = isset($data['created_user_id']) ? $data['created_user_id'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
        $this->container['modified_user_id'] = isset($data['modified_user_id']) ? $data['modified_user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['status_id'] === null) {
            $invalidProperties[] = "'status_id' can't be null";
        }
        if ($this->container['received_date'] === null) {
            $invalidProperties[] = "'received_date' can't be null";
        }
        if ($this->container['customer_type_id'] === null) {
            $invalidProperties[] = "'customer_type_id' can't be null";
        }
        $allowedValues = $this->getCustomerTypeIdAllowableValues();
        if (!is_null($this->container['customer_type_id']) && !in_array($this->container['customer_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($this->container['filing_frequency']) && !in_array($this->container['filing_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingTypeIdAllowableValues();
        if (!is_null($this->container['filing_type_id']) && !in_array($this->container['filing_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['reason_id'] === null) {
            $invalidProperties[] = "'reason_id' can't be null";
        }
        $allowedValues = $this->getCustomerFundingOptionIdAllowableValues();
        if (!is_null($this->container['customer_funding_option_id']) && !in_array($this->container['customer_funding_option_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customer_funding_option_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['priority_id'] === null) {
            $invalidProperties[] = "'priority_id' can't be null";
        }
        $allowedValues = $this->getPriorityIdAllowableValues();
        if (!is_null($this->container['priority_id']) && !in_array($this->container['priority_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['hide_from_customer'] === null) {
            $invalidProperties[] = "'hide_from_customer' can't be null";
        }
        if ($this->container['show_resolution_date_to_customer'] === null) {
            $invalidProperties[] = "'show_resolution_date_to_customer' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this notice.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id The unique ID number of the company to which this notice belongs.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param int $status_id The status id of the notice
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the notice
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets received_date
     *
     * @return \DateTime
     */
    public function getReceivedDate()
    {
        return $this->container['received_date'];
    }

    /**
     * Sets received_date
     *
     * @param \DateTime $received_date The received date of the notice
     *
     * @return $this
     */
    public function setReceivedDate($received_date)
    {
        $this->container['received_date'] = $received_date;

        return $this;
    }

    /**
     * Gets closed_date
     *
     * @return \DateTime
     */
    public function getClosedDate()
    {
        return $this->container['closed_date'];
    }

    /**
     * Sets closed_date
     *
     * @param \DateTime $closed_date The closed date of the notice
     *
     * @return $this
     */
    public function setClosedDate($closed_date)
    {
        $this->container['closed_date'] = $closed_date;

        return $this;
    }

    /**
     * Gets total_remit
     *
     * @return double
     */
    public function getTotalRemit()
    {
        return $this->container['total_remit'];
    }

    /**
     * Sets total_remit
     *
     * @param double $total_remit The total remmitance amount for the notice
     *
     * @return $this
     */
    public function setTotalRemit($total_remit)
    {
        $this->container['total_remit'] = $total_remit;

        return $this;
    }

    /**
     * Gets customer_type_id
     *
     * @return string
     */
    public function getCustomerTypeId()
    {
        return $this->container['customer_type_id'];
    }

    /**
     * Sets customer_type_id
     *
     * @param string $customer_type_id NoticeCustomerTypeID can be retrieved from the definitions API
     *
     * @return $this
     */
    public function setCustomerTypeId($customer_type_id)
    {
        $allowedValues = $this->getCustomerTypeIdAllowableValues();
        if (!in_array($customer_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_type_id'] = $customer_type_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Name or ISO 3166 code identifying the country that sent this notice.                This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries                For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Name or ISO 3166 code identifying the region within the country that sent this notice.                This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions                For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets tax_authority_id
     *
     * @return int
     */
    public function getTaxAuthorityId()
    {
        return $this->container['tax_authority_id'];
    }

    /**
     * Sets tax_authority_id
     *
     * @param int $tax_authority_id The tax authority id of the notice
     *
     * @return $this
     */
    public function setTaxAuthorityId($tax_authority_id)
    {
        $this->container['tax_authority_id'] = $tax_authority_id;

        return $this;
    }

    /**
     * Gets filing_frequency
     *
     * @return string
     */
    public function getFilingFrequency()
    {
        return $this->container['filing_frequency'];
    }

    /**
     * Sets filing_frequency
     *
     * @param string $filing_frequency The filing frequency of the notice
     *
     * @return $this
     */
    public function setFilingFrequency($filing_frequency)
    {
        $allowedValues = $this->getFilingFrequencyAllowableValues();
        if (!is_null($filing_frequency) && !in_array($filing_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_frequency'] = $filing_frequency;

        return $this;
    }

    /**
     * Gets filing_type_id
     *
     * @return string
     */
    public function getFilingTypeId()
    {
        return $this->container['filing_type_id'];
    }

    /**
     * Sets filing_type_id
     *
     * @param string $filing_type_id The filing type of the notice
     *
     * @return $this
     */
    public function setFilingTypeId($filing_type_id)
    {
        $allowedValues = $this->getFilingTypeIdAllowableValues();
        if (!is_null($filing_type_id) && !in_array($filing_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_type_id'] = $filing_type_id;

        return $this;
    }

    /**
     * Gets ticket_reference_no
     *
     * @return string
     */
    public function getTicketReferenceNo()
    {
        return $this->container['ticket_reference_no'];
    }

    /**
     * Sets ticket_reference_no
     *
     * @param string $ticket_reference_no The ticket reference number of the notice
     *
     * @return $this
     */
    public function setTicketReferenceNo($ticket_reference_no)
    {
        $this->container['ticket_reference_no'] = $ticket_reference_no;

        return $this;
    }

    /**
     * Gets ticket_reference_url
     *
     * @return string
     */
    public function getTicketReferenceUrl()
    {
        return $this->container['ticket_reference_url'];
    }

    /**
     * Sets ticket_reference_url
     *
     * @param string $ticket_reference_url The ticket reference url of the notice
     *
     * @return $this
     */
    public function setTicketReferenceUrl($ticket_reference_url)
    {
        $this->container['ticket_reference_url'] = $ticket_reference_url;

        return $this;
    }

    /**
     * Gets sales_force_case
     *
     * @return string
     */
    public function getSalesForceCase()
    {
        return $this->container['sales_force_case'];
    }

    /**
     * Sets sales_force_case
     *
     * @param string $sales_force_case The sales force case of the notice
     *
     * @return $this
     */
    public function setSalesForceCase($sales_force_case)
    {
        $this->container['sales_force_case'] = $sales_force_case;

        return $this;
    }

    /**
     * Gets sales_force_case_url
     *
     * @return string
     */
    public function getSalesForceCaseUrl()
    {
        return $this->container['sales_force_case_url'];
    }

    /**
     * Sets sales_force_case_url
     *
     * @param string $sales_force_case_url The URL to the sales force case
     *
     * @return $this
     */
    public function setSalesForceCaseUrl($sales_force_case_url)
    {
        $this->container['sales_force_case_url'] = $sales_force_case_url;

        return $this;
    }

    /**
     * Gets tax_period
     *
     * @return string
     */
    public function getTaxPeriod()
    {
        return $this->container['tax_period'];
    }

    /**
     * Sets tax_period
     *
     * @param string $tax_period The tax period of the notice
     *
     * @return $this
     */
    public function setTaxPeriod($tax_period)
    {
        $this->container['tax_period'] = $tax_period;

        return $this;
    }

    /**
     * Gets reason_id
     *
     * @return int
     */
    public function getReasonId()
    {
        return $this->container['reason_id'];
    }

    /**
     * Sets reason_id
     *
     * @param int $reason_id The notice reason id
     *
     * @return $this
     */
    public function setReasonId($reason_id)
    {
        $this->container['reason_id'] = $reason_id;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The notice reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int $type_id The tax notice type id
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The tax notice type description
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets customer_funding_option_id
     *
     * @return string
     */
    public function getCustomerFundingOptionId()
    {
        return $this->container['customer_funding_option_id'];
    }

    /**
     * Sets customer_funding_option_id
     *
     * @param string $customer_funding_option_id The notice customer funding options
     *
     * @return $this
     */
    public function setCustomerFundingOptionId($customer_funding_option_id)
    {
        $allowedValues = $this->getCustomerFundingOptionIdAllowableValues();
        if (!is_null($customer_funding_option_id) && !in_array($customer_funding_option_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customer_funding_option_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customer_funding_option_id'] = $customer_funding_option_id;

        return $this;
    }

    /**
     * Gets priority_id
     *
     * @return string
     */
    public function getPriorityId()
    {
        return $this->container['priority_id'];
    }

    /**
     * Sets priority_id
     *
     * @param string $priority_id The priority of the notice
     *
     * @return $this
     */
    public function setPriorityId($priority_id)
    {
        $allowedValues = $this->getPriorityIdAllowableValues();
        if (!in_array($priority_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority_id'] = $priority_id;

        return $this;
    }

    /**
     * Gets customer_comment
     *
     * @return string
     */
    public function getCustomerComment()
    {
        return $this->container['customer_comment'];
    }

    /**
     * Sets customer_comment
     *
     * @param string $customer_comment Comments from the customer on this notice
     *
     * @return $this
     */
    public function setCustomerComment($customer_comment)
    {
        $this->container['customer_comment'] = $customer_comment;

        return $this;
    }

    /**
     * Gets hide_from_customer
     *
     * @return bool
     */
    public function getHideFromCustomer()
    {
        return $this->container['hide_from_customer'];
    }

    /**
     * Sets hide_from_customer
     *
     * @param bool $hide_from_customer Indicator to hide from customer
     *
     * @return $this
     */
    public function setHideFromCustomer($hide_from_customer)
    {
        $this->container['hide_from_customer'] = $hide_from_customer;

        return $this;
    }

    /**
     * Gets expected_resolution_date
     *
     * @return \DateTime
     */
    public function getExpectedResolutionDate()
    {
        return $this->container['expected_resolution_date'];
    }

    /**
     * Sets expected_resolution_date
     *
     * @param \DateTime $expected_resolution_date Expected resolution date of the notice
     *
     * @return $this
     */
    public function setExpectedResolutionDate($expected_resolution_date)
    {
        $this->container['expected_resolution_date'] = $expected_resolution_date;

        return $this;
    }

    /**
     * Gets show_resolution_date_to_customer
     *
     * @return bool
     */
    public function getShowResolutionDateToCustomer()
    {
        return $this->container['show_resolution_date_to_customer'];
    }

    /**
     * Sets show_resolution_date_to_customer
     *
     * @param bool $show_resolution_date_to_customer Indicator to show customer this resolution date
     *
     * @return $this
     */
    public function setShowResolutionDateToCustomer($show_resolution_date_to_customer)
    {
        $this->container['show_resolution_date_to_customer'] = $show_resolution_date_to_customer;

        return $this;
    }

    /**
     * Gets closed_by_user_id
     *
     * @return int
     */
    public function getClosedByUserId()
    {
        return $this->container['closed_by_user_id'];
    }

    /**
     * Sets closed_by_user_id
     *
     * @param int $closed_by_user_id The unique ID number of the user that closed the notice
     *
     * @return $this
     */
    public function setClosedByUserId($closed_by_user_id)
    {
        $this->container['closed_by_user_id'] = $closed_by_user_id;

        return $this;
    }

    /**
     * Gets created_by_user_name
     *
     * @return string
     */
    public function getCreatedByUserName()
    {
        return $this->container['created_by_user_name'];
    }

    /**
     * Sets created_by_user_name
     *
     * @param string $created_by_user_name The user who created the notice
     *
     * @return $this
     */
    public function setCreatedByUserName($created_by_user_name)
    {
        $this->container['created_by_user_name'] = $created_by_user_name;

        return $this;
    }

    /**
     * Gets owned_by_user_id
     *
     * @return int
     */
    public function getOwnedByUserId()
    {
        return $this->container['owned_by_user_id'];
    }

    /**
     * Sets owned_by_user_id
     *
     * @param int $owned_by_user_id The unique ID number of the user that owns the notice
     *
     * @return $this
     */
    public function setOwnedByUserId($owned_by_user_id)
    {
        $this->container['owned_by_user_id'] = $owned_by_user_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the notice
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ava_file_form_id
     *
     * @return int
     */
    public function getAvaFileFormId()
    {
        return $this->container['ava_file_form_id'];
    }

    /**
     * Sets ava_file_form_id
     *
     * @param int $ava_file_form_id The ava file form id of the notice
     *
     * @return $this
     */
    public function setAvaFileFormId($ava_file_form_id)
    {
        $this->container['ava_file_form_id'] = $ava_file_form_id;

        return $this;
    }

    /**
     * Gets revenue_contact_id
     *
     * @return int
     */
    public function getRevenueContactId()
    {
        return $this->container['revenue_contact_id'];
    }

    /**
     * Sets revenue_contact_id
     *
     * @param int $revenue_contact_id The id of the revenue contact
     *
     * @return $this
     */
    public function setRevenueContactId($revenue_contact_id)
    {
        $this->container['revenue_contact_id'] = $revenue_contact_id;

        return $this;
    }

    /**
     * Gets compliance_contact_id
     *
     * @return int
     */
    public function getComplianceContactId()
    {
        return $this->container['compliance_contact_id'];
    }

    /**
     * Sets compliance_contact_id
     *
     * @param int $compliance_contact_id The id of the compliance contact
     *
     * @return $this
     */
    public function setComplianceContactId($compliance_contact_id)
    {
        $this->container['compliance_contact_id'] = $compliance_contact_id;

        return $this;
    }

    /**
     * Gets tax_form_code
     *
     * @return string
     */
    public function getTaxFormCode()
    {
        return $this->container['tax_form_code'];
    }

    /**
     * Sets tax_form_code
     *
     * @param string $tax_form_code The tax form code of the notice
     *
     * @return $this
     */
    public function setTaxFormCode($tax_form_code)
    {
        $this->container['tax_form_code'] = $tax_form_code;

        return $this;
    }

    /**
     * Gets document_reference
     *
     * @return string
     */
    public function getDocumentReference()
    {
        return $this->container['document_reference'];
    }

    /**
     * Sets document_reference
     *
     * @param string $document_reference The document reference of the notice
     *
     * @return $this
     */
    public function setDocumentReference($document_reference)
    {
        $this->container['document_reference'] = $document_reference;

        return $this;
    }

    /**
     * Gets jurisdiction_name
     *
     * @return string
     */
    public function getJurisdictionName()
    {
        return $this->container['jurisdiction_name'];
    }

    /**
     * Sets jurisdiction_name
     *
     * @param string $jurisdiction_name The jurisdiction name of the notice
     *
     * @return $this
     */
    public function setJurisdictionName($jurisdiction_name)
    {
        $this->container['jurisdiction_name'] = $jurisdiction_name;

        return $this;
    }

    /**
     * Gets jurisdiction_type
     *
     * @return string
     */
    public function getJurisdictionType()
    {
        return $this->container['jurisdiction_type'];
    }

    /**
     * Sets jurisdiction_type
     *
     * @param string $jurisdiction_type The jurisdiction type of the notice
     *
     * @return $this
     */
    public function setJurisdictionType($jurisdiction_type)
    {
        $this->container['jurisdiction_type'] = $jurisdiction_type;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeCommentModel[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeCommentModel[] $comments Additional comments on the notice
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets finances
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeFinanceModel[]
     */
    public function getFinances()
    {
        return $this->container['finances'];
    }

    /**
     * Sets finances
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeFinanceModel[] $finances Finance details of the notice
     *
     * @return $this
     */
    public function setFinances($finances)
    {
        $this->container['finances'] = $finances;

        return $this;
    }

    /**
     * Gets responsibility
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeResponsibilityDetailModel[]
     */
    public function getResponsibility()
    {
        return $this->container['responsibility'];
    }

    /**
     * Sets responsibility
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeResponsibilityDetailModel[] $responsibility Notice Responsibility Details
     *
     * @return $this
     */
    public function setResponsibility($responsibility)
    {
        $this->container['responsibility'] = $responsibility;

        return $this;
    }

    /**
     * Gets root_cause
     *
     * @return \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeRootCauseDetailModel[]
     */
    public function getRootCause()
    {
        return $this->container['root_cause'];
    }

    /**
     * Sets root_cause
     *
     * @param \Together\Taxes\Provider\AvaTax\Swagger\Model\NoticeRootCauseDetailModel[] $root_cause Notice Root Cause Details
     *
     * @return $this
     */
    public function setRootCause($root_cause)
    {
        $this->container['root_cause'] = $root_cause;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date when this record was created.
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int $created_user_id The User ID of the user who created this record.
     *
     * @return $this
     */
    public function setCreatedUserId($created_user_id)
    {
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date The date/time when this record was last modified.
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }

    /**
     * Gets modified_user_id
     *
     * @return int
     */
    public function getModifiedUserId()
    {
        return $this->container['modified_user_id'];
    }

    /**
     * Sets modified_user_id
     *
     * @param int $modified_user_id The user ID of the user who last modified this record.
     *
     * @return $this
     */
    public function setModifiedUserId($modified_user_id)
    {
        $this->container['modified_user_id'] = $modified_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


