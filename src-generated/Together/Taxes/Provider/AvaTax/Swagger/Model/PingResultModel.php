<?php
/**
 * PingResultModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * PingResultModel Class Doc Comment
 *
 * @category Class
 * @description Ping Result Model
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PingResultModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PingResultModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'version' => 'string',
        'authenticated' => 'bool',
        'authentication_type' => 'string',
        'authenticated_user_name' => 'string',
        'authenticated_user_id' => 'int',
        'authenticated_account_id' => 'int',
        'authenticated_company_id' => 'int',
        'crmid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'version' => null,
        'authenticated' => null,
        'authentication_type' => null,
        'authenticated_user_name' => null,
        'authenticated_user_id' => 'int32',
        'authenticated_account_id' => 'int32',
        'authenticated_company_id' => 'int32',
        'crmid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'version',
        'authenticated' => 'authenticated',
        'authentication_type' => 'authenticationType',
        'authenticated_user_name' => 'authenticatedUserName',
        'authenticated_user_id' => 'authenticatedUserId',
        'authenticated_account_id' => 'authenticatedAccountId',
        'authenticated_company_id' => 'authenticatedCompanyId',
        'crmid' => 'crmid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'authenticated' => 'setAuthenticated',
        'authentication_type' => 'setAuthenticationType',
        'authenticated_user_name' => 'setAuthenticatedUserName',
        'authenticated_user_id' => 'setAuthenticatedUserId',
        'authenticated_account_id' => 'setAuthenticatedAccountId',
        'authenticated_company_id' => 'setAuthenticatedCompanyId',
        'crmid' => 'setCrmid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'authenticated' => 'getAuthenticated',
        'authentication_type' => 'getAuthenticationType',
        'authenticated_user_name' => 'getAuthenticatedUserName',
        'authenticated_user_id' => 'getAuthenticatedUserId',
        'authenticated_account_id' => 'getAuthenticatedAccountId',
        'authenticated_company_id' => 'getAuthenticatedCompanyId',
        'crmid' => 'getCrmid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTHENTICATION_TYPE_NONE = 'None';
    const AUTHENTICATION_TYPE_USERNAME_PASSWORD = 'UsernamePassword';
    const AUTHENTICATION_TYPE_ACCOUNT_ID_LICENSE_KEY = 'AccountIdLicenseKey';
    const AUTHENTICATION_TYPE_OPEN_ID_BEARER_TOKEN = 'OpenIdBearerToken';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_NONE,
            self::AUTHENTICATION_TYPE_USERNAME_PASSWORD,
            self::AUTHENTICATION_TYPE_ACCOUNT_ID_LICENSE_KEY,
            self::AUTHENTICATION_TYPE_OPEN_ID_BEARER_TOKEN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['authenticated'] = isset($data['authenticated']) ? $data['authenticated'] : null;
        $this->container['authentication_type'] = isset($data['authentication_type']) ? $data['authentication_type'] : null;
        $this->container['authenticated_user_name'] = isset($data['authenticated_user_name']) ? $data['authenticated_user_name'] : null;
        $this->container['authenticated_user_id'] = isset($data['authenticated_user_id']) ? $data['authenticated_user_id'] : null;
        $this->container['authenticated_account_id'] = isset($data['authenticated_account_id']) ? $data['authenticated_account_id'] : null;
        $this->container['authenticated_company_id'] = isset($data['authenticated_company_id']) ? $data['authenticated_company_id'] : null;
        $this->container['crmid'] = isset($data['crmid']) ? $data['crmid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($this->container['authentication_type']) && !in_array($this->container['authentication_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authentication_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version number
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets authenticated
     *
     * @return bool
     */
    public function getAuthenticated()
    {
        return $this->container['authenticated'];
    }

    /**
     * Sets authenticated
     *
     * @param bool $authenticated Returns true if you provided authentication for this API call; false if you did not.
     *
     * @return $this
     */
    public function setAuthenticated($authenticated)
    {
        $this->container['authenticated'] = $authenticated;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string $authentication_type Returns the type of authentication you provided, if authenticated
     *
     * @return $this
     */
    public function setAuthenticationType($authentication_type)
    {
        $allowedValues = $this->getAuthenticationTypeAllowableValues();
        if (!is_null($authentication_type) && !in_array($authentication_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authentication_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets authenticated_user_name
     *
     * @return string
     */
    public function getAuthenticatedUserName()
    {
        return $this->container['authenticated_user_name'];
    }

    /**
     * Sets authenticated_user_name
     *
     * @param string $authenticated_user_name The username of the currently authenticated user, if any.
     *
     * @return $this
     */
    public function setAuthenticatedUserName($authenticated_user_name)
    {
        $this->container['authenticated_user_name'] = $authenticated_user_name;

        return $this;
    }

    /**
     * Gets authenticated_user_id
     *
     * @return int
     */
    public function getAuthenticatedUserId()
    {
        return $this->container['authenticated_user_id'];
    }

    /**
     * Sets authenticated_user_id
     *
     * @param int $authenticated_user_id The ID number of the currently authenticated user, if any.
     *
     * @return $this
     */
    public function setAuthenticatedUserId($authenticated_user_id)
    {
        $this->container['authenticated_user_id'] = $authenticated_user_id;

        return $this;
    }

    /**
     * Gets authenticated_account_id
     *
     * @return int
     */
    public function getAuthenticatedAccountId()
    {
        return $this->container['authenticated_account_id'];
    }

    /**
     * Sets authenticated_account_id
     *
     * @param int $authenticated_account_id The ID number of the currently authenticated user's account, if any.
     *
     * @return $this
     */
    public function setAuthenticatedAccountId($authenticated_account_id)
    {
        $this->container['authenticated_account_id'] = $authenticated_account_id;

        return $this;
    }

    /**
     * Gets authenticated_company_id
     *
     * @return int
     */
    public function getAuthenticatedCompanyId()
    {
        return $this->container['authenticated_company_id'];
    }

    /**
     * Sets authenticated_company_id
     *
     * @param int $authenticated_company_id The ID number of the currently authenticated user's company, if any.
     *
     * @return $this
     */
    public function setAuthenticatedCompanyId($authenticated_company_id)
    {
        $this->container['authenticated_company_id'] = $authenticated_company_id;

        return $this;
    }

    /**
     * Gets crmid
     *
     * @return string
     */
    public function getCrmid()
    {
        return $this->container['crmid'];
    }

    /**
     * Sets crmid
     *
     * @param string $crmid The connected Salesforce account.
     *
     * @return $this
     */
    public function setCrmid($crmid)
    {
        $this->container['crmid'] = $crmid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


