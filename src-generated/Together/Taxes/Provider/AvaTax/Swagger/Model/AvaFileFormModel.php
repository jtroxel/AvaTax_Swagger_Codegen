<?php
/**
 * AvaFileFormModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Together\Taxes\Provider\AvaTax\Swagger\Model;

use \ArrayAccess;
use \Together\Taxes\Provider\AvaTax\Swagger\ObjectSerializer;

/**
 * AvaFileFormModel Class Doc Comment
 *
 * @category Class
 * @description Represents information about a tax form known to Avalara
 * @package  Together\Taxes\Provider\AvaTax\Swagger
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvaFileFormModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AvaFileFormModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'return_name' => 'string',
        'form_name' => 'string',
        'description' => 'string',
        'eff_date' => '\DateTime',
        'end_date' => '\DateTime',
        'region' => 'string',
        'country' => 'string',
        'form_type_id' => 'string',
        'filing_option_type_id' => 'string',
        'due_date_type_id' => 'string',
        'due_day' => 'int',
        'efile_due_date_type_id' => 'string',
        'efile_due_day' => 'int',
        'efile_due_time' => '\DateTime',
        'has_vendor_discount' => 'bool',
        'rounding_type_id' => 'string',
        'outlet_type_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'return_name' => null,
        'form_name' => null,
        'description' => null,
        'eff_date' => 'date-time',
        'end_date' => 'date-time',
        'region' => null,
        'country' => null,
        'form_type_id' => null,
        'filing_option_type_id' => null,
        'due_date_type_id' => null,
        'due_day' => 'int32',
        'efile_due_date_type_id' => null,
        'efile_due_day' => 'int32',
        'efile_due_time' => 'date-time',
        'has_vendor_discount' => null,
        'rounding_type_id' => null,
        'outlet_type_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'return_name' => 'returnName',
        'form_name' => 'formName',
        'description' => 'description',
        'eff_date' => 'effDate',
        'end_date' => 'endDate',
        'region' => 'region',
        'country' => 'country',
        'form_type_id' => 'formTypeId',
        'filing_option_type_id' => 'filingOptionTypeId',
        'due_date_type_id' => 'dueDateTypeId',
        'due_day' => 'dueDay',
        'efile_due_date_type_id' => 'efileDueDateTypeId',
        'efile_due_day' => 'efileDueDay',
        'efile_due_time' => 'efileDueTime',
        'has_vendor_discount' => 'hasVendorDiscount',
        'rounding_type_id' => 'roundingTypeId',
        'outlet_type_id' => 'outletTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'return_name' => 'setReturnName',
        'form_name' => 'setFormName',
        'description' => 'setDescription',
        'eff_date' => 'setEffDate',
        'end_date' => 'setEndDate',
        'region' => 'setRegion',
        'country' => 'setCountry',
        'form_type_id' => 'setFormTypeId',
        'filing_option_type_id' => 'setFilingOptionTypeId',
        'due_date_type_id' => 'setDueDateTypeId',
        'due_day' => 'setDueDay',
        'efile_due_date_type_id' => 'setEfileDueDateTypeId',
        'efile_due_day' => 'setEfileDueDay',
        'efile_due_time' => 'setEfileDueTime',
        'has_vendor_discount' => 'setHasVendorDiscount',
        'rounding_type_id' => 'setRoundingTypeId',
        'outlet_type_id' => 'setOutletTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'return_name' => 'getReturnName',
        'form_name' => 'getFormName',
        'description' => 'getDescription',
        'eff_date' => 'getEffDate',
        'end_date' => 'getEndDate',
        'region' => 'getRegion',
        'country' => 'getCountry',
        'form_type_id' => 'getFormTypeId',
        'filing_option_type_id' => 'getFilingOptionTypeId',
        'due_date_type_id' => 'getDueDateTypeId',
        'due_day' => 'getDueDay',
        'efile_due_date_type_id' => 'getEfileDueDateTypeId',
        'efile_due_day' => 'getEfileDueDay',
        'efile_due_time' => 'getEfileDueTime',
        'has_vendor_discount' => 'getHasVendorDiscount',
        'rounding_type_id' => 'getRoundingTypeId',
        'outlet_type_id' => 'getOutletTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FORM_TYPE_ID_SALES_AND_USE = 'SalesAndUse';
    const FORM_TYPE_ID_SALES = 'Sales';
    const FORM_TYPE_ID_SELLERS_USE = 'SellersUse';
    const FORM_TYPE_ID_LODGING = 'Lodging';
    const FORM_TYPE_ID_SALES_AND_LODGING = 'SalesAndLodging';
    const FORM_TYPE_ID_CONSUMER_USE = 'ConsumerUse';
    const FORM_TYPE_ID_RESORT_AND_RENTAL = 'ResortAndRental';
    const FORM_TYPE_ID_TOURIST_AND_RENTAL = 'TouristAndRental';
    const FORM_TYPE_ID_PREPAYMENT = 'Prepayment';
    const FORM_TYPE_ID_PREPAYMENT_ALLOWED = 'PrepaymentAllowed';
    const FILING_OPTION_TYPE_ID_PAPER = 'Paper';
    const FILING_OPTION_TYPE_ID_OPTIONAL_EFILE = 'OptionalEfile';
    const FILING_OPTION_TYPE_ID_MANDATORY_EFILE = 'MandatoryEfile';
    const DUE_DATE_TYPE_ID_BY_DAY = 'ByDay';
    const DUE_DATE_TYPE_ID_BY_LAST_DAY = 'ByLastDay';
    const DUE_DATE_TYPE_ID_BY_SECOND_LAST_DAY = 'BySecondLastDay';
    const EFILE_DUE_DATE_TYPE_ID_BY_DAY = 'ByDay';
    const EFILE_DUE_DATE_TYPE_ID_BY_LAST_DAY = 'ByLastDay';
    const EFILE_DUE_DATE_TYPE_ID_BY_SECOND_LAST_DAY = 'BySecondLastDay';
    const ROUNDING_TYPE_ID_NONE = 'None';
    const ROUNDING_TYPE_ID_NEAREST = 'Nearest';
    const ROUNDING_TYPE_ID_UP = 'Up';
    const ROUNDING_TYPE_ID_DOWN = 'Down';
    const OUTLET_TYPE_ID_NONE = 'None';
    const OUTLET_TYPE_ID_SCHEDULE = 'Schedule';
    const OUTLET_TYPE_ID_DUPLICATE = 'Duplicate';
    const OUTLET_TYPE_ID_CONSOLIDATED = 'Consolidated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormTypeIdAllowableValues()
    {
        return [
            self::FORM_TYPE_ID_SALES_AND_USE,
            self::FORM_TYPE_ID_SALES,
            self::FORM_TYPE_ID_SELLERS_USE,
            self::FORM_TYPE_ID_LODGING,
            self::FORM_TYPE_ID_SALES_AND_LODGING,
            self::FORM_TYPE_ID_CONSUMER_USE,
            self::FORM_TYPE_ID_RESORT_AND_RENTAL,
            self::FORM_TYPE_ID_TOURIST_AND_RENTAL,
            self::FORM_TYPE_ID_PREPAYMENT,
            self::FORM_TYPE_ID_PREPAYMENT_ALLOWED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFilingOptionTypeIdAllowableValues()
    {
        return [
            self::FILING_OPTION_TYPE_ID_PAPER,
            self::FILING_OPTION_TYPE_ID_OPTIONAL_EFILE,
            self::FILING_OPTION_TYPE_ID_MANDATORY_EFILE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDueDateTypeIdAllowableValues()
    {
        return [
            self::DUE_DATE_TYPE_ID_BY_DAY,
            self::DUE_DATE_TYPE_ID_BY_LAST_DAY,
            self::DUE_DATE_TYPE_ID_BY_SECOND_LAST_DAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEfileDueDateTypeIdAllowableValues()
    {
        return [
            self::EFILE_DUE_DATE_TYPE_ID_BY_DAY,
            self::EFILE_DUE_DATE_TYPE_ID_BY_LAST_DAY,
            self::EFILE_DUE_DATE_TYPE_ID_BY_SECOND_LAST_DAY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoundingTypeIdAllowableValues()
    {
        return [
            self::ROUNDING_TYPE_ID_NONE,
            self::ROUNDING_TYPE_ID_NEAREST,
            self::ROUNDING_TYPE_ID_UP,
            self::ROUNDING_TYPE_ID_DOWN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutletTypeIdAllowableValues()
    {
        return [
            self::OUTLET_TYPE_ID_NONE,
            self::OUTLET_TYPE_ID_SCHEDULE,
            self::OUTLET_TYPE_ID_DUPLICATE,
            self::OUTLET_TYPE_ID_CONSOLIDATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['return_name'] = isset($data['return_name']) ? $data['return_name'] : null;
        $this->container['form_name'] = isset($data['form_name']) ? $data['form_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['eff_date'] = isset($data['eff_date']) ? $data['eff_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['form_type_id'] = isset($data['form_type_id']) ? $data['form_type_id'] : null;
        $this->container['filing_option_type_id'] = isset($data['filing_option_type_id']) ? $data['filing_option_type_id'] : null;
        $this->container['due_date_type_id'] = isset($data['due_date_type_id']) ? $data['due_date_type_id'] : null;
        $this->container['due_day'] = isset($data['due_day']) ? $data['due_day'] : null;
        $this->container['efile_due_date_type_id'] = isset($data['efile_due_date_type_id']) ? $data['efile_due_date_type_id'] : null;
        $this->container['efile_due_day'] = isset($data['efile_due_day']) ? $data['efile_due_day'] : null;
        $this->container['efile_due_time'] = isset($data['efile_due_time']) ? $data['efile_due_time'] : null;
        $this->container['has_vendor_discount'] = isset($data['has_vendor_discount']) ? $data['has_vendor_discount'] : null;
        $this->container['rounding_type_id'] = isset($data['rounding_type_id']) ? $data['rounding_type_id'] : null;
        $this->container['outlet_type_id'] = isset($data['outlet_type_id']) ? $data['outlet_type_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormTypeIdAllowableValues();
        if (!is_null($this->container['form_type_id']) && !in_array($this->container['form_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'form_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFilingOptionTypeIdAllowableValues();
        if (!is_null($this->container['filing_option_type_id']) && !in_array($this->container['filing_option_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'filing_option_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDueDateTypeIdAllowableValues();
        if (!is_null($this->container['due_date_type_id']) && !in_array($this->container['due_date_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'due_date_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEfileDueDateTypeIdAllowableValues();
        if (!is_null($this->container['efile_due_date_type_id']) && !in_array($this->container['efile_due_date_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'efile_due_date_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRoundingTypeIdAllowableValues();
        if (!is_null($this->container['rounding_type_id']) && !in_array($this->container['rounding_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'rounding_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutletTypeIdAllowableValues();
        if (!is_null($this->container['outlet_type_id']) && !in_array($this->container['outlet_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'outlet_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique Id of the form
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets return_name
     *
     * @return string
     */
    public function getReturnName()
    {
        return $this->container['return_name'];
    }

    /**
     * Sets return_name
     *
     * @param string $return_name Name of the file being returned
     *
     * @return $this
     */
    public function setReturnName($return_name)
    {
        $this->container['return_name'] = $return_name;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string
     */
    public function getFormName()
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string $form_name Name of the submitted form
     *
     * @return $this
     */
    public function setFormName($form_name)
    {
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the submitted form
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eff_date
     *
     * @return \DateTime
     */
    public function getEffDate()
    {
        return $this->container['eff_date'];
    }

    /**
     * Sets eff_date
     *
     * @param \DateTime $eff_date The date this form starts to take effect
     *
     * @return $this
     */
    public function setEffDate($eff_date)
    {
        $this->container['eff_date'] = $eff_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The date the form finishes to take effect
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region State/Province/Region where the form is submitted for
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country this form is submitted for
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets form_type_id
     *
     * @return string
     */
    public function getFormTypeId()
    {
        return $this->container['form_type_id'];
    }

    /**
     * Sets form_type_id
     *
     * @param string $form_type_id The type of the form being submitted
     *
     * @return $this
     */
    public function setFormTypeId($form_type_id)
    {
        $allowedValues = $this->getFormTypeIdAllowableValues();
        if (!is_null($form_type_id) && !in_array($form_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'form_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_type_id'] = $form_type_id;

        return $this;
    }

    /**
     * Gets filing_option_type_id
     *
     * @return string
     */
    public function getFilingOptionTypeId()
    {
        return $this->container['filing_option_type_id'];
    }

    /**
     * Sets filing_option_type_id
     *
     * @param string $filing_option_type_id The type of Filing option
     *
     * @return $this
     */
    public function setFilingOptionTypeId($filing_option_type_id)
    {
        $allowedValues = $this->getFilingOptionTypeIdAllowableValues();
        if (!is_null($filing_option_type_id) && !in_array($filing_option_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'filing_option_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['filing_option_type_id'] = $filing_option_type_id;

        return $this;
    }

    /**
     * Gets due_date_type_id
     *
     * @return string
     */
    public function getDueDateTypeId()
    {
        return $this->container['due_date_type_id'];
    }

    /**
     * Sets due_date_type_id
     *
     * @param string $due_date_type_id The type of the due date
     *
     * @return $this
     */
    public function setDueDateTypeId($due_date_type_id)
    {
        $allowedValues = $this->getDueDateTypeIdAllowableValues();
        if (!is_null($due_date_type_id) && !in_array($due_date_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'due_date_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['due_date_type_id'] = $due_date_type_id;

        return $this;
    }

    /**
     * Gets due_day
     *
     * @return int
     */
    public function getDueDay()
    {
        return $this->container['due_day'];
    }

    /**
     * Sets due_day
     *
     * @param int $due_day Due date
     *
     * @return $this
     */
    public function setDueDay($due_day)
    {
        $this->container['due_day'] = $due_day;

        return $this;
    }

    /**
     * Gets efile_due_date_type_id
     *
     * @return string
     */
    public function getEfileDueDateTypeId()
    {
        return $this->container['efile_due_date_type_id'];
    }

    /**
     * Sets efile_due_date_type_id
     *
     * @param string $efile_due_date_type_id The type of E-file due date.
     *
     * @return $this
     */
    public function setEfileDueDateTypeId($efile_due_date_type_id)
    {
        $allowedValues = $this->getEfileDueDateTypeIdAllowableValues();
        if (!is_null($efile_due_date_type_id) && !in_array($efile_due_date_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'efile_due_date_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['efile_due_date_type_id'] = $efile_due_date_type_id;

        return $this;
    }

    /**
     * Gets efile_due_day
     *
     * @return int
     */
    public function getEfileDueDay()
    {
        return $this->container['efile_due_day'];
    }

    /**
     * Sets efile_due_day
     *
     * @param int $efile_due_day The date by when the E-filing should be submitted
     *
     * @return $this
     */
    public function setEfileDueDay($efile_due_day)
    {
        $this->container['efile_due_day'] = $efile_due_day;

        return $this;
    }

    /**
     * Gets efile_due_time
     *
     * @return \DateTime
     */
    public function getEfileDueTime()
    {
        return $this->container['efile_due_time'];
    }

    /**
     * Sets efile_due_time
     *
     * @param \DateTime $efile_due_time The time of day by when the E-filing should be submitted
     *
     * @return $this
     */
    public function setEfileDueTime($efile_due_time)
    {
        $this->container['efile_due_time'] = $efile_due_time;

        return $this;
    }

    /**
     * Gets has_vendor_discount
     *
     * @return bool
     */
    public function getHasVendorDiscount()
    {
        return $this->container['has_vendor_discount'];
    }

    /**
     * Sets has_vendor_discount
     *
     * @param bool $has_vendor_discount Whether the customer has discount
     *
     * @return $this
     */
    public function setHasVendorDiscount($has_vendor_discount)
    {
        $this->container['has_vendor_discount'] = $has_vendor_discount;

        return $this;
    }

    /**
     * Gets rounding_type_id
     *
     * @return string
     */
    public function getRoundingTypeId()
    {
        return $this->container['rounding_type_id'];
    }

    /**
     * Sets rounding_type_id
     *
     * @param string $rounding_type_id The way system does the rounding
     *
     * @return $this
     */
    public function setRoundingTypeId($rounding_type_id)
    {
        $allowedValues = $this->getRoundingTypeIdAllowableValues();
        if (!is_null($rounding_type_id) && !in_array($rounding_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'rounding_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rounding_type_id'] = $rounding_type_id;

        return $this;
    }

    /**
     * Gets outlet_type_id
     *
     * @return string
     */
    public function getOutletTypeId()
    {
        return $this->container['outlet_type_id'];
    }

    /**
     * Sets outlet_type_id
     *
     * @param string $outlet_type_id The outlet type of the form
     *
     * @return $this
     */
    public function setOutletTypeId($outlet_type_id)
    {
        $allowedValues = $this->getOutletTypeIdAllowableValues();
        if (!is_null($outlet_type_id) && !in_array($outlet_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'outlet_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outlet_type_id'] = $outlet_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


