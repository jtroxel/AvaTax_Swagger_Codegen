<?php
/**
 * LocationQuestionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LocationQuestionModel Class Doc Comment
 *
 * @category Class
 * @description Information about questions that the local jurisdictions require for each location
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationQuestionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LocationQuestionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'question' => 'string',
        'description' => 'string',
        'regular_expression' => 'string',
        'example_value' => 'string',
        'jurisdiction_name' => 'string',
        'jurisdiction_type' => 'string',
        'jurisdiction_country' => 'string',
        'jurisdiction_region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'question' => null,
        'description' => null,
        'regular_expression' => null,
        'example_value' => null,
        'jurisdiction_name' => null,
        'jurisdiction_type' => null,
        'jurisdiction_country' => null,
        'jurisdiction_region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'question' => 'question',
        'description' => 'description',
        'regular_expression' => 'regularExpression',
        'example_value' => 'exampleValue',
        'jurisdiction_name' => 'jurisdictionName',
        'jurisdiction_type' => 'jurisdictionType',
        'jurisdiction_country' => 'jurisdictionCountry',
        'jurisdiction_region' => 'jurisdictionRegion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'question' => 'setQuestion',
        'description' => 'setDescription',
        'regular_expression' => 'setRegularExpression',
        'example_value' => 'setExampleValue',
        'jurisdiction_name' => 'setJurisdictionName',
        'jurisdiction_type' => 'setJurisdictionType',
        'jurisdiction_country' => 'setJurisdictionCountry',
        'jurisdiction_region' => 'setJurisdictionRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'question' => 'getQuestion',
        'description' => 'getDescription',
        'regular_expression' => 'getRegularExpression',
        'example_value' => 'getExampleValue',
        'jurisdiction_name' => 'getJurisdictionName',
        'jurisdiction_type' => 'getJurisdictionType',
        'jurisdiction_country' => 'getJurisdictionCountry',
        'jurisdiction_region' => 'getJurisdictionRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JURISDICTION_TYPE_COUNTRY = 'Country';
    const JURISDICTION_TYPE_STATE = 'State';
    const JURISDICTION_TYPE_COUNTY = 'County';
    const JURISDICTION_TYPE_CITY = 'City';
    const JURISDICTION_TYPE_SPECIAL = 'Special';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJurisdictionTypeAllowableValues()
    {
        return [
            self::JURISDICTION_TYPE_COUNTRY,
            self::JURISDICTION_TYPE_STATE,
            self::JURISDICTION_TYPE_COUNTY,
            self::JURISDICTION_TYPE_CITY,
            self::JURISDICTION_TYPE_SPECIAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['question'] = isset($data['question']) ? $data['question'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['regular_expression'] = isset($data['regular_expression']) ? $data['regular_expression'] : null;
        $this->container['example_value'] = isset($data['example_value']) ? $data['example_value'] : null;
        $this->container['jurisdiction_name'] = isset($data['jurisdiction_name']) ? $data['jurisdiction_name'] : null;
        $this->container['jurisdiction_type'] = isset($data['jurisdiction_type']) ? $data['jurisdiction_type'] : null;
        $this->container['jurisdiction_country'] = isset($data['jurisdiction_country']) ? $data['jurisdiction_country'] : null;
        $this->container['jurisdiction_region'] = isset($data['jurisdiction_region']) ? $data['jurisdiction_region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['question'] === null) {
            $invalidProperties[] = "'question' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($this->container['jurisdiction_type']) && !in_array($this->container['jurisdiction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'jurisdiction_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this location setting type
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string $question This is the prompt for this question
     *
     * @return $this
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description If additional information is available about the location setting, this contains descriptive text to help  you identify the correct value to provide in this setting.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets regular_expression
     *
     * @return string
     */
    public function getRegularExpression()
    {
        return $this->container['regular_expression'];
    }

    /**
     * Sets regular_expression
     *
     * @param string $regular_expression If available, this regular expression will verify that the input from the user is in the expected format.
     *
     * @return $this
     */
    public function setRegularExpression($regular_expression)
    {
        $this->container['regular_expression'] = $regular_expression;

        return $this;
    }

    /**
     * Gets example_value
     *
     * @return string
     */
    public function getExampleValue()
    {
        return $this->container['example_value'];
    }

    /**
     * Sets example_value
     *
     * @param string $example_value If available, this is an example value that you can demonstrate to the user to show what is expected.
     *
     * @return $this
     */
    public function setExampleValue($example_value)
    {
        $this->container['example_value'] = $example_value;

        return $this;
    }

    /**
     * Gets jurisdiction_name
     *
     * @return string
     */
    public function getJurisdictionName()
    {
        return $this->container['jurisdiction_name'];
    }

    /**
     * Sets jurisdiction_name
     *
     * @param string $jurisdiction_name Indicates which jurisdiction requires this question
     *
     * @return $this
     */
    public function setJurisdictionName($jurisdiction_name)
    {
        $this->container['jurisdiction_name'] = $jurisdiction_name;

        return $this;
    }

    /**
     * Gets jurisdiction_type
     *
     * @return string
     */
    public function getJurisdictionType()
    {
        return $this->container['jurisdiction_type'];
    }

    /**
     * Sets jurisdiction_type
     *
     * @param string $jurisdiction_type Indicates which type of jurisdiction requires this question
     *
     * @return $this
     */
    public function setJurisdictionType($jurisdiction_type)
    {
        $allowedValues = $this->getJurisdictionTypeAllowableValues();
        if (!is_null($jurisdiction_type) && !in_array($jurisdiction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'jurisdiction_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['jurisdiction_type'] = $jurisdiction_type;

        return $this;
    }

    /**
     * Gets jurisdiction_country
     *
     * @return string
     */
    public function getJurisdictionCountry()
    {
        return $this->container['jurisdiction_country'];
    }

    /**
     * Sets jurisdiction_country
     *
     * @param string $jurisdiction_country Indicates the country that this jurisdiction belongs to
     *
     * @return $this
     */
    public function setJurisdictionCountry($jurisdiction_country)
    {
        $this->container['jurisdiction_country'] = $jurisdiction_country;

        return $this;
    }

    /**
     * Gets jurisdiction_region
     *
     * @return string
     */
    public function getJurisdictionRegion()
    {
        return $this->container['jurisdiction_region'];
    }

    /**
     * Sets jurisdiction_region
     *
     * @param string $jurisdiction_region Indicates the state, region, or province that this jurisdiction belongs to
     *
     * @return $this
     */
    public function setJurisdictionRegion($jurisdiction_region)
    {
        $this->container['jurisdiction_region'] = $jurisdiction_region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


