<?php
/**
 * MarketplaceLocationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MarketplaceLocationModel Class Doc Comment
 *
 * @category Class
 * @description Marketplace Location Output model
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketplaceLocationModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MarketplaceLocationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'region' => 'string',
        'country' => 'string',
        'marketplace_id' => 'string',
        'marketplace' => 'string',
        'marketplace_adoption_date' => '\DateTime',
        'marketplace_end_date' => '\DateTime',
        'legislative_effective_date' => '\DateTime',
        'enforcement_date' => '\DateTime',
        'created_date' => '\DateTime',
        'modified_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'region' => null,
        'country' => null,
        'marketplace_id' => null,
        'marketplace' => null,
        'marketplace_adoption_date' => 'date-time',
        'marketplace_end_date' => 'date-time',
        'legislative_effective_date' => 'date-time',
        'enforcement_date' => 'date-time',
        'created_date' => 'date-time',
        'modified_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'region' => 'region',
        'country' => 'country',
        'marketplace_id' => 'marketplaceId',
        'marketplace' => 'marketplace',
        'marketplace_adoption_date' => 'marketplaceAdoptionDate',
        'marketplace_end_date' => 'marketplaceEndDate',
        'legislative_effective_date' => 'legislativeEffectiveDate',
        'enforcement_date' => 'enforcementDate',
        'created_date' => 'createdDate',
        'modified_date' => 'modifiedDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'region' => 'setRegion',
        'country' => 'setCountry',
        'marketplace_id' => 'setMarketplaceId',
        'marketplace' => 'setMarketplace',
        'marketplace_adoption_date' => 'setMarketplaceAdoptionDate',
        'marketplace_end_date' => 'setMarketplaceEndDate',
        'legislative_effective_date' => 'setLegislativeEffectiveDate',
        'enforcement_date' => 'setEnforcementDate',
        'created_date' => 'setCreatedDate',
        'modified_date' => 'setModifiedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'region' => 'getRegion',
        'country' => 'getCountry',
        'marketplace_id' => 'getMarketplaceId',
        'marketplace' => 'getMarketplace',
        'marketplace_adoption_date' => 'getMarketplaceAdoptionDate',
        'marketplace_end_date' => 'getMarketplaceEndDate',
        'legislative_effective_date' => 'getLegislativeEffectiveDate',
        'enforcement_date' => 'getEnforcementDate',
        'created_date' => 'getCreatedDate',
        'modified_date' => 'getModifiedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['marketplace_adoption_date'] = isset($data['marketplace_adoption_date']) ? $data['marketplace_adoption_date'] : null;
        $this->container['marketplace_end_date'] = isset($data['marketplace_end_date']) ? $data['marketplace_end_date'] : null;
        $this->container['legislative_effective_date'] = isset($data['legislative_effective_date']) ? $data['legislative_effective_date'] : null;
        $this->container['enforcement_date'] = isset($data['enforcement_date']) ? $data['enforcement_date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['modified_date'] = isset($data['modified_date']) ? $data['modified_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region Marketplace Location State
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Marketplace Location Country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets marketplace_id
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param string $marketplace_id Marketplace Location Id
     *
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return string
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param string $marketplace Marketplace Location
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets marketplace_adoption_date
     *
     * @return \DateTime
     */
    public function getMarketplaceAdoptionDate()
    {
        return $this->container['marketplace_adoption_date'];
    }

    /**
     * Sets marketplace_adoption_date
     *
     * @param \DateTime $marketplace_adoption_date Marketplace Location Adoption Date
     *
     * @return $this
     */
    public function setMarketplaceAdoptionDate($marketplace_adoption_date)
    {
        $this->container['marketplace_adoption_date'] = $marketplace_adoption_date;

        return $this;
    }

    /**
     * Gets marketplace_end_date
     *
     * @return \DateTime
     */
    public function getMarketplaceEndDate()
    {
        return $this->container['marketplace_end_date'];
    }

    /**
     * Sets marketplace_end_date
     *
     * @param \DateTime $marketplace_end_date Marketplace Location End Date
     *
     * @return $this
     */
    public function setMarketplaceEndDate($marketplace_end_date)
    {
        $this->container['marketplace_end_date'] = $marketplace_end_date;

        return $this;
    }

    /**
     * Gets legislative_effective_date
     *
     * @return \DateTime
     */
    public function getLegislativeEffectiveDate()
    {
        return $this->container['legislative_effective_date'];
    }

    /**
     * Sets legislative_effective_date
     *
     * @param \DateTime $legislative_effective_date Marketplace Location Legislative Effective Date
     *
     * @return $this
     */
    public function setLegislativeEffectiveDate($legislative_effective_date)
    {
        $this->container['legislative_effective_date'] = $legislative_effective_date;

        return $this;
    }

    /**
     * Gets enforcement_date
     *
     * @return \DateTime
     */
    public function getEnforcementDate()
    {
        return $this->container['enforcement_date'];
    }

    /**
     * Sets enforcement_date
     *
     * @param \DateTime $enforcement_date Marketplace Location Enforcement Date
     *
     * @return $this
     */
    public function setEnforcementDate($enforcement_date)
    {
        $this->container['enforcement_date'] = $enforcement_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date Marketplace Location Created Date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets modified_date
     *
     * @return \DateTime
     */
    public function getModifiedDate()
    {
        return $this->container['modified_date'];
    }

    /**
     * Sets modified_date
     *
     * @param \DateTime $modified_date Marketplace Location Modified Date
     *
     * @return $this
     */
    public function setModifiedDate($modified_date)
    {
        $this->container['modified_date'] = $modified_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


