<?php
/**
 * TransactionLineModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionLineModel Class Doc Comment
 *
 * @category Class
 * @description One line item on this transaction.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionLineModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionLineModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'transaction_id' => 'int',
        'line_number' => 'string',
        'boundary_override_id' => 'int',
        'customer_usage_type' => 'string',
        'entity_use_code' => 'string',
        'description' => 'string',
        'destination_address_id' => 'int',
        'origin_address_id' => 'int',
        'discount_amount' => 'double',
        'discount_type_id' => 'int',
        'exempt_amount' => 'double',
        'exempt_cert_id' => 'int',
        'certificate_id' => 'string',
        'exempt_no' => 'string',
        'is_item_taxable' => 'bool',
        'is_sstp' => 'bool',
        'item_code' => 'string',
        'line_amount' => 'double',
        'quantity' => 'double',
        'ref1' => 'string',
        'ref2' => 'string',
        'reporting_date' => '\DateTime',
        'rev_account' => 'string',
        'sourcing' => 'string',
        'tax' => 'double',
        'taxable_amount' => 'double',
        'tax_calculated' => 'double',
        'tax_code' => 'string',
        'tax_code_id' => 'int',
        'tax_date' => '\DateTime',
        'tax_engine' => 'string',
        'tax_override_type' => 'string',
        'business_identification_no' => 'string',
        'tax_override_amount' => 'double',
        'tax_override_reason' => 'string',
        'tax_included' => 'bool',
        'details' => '\Swagger\Client\Model\TransactionLineDetailModel[]',
        'non_passthrough_details' => '\Swagger\Client\Model\TransactionLineDetailModel[]',
        'line_location_types' => '\Swagger\Client\Model\TransactionLineLocationTypeModel[]',
        'parameters' => '\Swagger\Client\Model\TransactionLineParameterModel[]',
        'hs_code' => 'string',
        'cost_insurance_freight' => 'double',
        'vat_code' => 'string',
        'vat_number_type_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'transaction_id' => 'int64',
        'line_number' => null,
        'boundary_override_id' => 'int32',
        'customer_usage_type' => null,
        'entity_use_code' => null,
        'description' => null,
        'destination_address_id' => 'int64',
        'origin_address_id' => 'int64',
        'discount_amount' => 'double',
        'discount_type_id' => 'int32',
        'exempt_amount' => 'double',
        'exempt_cert_id' => 'int32',
        'certificate_id' => null,
        'exempt_no' => null,
        'is_item_taxable' => null,
        'is_sstp' => null,
        'item_code' => null,
        'line_amount' => 'double',
        'quantity' => 'double',
        'ref1' => null,
        'ref2' => null,
        'reporting_date' => 'date',
        'rev_account' => null,
        'sourcing' => null,
        'tax' => 'double',
        'taxable_amount' => 'double',
        'tax_calculated' => 'double',
        'tax_code' => null,
        'tax_code_id' => 'int32',
        'tax_date' => 'date',
        'tax_engine' => null,
        'tax_override_type' => null,
        'business_identification_no' => null,
        'tax_override_amount' => 'double',
        'tax_override_reason' => null,
        'tax_included' => null,
        'details' => null,
        'non_passthrough_details' => null,
        'line_location_types' => null,
        'parameters' => null,
        'hs_code' => null,
        'cost_insurance_freight' => 'double',
        'vat_code' => null,
        'vat_number_type_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_id' => 'transactionId',
        'line_number' => 'lineNumber',
        'boundary_override_id' => 'boundaryOverrideId',
        'customer_usage_type' => 'customerUsageType',
        'entity_use_code' => 'entityUseCode',
        'description' => 'description',
        'destination_address_id' => 'destinationAddressId',
        'origin_address_id' => 'originAddressId',
        'discount_amount' => 'discountAmount',
        'discount_type_id' => 'discountTypeId',
        'exempt_amount' => 'exemptAmount',
        'exempt_cert_id' => 'exemptCertId',
        'certificate_id' => 'certificateId',
        'exempt_no' => 'exemptNo',
        'is_item_taxable' => 'isItemTaxable',
        'is_sstp' => 'isSSTP',
        'item_code' => 'itemCode',
        'line_amount' => 'lineAmount',
        'quantity' => 'quantity',
        'ref1' => 'ref1',
        'ref2' => 'ref2',
        'reporting_date' => 'reportingDate',
        'rev_account' => 'revAccount',
        'sourcing' => 'sourcing',
        'tax' => 'tax',
        'taxable_amount' => 'taxableAmount',
        'tax_calculated' => 'taxCalculated',
        'tax_code' => 'taxCode',
        'tax_code_id' => 'taxCodeId',
        'tax_date' => 'taxDate',
        'tax_engine' => 'taxEngine',
        'tax_override_type' => 'taxOverrideType',
        'business_identification_no' => 'businessIdentificationNo',
        'tax_override_amount' => 'taxOverrideAmount',
        'tax_override_reason' => 'taxOverrideReason',
        'tax_included' => 'taxIncluded',
        'details' => 'details',
        'non_passthrough_details' => 'nonPassthroughDetails',
        'line_location_types' => 'lineLocationTypes',
        'parameters' => 'parameters',
        'hs_code' => 'hsCode',
        'cost_insurance_freight' => 'costInsuranceFreight',
        'vat_code' => 'vatCode',
        'vat_number_type_id' => 'vatNumberTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_id' => 'setTransactionId',
        'line_number' => 'setLineNumber',
        'boundary_override_id' => 'setBoundaryOverrideId',
        'customer_usage_type' => 'setCustomerUsageType',
        'entity_use_code' => 'setEntityUseCode',
        'description' => 'setDescription',
        'destination_address_id' => 'setDestinationAddressId',
        'origin_address_id' => 'setOriginAddressId',
        'discount_amount' => 'setDiscountAmount',
        'discount_type_id' => 'setDiscountTypeId',
        'exempt_amount' => 'setExemptAmount',
        'exempt_cert_id' => 'setExemptCertId',
        'certificate_id' => 'setCertificateId',
        'exempt_no' => 'setExemptNo',
        'is_item_taxable' => 'setIsItemTaxable',
        'is_sstp' => 'setIsSstp',
        'item_code' => 'setItemCode',
        'line_amount' => 'setLineAmount',
        'quantity' => 'setQuantity',
        'ref1' => 'setRef1',
        'ref2' => 'setRef2',
        'reporting_date' => 'setReportingDate',
        'rev_account' => 'setRevAccount',
        'sourcing' => 'setSourcing',
        'tax' => 'setTax',
        'taxable_amount' => 'setTaxableAmount',
        'tax_calculated' => 'setTaxCalculated',
        'tax_code' => 'setTaxCode',
        'tax_code_id' => 'setTaxCodeId',
        'tax_date' => 'setTaxDate',
        'tax_engine' => 'setTaxEngine',
        'tax_override_type' => 'setTaxOverrideType',
        'business_identification_no' => 'setBusinessIdentificationNo',
        'tax_override_amount' => 'setTaxOverrideAmount',
        'tax_override_reason' => 'setTaxOverrideReason',
        'tax_included' => 'setTaxIncluded',
        'details' => 'setDetails',
        'non_passthrough_details' => 'setNonPassthroughDetails',
        'line_location_types' => 'setLineLocationTypes',
        'parameters' => 'setParameters',
        'hs_code' => 'setHsCode',
        'cost_insurance_freight' => 'setCostInsuranceFreight',
        'vat_code' => 'setVatCode',
        'vat_number_type_id' => 'setVatNumberTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_id' => 'getTransactionId',
        'line_number' => 'getLineNumber',
        'boundary_override_id' => 'getBoundaryOverrideId',
        'customer_usage_type' => 'getCustomerUsageType',
        'entity_use_code' => 'getEntityUseCode',
        'description' => 'getDescription',
        'destination_address_id' => 'getDestinationAddressId',
        'origin_address_id' => 'getOriginAddressId',
        'discount_amount' => 'getDiscountAmount',
        'discount_type_id' => 'getDiscountTypeId',
        'exempt_amount' => 'getExemptAmount',
        'exempt_cert_id' => 'getExemptCertId',
        'certificate_id' => 'getCertificateId',
        'exempt_no' => 'getExemptNo',
        'is_item_taxable' => 'getIsItemTaxable',
        'is_sstp' => 'getIsSstp',
        'item_code' => 'getItemCode',
        'line_amount' => 'getLineAmount',
        'quantity' => 'getQuantity',
        'ref1' => 'getRef1',
        'ref2' => 'getRef2',
        'reporting_date' => 'getReportingDate',
        'rev_account' => 'getRevAccount',
        'sourcing' => 'getSourcing',
        'tax' => 'getTax',
        'taxable_amount' => 'getTaxableAmount',
        'tax_calculated' => 'getTaxCalculated',
        'tax_code' => 'getTaxCode',
        'tax_code_id' => 'getTaxCodeId',
        'tax_date' => 'getTaxDate',
        'tax_engine' => 'getTaxEngine',
        'tax_override_type' => 'getTaxOverrideType',
        'business_identification_no' => 'getBusinessIdentificationNo',
        'tax_override_amount' => 'getTaxOverrideAmount',
        'tax_override_reason' => 'getTaxOverrideReason',
        'tax_included' => 'getTaxIncluded',
        'details' => 'getDetails',
        'non_passthrough_details' => 'getNonPassthroughDetails',
        'line_location_types' => 'getLineLocationTypes',
        'parameters' => 'getParameters',
        'hs_code' => 'getHsCode',
        'cost_insurance_freight' => 'getCostInsuranceFreight',
        'vat_code' => 'getVatCode',
        'vat_number_type_id' => 'getVatNumberTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOURCING_MIXED = 'Mixed';
    const SOURCING_DESTINATION = 'Destination';
    const SOURCING_ORIGIN = 'Origin';
    const TAX_OVERRIDE_TYPE_NONE = 'None';
    const TAX_OVERRIDE_TYPE_TAX_AMOUNT = 'TaxAmount';
    const TAX_OVERRIDE_TYPE_EXEMPTION = 'Exemption';
    const TAX_OVERRIDE_TYPE_TAX_DATE = 'TaxDate';
    const TAX_OVERRIDE_TYPE_ACCRUED_TAX_AMOUNT = 'AccruedTaxAmount';
    const TAX_OVERRIDE_TYPE_DERIVE_TAXABLE = 'DeriveTaxable';
    const TAX_OVERRIDE_TYPE_OUT_OF_HARBOR = 'OutOfHarbor';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourcingAllowableValues()
    {
        return [
            self::SOURCING_MIXED,
            self::SOURCING_DESTINATION,
            self::SOURCING_ORIGIN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxOverrideTypeAllowableValues()
    {
        return [
            self::TAX_OVERRIDE_TYPE_NONE,
            self::TAX_OVERRIDE_TYPE_TAX_AMOUNT,
            self::TAX_OVERRIDE_TYPE_EXEMPTION,
            self::TAX_OVERRIDE_TYPE_TAX_DATE,
            self::TAX_OVERRIDE_TYPE_ACCRUED_TAX_AMOUNT,
            self::TAX_OVERRIDE_TYPE_DERIVE_TAXABLE,
            self::TAX_OVERRIDE_TYPE_OUT_OF_HARBOR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['boundary_override_id'] = isset($data['boundary_override_id']) ? $data['boundary_override_id'] : null;
        $this->container['customer_usage_type'] = isset($data['customer_usage_type']) ? $data['customer_usage_type'] : null;
        $this->container['entity_use_code'] = isset($data['entity_use_code']) ? $data['entity_use_code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['destination_address_id'] = isset($data['destination_address_id']) ? $data['destination_address_id'] : null;
        $this->container['origin_address_id'] = isset($data['origin_address_id']) ? $data['origin_address_id'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['discount_type_id'] = isset($data['discount_type_id']) ? $data['discount_type_id'] : null;
        $this->container['exempt_amount'] = isset($data['exempt_amount']) ? $data['exempt_amount'] : null;
        $this->container['exempt_cert_id'] = isset($data['exempt_cert_id']) ? $data['exempt_cert_id'] : null;
        $this->container['certificate_id'] = isset($data['certificate_id']) ? $data['certificate_id'] : null;
        $this->container['exempt_no'] = isset($data['exempt_no']) ? $data['exempt_no'] : null;
        $this->container['is_item_taxable'] = isset($data['is_item_taxable']) ? $data['is_item_taxable'] : null;
        $this->container['is_sstp'] = isset($data['is_sstp']) ? $data['is_sstp'] : null;
        $this->container['item_code'] = isset($data['item_code']) ? $data['item_code'] : null;
        $this->container['line_amount'] = isset($data['line_amount']) ? $data['line_amount'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['ref1'] = isset($data['ref1']) ? $data['ref1'] : null;
        $this->container['ref2'] = isset($data['ref2']) ? $data['ref2'] : null;
        $this->container['reporting_date'] = isset($data['reporting_date']) ? $data['reporting_date'] : null;
        $this->container['rev_account'] = isset($data['rev_account']) ? $data['rev_account'] : null;
        $this->container['sourcing'] = isset($data['sourcing']) ? $data['sourcing'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['tax_calculated'] = isset($data['tax_calculated']) ? $data['tax_calculated'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['tax_code_id'] = isset($data['tax_code_id']) ? $data['tax_code_id'] : null;
        $this->container['tax_date'] = isset($data['tax_date']) ? $data['tax_date'] : null;
        $this->container['tax_engine'] = isset($data['tax_engine']) ? $data['tax_engine'] : null;
        $this->container['tax_override_type'] = isset($data['tax_override_type']) ? $data['tax_override_type'] : null;
        $this->container['business_identification_no'] = isset($data['business_identification_no']) ? $data['business_identification_no'] : null;
        $this->container['tax_override_amount'] = isset($data['tax_override_amount']) ? $data['tax_override_amount'] : null;
        $this->container['tax_override_reason'] = isset($data['tax_override_reason']) ? $data['tax_override_reason'] : null;
        $this->container['tax_included'] = isset($data['tax_included']) ? $data['tax_included'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['non_passthrough_details'] = isset($data['non_passthrough_details']) ? $data['non_passthrough_details'] : null;
        $this->container['line_location_types'] = isset($data['line_location_types']) ? $data['line_location_types'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['hs_code'] = isset($data['hs_code']) ? $data['hs_code'] : null;
        $this->container['cost_insurance_freight'] = isset($data['cost_insurance_freight']) ? $data['cost_insurance_freight'] : null;
        $this->container['vat_code'] = isset($data['vat_code']) ? $data['vat_code'] : null;
        $this->container['vat_number_type_id'] = isset($data['vat_number_type_id']) ? $data['vat_number_type_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($this->container['sourcing']) && !in_array($this->container['sourcing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sourcing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxOverrideTypeAllowableValues();
        if (!is_null($this->container['tax_override_type']) && !in_array($this->container['tax_override_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_override_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID number of this transaction line item.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param int $transaction_id The unique ID number of the transaction to which this line item belongs.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return string
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param string $line_number The line number or code indicating the line on this invoice or receipt or document.
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets boundary_override_id
     *
     * @return int
     */
    public function getBoundaryOverrideId()
    {
        return $this->container['boundary_override_id'];
    }

    /**
     * Sets boundary_override_id
     *
     * @param int $boundary_override_id The unique ID number of the boundary override applied to this line item.
     *
     * @return $this
     */
    public function setBoundaryOverrideId($boundary_override_id)
    {
        $this->container['boundary_override_id'] = $boundary_override_id;

        return $this;
    }

    /**
     * Gets customer_usage_type
     *
     * @return string
     */
    public function getCustomerUsageType()
    {
        return $this->container['customer_usage_type'];
    }

    /**
     * Sets customer_usage_type
     *
     * @param string $customer_usage_type DEPRECATED - Date: 10/16/2017, Version: 17.11, Message: Please use entityUseCode instead.  The customer usage type for this line item.  Usage type often affects taxability rules.
     *
     * @return $this
     */
    public function setCustomerUsageType($customer_usage_type)
    {
        $this->container['customer_usage_type'] = $customer_usage_type;

        return $this;
    }

    /**
     * Gets entity_use_code
     *
     * @return string
     */
    public function getEntityUseCode()
    {
        return $this->container['entity_use_code'];
    }

    /**
     * Sets entity_use_code
     *
     * @param string $entity_use_code The entity use code for this line item.  Usage type often affects taxability rules.
     *
     * @return $this
     */
    public function setEntityUseCode($entity_use_code)
    {
        $this->container['entity_use_code'] = $entity_use_code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the item or service represented by this line.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets destination_address_id
     *
     * @return int
     */
    public function getDestinationAddressId()
    {
        return $this->container['destination_address_id'];
    }

    /**
     * Sets destination_address_id
     *
     * @param int $destination_address_id The unique ID number of the destination address where this line was delivered or sold.  In the case of a point-of-sale transaction, the destination address and origin address will be the same.  In the case of a shipped transaction, they will be different.
     *
     * @return $this
     */
    public function setDestinationAddressId($destination_address_id)
    {
        $this->container['destination_address_id'] = $destination_address_id;

        return $this;
    }

    /**
     * Gets origin_address_id
     *
     * @return int
     */
    public function getOriginAddressId()
    {
        return $this->container['origin_address_id'];
    }

    /**
     * Sets origin_address_id
     *
     * @param int $origin_address_id The unique ID number of the origin address where this line was delivered or sold.  In the case of a point-of-sale transaction, the origin address and destination address will be the same.  In the case of a shipped transaction, they will be different.
     *
     * @return $this
     */
    public function setOriginAddressId($origin_address_id)
    {
        $this->container['origin_address_id'] = $origin_address_id;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.  In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_type_id
     *
     * @return int
     */
    public function getDiscountTypeId()
    {
        return $this->container['discount_type_id'];
    }

    /**
     * Sets discount_type_id
     *
     * @param int $discount_type_id The type of discount, if any, that was applied to this line item.
     *
     * @return $this
     */
    public function setDiscountTypeId($discount_type_id)
    {
        $this->container['discount_type_id'] = $discount_type_id;

        return $this;
    }

    /**
     * Gets exempt_amount
     *
     * @return double
     */
    public function getExemptAmount()
    {
        return $this->container['exempt_amount'];
    }

    /**
     * Sets exempt_amount
     *
     * @param double $exempt_amount The amount of this line item that was exempt.
     *
     * @return $this
     */
    public function setExemptAmount($exempt_amount)
    {
        $this->container['exempt_amount'] = $exempt_amount;

        return $this;
    }

    /**
     * Gets exempt_cert_id
     *
     * @return int
     */
    public function getExemptCertId()
    {
        return $this->container['exempt_cert_id'];
    }

    /**
     * Sets exempt_cert_id
     *
     * @param int $exempt_cert_id The unique ID number of the exemption certificate that applied to this line item. It is the calc_id associated with a certificate in CertCapture.
     *
     * @return $this
     */
    public function setExemptCertId($exempt_cert_id)
    {
        $this->container['exempt_cert_id'] = $exempt_cert_id;

        return $this;
    }

    /**
     * Gets certificate_id
     *
     * @return string
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string $certificate_id The CertCapture Certificate ID
     *
     * @return $this
     */
    public function setCertificateId($certificate_id)
    {
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets exempt_no
     *
     * @return string
     */
    public function getExemptNo()
    {
        return $this->container['exempt_no'];
    }

    /**
     * Sets exempt_no
     *
     * @param string $exempt_no The customer Tax Id Number (tax_number) associated with a certificate - Sales tax calculation requests first determine if there is an applicable  ECMS entry available, and will utilize it for exemption processing. If no applicable ECMS entry is available, the AvaTax service  will determine if an Exemption Number field is populated or an Entity/Use Code is included in the sales tax calculation request,  and will perform exemption processing using either of those two options.
     *
     * @return $this
     */
    public function setExemptNo($exempt_no)
    {
        $this->container['exempt_no'] = $exempt_no;

        return $this;
    }

    /**
     * Gets is_item_taxable
     *
     * @return bool
     */
    public function getIsItemTaxable()
    {
        return $this->container['is_item_taxable'];
    }

    /**
     * Sets is_item_taxable
     *
     * @param bool $is_item_taxable True if this item is taxable.
     *
     * @return $this
     */
    public function setIsItemTaxable($is_item_taxable)
    {
        $this->container['is_item_taxable'] = $is_item_taxable;

        return $this;
    }

    /**
     * Gets is_sstp
     *
     * @return bool
     */
    public function getIsSstp()
    {
        return $this->container['is_sstp'];
    }

    /**
     * Sets is_sstp
     *
     * @param bool $is_sstp True if this item is a Streamlined Sales Tax line item.
     *
     * @return $this
     */
    public function setIsSstp($is_sstp)
    {
        $this->container['is_sstp'] = $is_sstp;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string $item_code The code string of the item represented by this line item.
     *
     * @return $this
     */
    public function setItemCode($item_code)
    {
        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets line_amount
     *
     * @return double
     */
    public function getLineAmount()
    {
        return $this->container['line_amount'];
    }

    /**
     * Sets line_amount
     *
     * @param double $line_amount The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.  To determine the individual item price, divide this by quantity.
     *
     * @return $this
     */
    public function setLineAmount($line_amount)
    {
        $this->container['line_amount'] = $line_amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity The quantity of products sold on this line item.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets ref1
     *
     * @return string
     */
    public function getRef1()
    {
        return $this->container['ref1'];
    }

    /**
     * Sets ref1
     *
     * @param string $ref1 A user-defined reference identifier for this transaction line item.
     *
     * @return $this
     */
    public function setRef1($ref1)
    {
        $this->container['ref1'] = $ref1;

        return $this;
    }

    /**
     * Gets ref2
     *
     * @return string
     */
    public function getRef2()
    {
        return $this->container['ref2'];
    }

    /**
     * Sets ref2
     *
     * @param string $ref2 A user-defined reference identifier for this transaction line item.
     *
     * @return $this
     */
    public function setRef2($ref2)
    {
        $this->container['ref2'] = $ref2;

        return $this;
    }

    /**
     * Gets reporting_date
     *
     * @return \DateTime
     */
    public function getReportingDate()
    {
        return $this->container['reporting_date'];
    }

    /**
     * Sets reporting_date
     *
     * @param \DateTime $reporting_date The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.  In some cases, line items may be reported later due to delayed shipments or other business reasons.
     *
     * @return $this
     */
    public function setReportingDate($reporting_date)
    {
        $this->container['reporting_date'] = $reporting_date;

        return $this;
    }

    /**
     * Gets rev_account
     *
     * @return string
     */
    public function getRevAccount()
    {
        return $this->container['rev_account'];
    }

    /**
     * Sets rev_account
     *
     * @param string $rev_account The revenue account number for this line item.
     *
     * @return $this
     */
    public function setRevAccount($rev_account)
    {
        $this->container['rev_account'] = $rev_account;

        return $this;
    }

    /**
     * Gets sourcing
     *
     * @return string
     */
    public function getSourcing()
    {
        return $this->container['sourcing'];
    }

    /**
     * Sets sourcing
     *
     * @param string $sourcing Indicates whether this line item was taxed according to the origin or destination.
     *
     * @return $this
     */
    public function setSourcing($sourcing)
    {
        $allowedValues = $this->getSourcingAllowableValues();
        if (!is_null($sourcing) && !in_array($sourcing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sourcing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sourcing'] = $sourcing;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax The tax for this line in this transaction.                If you used a `taxOverride` of type `taxAmount` for this line, this value  will represent the amount of your override.  AvaTax will still attempt to calculate the correct tax  for this line and will store that calculated value in the `taxCalculated` field.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return double
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param double $taxable_amount The taxable amount of this line item.
     *
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets tax_calculated
     *
     * @return double
     */
    public function getTaxCalculated()
    {
        return $this->container['tax_calculated'];
    }

    /**
     * Sets tax_calculated
     *
     * @param double $tax_calculated The amount of tax that AvaTax calculated for the transaction.                If you used a `taxOverride` of type `taxAmount`, there may be a difference between  the `tax` field which applies your override, and the `taxCalculated` field which  represents the amount of tax that AvaTax calculated without the override.                You can compare the `tax` and `taxCalculated` fields to check for any discrepancies  between an external tax calculation provider and the calculation performed by AvaTax.
     *
     * @return $this
     */
    public function setTaxCalculated($tax_calculated)
    {
        $this->container['tax_calculated'] = $tax_calculated;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string $tax_code The code string for the tax code that was used to calculate this line item.
     *
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_code_id
     *
     * @return int
     */
    public function getTaxCodeId()
    {
        return $this->container['tax_code_id'];
    }

    /**
     * Sets tax_code_id
     *
     * @param int $tax_code_id The unique ID number for the tax code that was used to calculate this line item.
     *
     * @return $this
     */
    public function setTaxCodeId($tax_code_id)
    {
        $this->container['tax_code_id'] = $tax_code_id;

        return $this;
    }

    /**
     * Gets tax_date
     *
     * @return \DateTime
     */
    public function getTaxDate()
    {
        return $this->container['tax_date'];
    }

    /**
     * Sets tax_date
     *
     * @param \DateTime $tax_date The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.  In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past  so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased.
     *
     * @return $this
     */
    public function setTaxDate($tax_date)
    {
        $this->container['tax_date'] = $tax_date;

        return $this;
    }

    /**
     * Gets tax_engine
     *
     * @return string
     */
    public function getTaxEngine()
    {
        return $this->container['tax_engine'];
    }

    /**
     * Sets tax_engine
     *
     * @param string $tax_engine The tax engine identifier that was used to calculate this line item.
     *
     * @return $this
     */
    public function setTaxEngine($tax_engine)
    {
        $this->container['tax_engine'] = $tax_engine;

        return $this;
    }

    /**
     * Gets tax_override_type
     *
     * @return string
     */
    public function getTaxOverrideType()
    {
        return $this->container['tax_override_type'];
    }

    /**
     * Sets tax_override_type
     *
     * @param string $tax_override_type If a tax override was specified, this indicates the type of tax override.
     *
     * @return $this
     */
    public function setTaxOverrideType($tax_override_type)
    {
        $allowedValues = $this->getTaxOverrideTypeAllowableValues();
        if (!is_null($tax_override_type) && !in_array($tax_override_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_override_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_override_type'] = $tax_override_type;

        return $this;
    }

    /**
     * Gets business_identification_no
     *
     * @return string
     */
    public function getBusinessIdentificationNo()
    {
        return $this->container['business_identification_no'];
    }

    /**
     * Sets business_identification_no
     *
     * @param string $business_identification_no VAT business identification number used for this transaction.
     *
     * @return $this
     */
    public function setBusinessIdentificationNo($business_identification_no)
    {
        $this->container['business_identification_no'] = $business_identification_no;

        return $this;
    }

    /**
     * Gets tax_override_amount
     *
     * @return double
     */
    public function getTaxOverrideAmount()
    {
        return $this->container['tax_override_amount'];
    }

    /**
     * Sets tax_override_amount
     *
     * @param double $tax_override_amount If a tax override was specified, this indicates the amount of tax that was requested.
     *
     * @return $this
     */
    public function setTaxOverrideAmount($tax_override_amount)
    {
        $this->container['tax_override_amount'] = $tax_override_amount;

        return $this;
    }

    /**
     * Gets tax_override_reason
     *
     * @return string
     */
    public function getTaxOverrideReason()
    {
        return $this->container['tax_override_reason'];
    }

    /**
     * Sets tax_override_reason
     *
     * @param string $tax_override_reason If a tax override was specified, represents the reason for the tax override.
     *
     * @return $this
     */
    public function setTaxOverrideReason($tax_override_reason)
    {
        $this->container['tax_override_reason'] = $tax_override_reason;

        return $this;
    }

    /**
     * Gets tax_included
     *
     * @return bool
     */
    public function getTaxIncluded()
    {
        return $this->container['tax_included'];
    }

    /**
     * Sets tax_included
     *
     * @param bool $tax_included Indicates whether the `amount` for this line already includes tax.                If this value is `true`, the final price of this line including tax will equal the value in `amount`.                If this value is `null` or `false`, the final price will equal `amount` plus whatever taxes apply to this line.
     *
     * @return $this
     */
    public function setTaxIncluded($tax_included)
    {
        $this->container['tax_included'] = $tax_included;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \Swagger\Client\Model\TransactionLineDetailModel[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Swagger\Client\Model\TransactionLineDetailModel[] $details Optional: A list of tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `details` collection are intended to be  displayed to the customer and charged as a 'tax' on the invoice.                To fetch this list, add the query string `?$include=Details` to your URL.
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets non_passthrough_details
     *
     * @return \Swagger\Client\Model\TransactionLineDetailModel[]
     */
    public function getNonPassthroughDetails()
    {
        return $this->container['non_passthrough_details'];
    }

    /**
     * Sets non_passthrough_details
     *
     * @param \Swagger\Client\Model\TransactionLineDetailModel[] $non_passthrough_details Optional: A list of non-passthrough tax details for this line item.                Tax details represent taxes being charged by various tax authorities. Taxes that appear in the `nonPassthroughDetails` collection are  taxes that must be paid directly by the company and not shown to the customer.
     *
     * @return $this
     */
    public function setNonPassthroughDetails($non_passthrough_details)
    {
        $this->container['non_passthrough_details'] = $non_passthrough_details;

        return $this;
    }

    /**
     * Gets line_location_types
     *
     * @return \Swagger\Client\Model\TransactionLineLocationTypeModel[]
     */
    public function getLineLocationTypes()
    {
        return $this->container['line_location_types'];
    }

    /**
     * Sets line_location_types
     *
     * @param \Swagger\Client\Model\TransactionLineLocationTypeModel[] $line_location_types Optional: A list of location types for this line item.  To fetch this list, add the query string \"?$include=LineLocationTypes\" to your URL.
     *
     * @return $this
     */
    public function setLineLocationTypes($line_location_types)
    {
        $this->container['line_location_types'] = $line_location_types;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Swagger\Client\Model\TransactionLineParameterModel[]
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Swagger\Client\Model\TransactionLineParameterModel[] $parameters Contains a list of extra parameters that were set when the transaction was created.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets hs_code
     *
     * @return string
     */
    public function getHsCode()
    {
        return $this->container['hs_code'];
    }

    /**
     * Sets hs_code
     *
     * @param string $hs_code The cross-border harmonized system code (HSCode) used to calculate tariffs and duties for this line item.  For a full list of HS codes, see `ListCrossBorderCodes()`.
     *
     * @return $this
     */
    public function setHsCode($hs_code)
    {
        $this->container['hs_code'] = $hs_code;

        return $this;
    }

    /**
     * Gets cost_insurance_freight
     *
     * @return double
     */
    public function getCostInsuranceFreight()
    {
        return $this->container['cost_insurance_freight'];
    }

    /**
     * Sets cost_insurance_freight
     *
     * @param double $cost_insurance_freight Indicates the cost of insurance and freight for this line.
     *
     * @return $this
     */
    public function setCostInsuranceFreight($cost_insurance_freight)
    {
        $this->container['cost_insurance_freight'] = $cost_insurance_freight;

        return $this;
    }

    /**
     * Gets vat_code
     *
     * @return string
     */
    public function getVatCode()
    {
        return $this->container['vat_code'];
    }

    /**
     * Sets vat_code
     *
     * @param string $vat_code Indicates the VAT code for this line item.
     *
     * @return $this
     */
    public function setVatCode($vat_code)
    {
        $this->container['vat_code'] = $vat_code;

        return $this;
    }

    /**
     * Gets vat_number_type_id
     *
     * @return int
     */
    public function getVatNumberTypeId()
    {
        return $this->container['vat_number_type_id'];
    }

    /**
     * Sets vat_number_type_id
     *
     * @param int $vat_number_type_id Indicates the VAT number type for this line item.
     *
     * @return $this
     */
    public function setVatNumberTypeId($vat_number_type_id)
    {
        $this->container['vat_number_type_id'] = $vat_number_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


