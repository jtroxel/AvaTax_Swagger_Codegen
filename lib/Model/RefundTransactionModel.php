<?php
/**
 * RefundTransactionModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.15
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RefundTransactionModel Class Doc Comment
 *
 * @category Class
 * @description Refund a committed transaction
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RefundTransactionModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RefundTransactionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'refund_transaction_code' => 'string',
        'refund_date' => '\DateTime',
        'refund_type' => 'string',
        'refund_percentage' => 'double',
        'refund_lines' => 'string[]',
        'reference_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'refund_transaction_code' => null,
        'refund_date' => 'date',
        'refund_type' => null,
        'refund_percentage' => 'double',
        'refund_lines' => null,
        'reference_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'refund_transaction_code' => 'refundTransactionCode',
        'refund_date' => 'refundDate',
        'refund_type' => 'refundType',
        'refund_percentage' => 'refundPercentage',
        'refund_lines' => 'refundLines',
        'reference_code' => 'referenceCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'refund_transaction_code' => 'setRefundTransactionCode',
        'refund_date' => 'setRefundDate',
        'refund_type' => 'setRefundType',
        'refund_percentage' => 'setRefundPercentage',
        'refund_lines' => 'setRefundLines',
        'reference_code' => 'setReferenceCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'refund_transaction_code' => 'getRefundTransactionCode',
        'refund_date' => 'getRefundDate',
        'refund_type' => 'getRefundType',
        'refund_percentage' => 'getRefundPercentage',
        'refund_lines' => 'getRefundLines',
        'reference_code' => 'getReferenceCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REFUND_TYPE_FULL = 'Full';
    const REFUND_TYPE_PARTIAL = 'Partial';
    const REFUND_TYPE_TAX_ONLY = 'TaxOnly';
    const REFUND_TYPE_PERCENTAGE = 'Percentage';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefundTypeAllowableValues()
    {
        return [
            self::REFUND_TYPE_FULL,
            self::REFUND_TYPE_PARTIAL,
            self::REFUND_TYPE_TAX_ONLY,
            self::REFUND_TYPE_PERCENTAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['refund_transaction_code'] = isset($data['refund_transaction_code']) ? $data['refund_transaction_code'] : null;
        $this->container['refund_date'] = isset($data['refund_date']) ? $data['refund_date'] : null;
        $this->container['refund_type'] = isset($data['refund_type']) ? $data['refund_type'] : null;
        $this->container['refund_percentage'] = isset($data['refund_percentage']) ? $data['refund_percentage'] : null;
        $this->container['refund_lines'] = isset($data['refund_lines']) ? $data['refund_lines'] : null;
        $this->container['reference_code'] = isset($data['reference_code']) ? $data['reference_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['refund_transaction_code']) && (mb_strlen($this->container['refund_transaction_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'refund_transaction_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['refund_transaction_code']) && (mb_strlen($this->container['refund_transaction_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'refund_transaction_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['refund_date'] === null) {
            $invalidProperties[] = "'refund_date' can't be null";
        }
        $allowedValues = $this->getRefundTypeAllowableValues();
        if (!is_null($this->container['refund_type']) && !in_array($this->container['refund_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'refund_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets refund_transaction_code
     *
     * @return string
     */
    public function getRefundTransactionCode()
    {
        return $this->container['refund_transaction_code'];
    }

    /**
     * Sets refund_transaction_code
     *
     * @param string $refund_transaction_code The transaction code for the refund.  This code will be saved to the `ReturnInvoice` transaction, and does not need to match the code of the original sale.
     *
     * @return $this
     */
    public function setRefundTransactionCode($refund_transaction_code)
    {
        if (!is_null($refund_transaction_code) && (mb_strlen($refund_transaction_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $refund_transaction_code when calling RefundTransactionModel., must be smaller than or equal to 50.');
        }
        if (!is_null($refund_transaction_code) && (mb_strlen($refund_transaction_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $refund_transaction_code when calling RefundTransactionModel., must be bigger than or equal to 0.');
        }

        $this->container['refund_transaction_code'] = $refund_transaction_code;

        return $this;
    }

    /**
     * Gets refund_date
     *
     * @return \DateTime
     */
    public function getRefundDate()
    {
        return $this->container['refund_date'];
    }

    /**
     * Sets refund_date
     *
     * @param \DateTime $refund_date The date of the refund.  For customers using Avalara's Managed Returns Service, this date controls the month in which the refund  transaction will be reported on a tax filing.
     *
     * @return $this
     */
    public function setRefundDate($refund_date)
    {
        $this->container['refund_date'] = $refund_date;

        return $this;
    }

    /**
     * Gets refund_type
     *
     * @return string
     */
    public function getRefundType()
    {
        return $this->container['refund_type'];
    }

    /**
     * Sets refund_type
     *
     * @param string $refund_type Type of this refund.                To submit a full refund, specify `Full`.                To refund only specific lines from the transaction, specify `Partial` and indicate the lines you wish to apply in the `refundLines` field.                To refund the tax that was paid in the previous transaction, specify `TaxOnly`.                To issue a percentage-based discount, specify `Percentage`.
     *
     * @return $this
     */
    public function setRefundType($refund_type)
    {
        $allowedValues = $this->getRefundTypeAllowableValues();
        if (!is_null($refund_type) && !in_array($refund_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'refund_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refund_type'] = $refund_type;

        return $this;
    }

    /**
     * Gets refund_percentage
     *
     * @return double
     */
    public function getRefundPercentage()
    {
        return $this->container['refund_percentage'];
    }

    /**
     * Sets refund_percentage
     *
     * @param double $refund_percentage The percentage for refund.                This value only applies if you choose `refundType = Percentage` or `refundType = Partial`.
     *
     * @return $this
     */
    public function setRefundPercentage($refund_percentage)
    {
        $this->container['refund_percentage'] = $refund_percentage;

        return $this;
    }

    /**
     * Gets refund_lines
     *
     * @return string[]
     */
    public function getRefundLines()
    {
        return $this->container['refund_lines'];
    }

    /**
     * Sets refund_lines
     *
     * @param string[] $refund_lines If you chose a refund of type `Partial`, this indicates which lines from the original transaction are being refunded.
     *
     * @return $this
     */
    public function setRefundLines($refund_lines)
    {
        $this->container['refund_lines'] = $refund_lines;

        return $this;
    }

    /**
     * Gets reference_code
     *
     * @return string
     */
    public function getReferenceCode()
    {
        return $this->container['reference_code'];
    }

    /**
     * Sets reference_code
     *
     * @param string $reference_code A user-defined reference field containing information about this refund.
     *
     * @return $this
     */
    public function setReferenceCode($reference_code)
    {
        $this->container['reference_code'] = $reference_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


